# Generated from VyperParser.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,79,1061,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,5,0,203,8,0,10,0,12,0,206,9,0,1,0,1,0,1,1,1,1,1,2,
        1,2,5,2,214,8,2,10,2,12,2,217,9,2,1,2,1,2,3,2,221,8,2,1,2,1,2,1,
        2,1,2,1,2,3,2,228,8,2,3,2,230,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,238,
        8,2,1,3,1,3,1,3,5,3,243,8,3,10,3,12,3,246,9,3,1,3,1,3,1,4,1,4,1,
        4,1,5,1,5,3,5,255,8,5,1,5,1,5,1,5,3,5,260,8,5,5,5,262,8,5,10,5,12,
        5,265,9,5,1,5,3,5,268,8,5,1,6,1,6,5,6,272,8,6,10,6,12,6,275,9,6,
        1,6,1,6,4,6,279,8,6,11,6,12,6,280,3,6,283,8,6,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,298,8,8,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,3,9,307,8,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,12,1,12,3,12,322,8,12,1,12,3,12,325,8,12,1,13,1,13,
        1,13,1,13,3,13,331,8,13,1,13,3,13,334,8,13,1,13,1,13,1,14,4,14,339,
        8,14,11,14,12,14,340,1,15,1,15,1,15,1,15,1,15,3,15,348,8,15,1,16,
        3,16,351,8,16,1,16,1,16,1,16,3,16,356,8,16,1,16,3,16,359,8,16,5,
        16,361,8,16,10,16,12,16,364,9,16,1,16,3,16,367,8,16,1,17,1,17,1,
        17,1,18,1,18,1,18,1,18,3,18,376,8,18,1,18,1,18,3,18,380,8,18,1,19,
        3,19,383,8,19,1,19,1,19,1,19,1,19,1,20,3,20,390,8,20,1,20,1,20,1,
        20,3,20,395,8,20,3,20,397,8,20,1,20,1,20,3,20,401,8,20,4,20,403,
        8,20,11,20,12,20,404,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,23,1,23,1,23,3,23,423,8,23,3,23,425,8,23,1,
        23,1,23,1,23,3,23,430,8,23,1,23,3,23,433,8,23,4,23,435,8,23,11,23,
        12,23,436,1,23,1,23,1,24,1,24,1,24,1,24,1,24,3,24,446,8,24,1,25,
        1,25,1,26,1,26,1,26,3,26,453,8,26,3,26,455,8,26,1,26,1,26,1,26,3,
        26,460,8,26,4,26,462,8,26,11,26,12,26,463,1,26,1,26,1,27,1,27,1,
        27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,3,28,479,8,28,1,28,1,
        28,5,28,483,8,28,10,28,12,28,486,9,28,1,29,1,29,1,29,1,29,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,3,31,502,8,31,1,32,1,
        32,1,32,1,32,5,32,508,8,32,10,32,12,32,511,9,32,1,32,3,32,514,8,
        32,1,32,1,32,1,33,1,33,1,33,1,33,3,33,522,8,33,1,34,1,34,1,34,1,
        34,3,34,528,8,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,3,
        35,539,8,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,3,
        37,551,8,37,3,37,553,8,37,1,37,1,37,3,37,557,8,37,1,37,3,37,560,
        8,37,4,37,562,8,37,11,37,12,37,563,1,37,1,37,1,38,1,38,1,39,1,39,
        1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,3,40,580,8,40,3,40,582,8,
        40,1,40,1,40,3,40,586,8,40,1,40,3,40,589,8,40,4,40,591,8,40,11,40,
        12,40,592,1,40,1,40,1,41,1,41,3,41,599,8,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,612,8,41,1,41,3,41,615,8,
        41,1,41,3,41,618,8,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,3,44,627,
        8,44,1,45,1,45,3,45,631,8,45,1,45,1,45,1,45,3,45,636,8,45,4,45,638,
        8,45,11,45,12,45,639,1,46,1,46,1,46,1,46,1,46,1,46,3,46,648,8,46,
        1,46,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,50,
        1,50,1,51,1,51,1,52,1,52,1,52,1,52,3,52,670,8,52,1,52,1,52,1,53,
        1,53,1,53,1,53,5,53,678,8,53,10,53,12,53,681,9,53,3,53,683,8,53,
        1,54,1,54,1,54,1,54,1,54,3,54,690,8,54,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,704,8,55,1,56,1,56,1,56,
        1,56,1,57,1,57,1,58,1,58,1,58,1,58,5,58,716,8,58,10,58,12,58,719,
        9,58,1,58,1,58,1,58,3,58,724,8,58,1,59,1,59,1,59,3,59,729,8,59,1,
        60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,3,62,742,8,
        62,1,63,1,63,1,63,1,63,1,63,3,63,749,8,63,1,63,1,63,1,63,5,63,754,
        8,63,10,63,12,63,757,9,63,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,66,
        1,66,3,66,768,8,66,1,66,1,66,1,67,1,67,1,68,1,68,1,68,1,68,1,69,
        1,69,3,69,780,8,69,1,70,1,70,1,70,5,70,785,8,70,10,70,12,70,788,
        9,70,1,70,3,70,791,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,4,71,
        800,8,71,11,71,12,71,801,1,71,3,71,805,8,71,1,71,3,71,808,8,71,1,
        71,1,71,3,71,812,8,71,1,72,1,72,1,72,1,72,1,72,1,72,5,72,820,8,72,
        10,72,12,72,823,9,72,1,72,3,72,826,8,72,1,72,1,72,3,72,830,8,72,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,5,73,843,
        8,73,10,73,12,73,846,9,73,1,73,3,73,849,8,73,1,73,1,73,3,73,853,
        8,73,1,74,3,74,856,8,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,
        5,75,866,8,75,10,75,12,75,869,9,75,1,76,1,76,1,76,1,76,1,76,1,76,
        5,76,877,8,76,10,76,12,76,880,9,76,1,77,1,77,1,77,3,77,885,8,77,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
        1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
        1,78,1,78,5,78,915,8,78,10,78,12,78,918,9,78,1,79,1,79,1,79,1,79,
        1,79,1,79,5,79,926,8,79,10,79,12,79,929,9,79,1,80,1,80,1,80,1,80,
        1,80,1,80,5,80,937,8,80,10,80,12,80,940,9,80,1,81,1,81,1,81,1,81,
        1,81,1,81,5,81,948,8,81,10,81,12,81,951,9,81,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,5,82,962,8,82,10,82,12,82,965,9,82,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,5,83,976,8,83,10,83,12,83,
        979,9,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
        1,84,5,84,993,8,84,10,84,12,84,996,9,84,1,85,1,85,1,85,1,85,1,85,
        1,85,1,85,3,85,1005,8,85,1,86,1,86,1,86,1,86,1,86,1,86,5,86,1013,
        8,86,10,86,12,86,1016,9,86,1,87,1,87,1,87,1,87,1,87,1,88,1,88,1,
        88,1,88,1,88,1,88,1,88,5,88,1030,8,88,10,88,12,88,1033,9,88,1,88,
        1,88,1,89,1,89,3,89,1039,8,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
        1,90,1,90,3,90,1050,8,90,1,91,1,91,1,92,1,92,1,92,3,92,1057,8,92,
        1,93,1,93,1,93,0,11,56,150,152,156,158,160,162,164,166,168,172,94,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,0,3,
        2,0,68,68,72,72,3,0,31,38,52,53,56,58,1,0,72,76,1135,0,204,1,0,0,
        0,2,209,1,0,0,0,4,237,1,0,0,0,6,244,1,0,0,0,8,249,1,0,0,0,10,252,
        1,0,0,0,12,269,1,0,0,0,14,284,1,0,0,0,16,288,1,0,0,0,18,299,1,0,
        0,0,20,308,1,0,0,0,22,312,1,0,0,0,24,321,1,0,0,0,26,326,1,0,0,0,
        28,338,1,0,0,0,30,342,1,0,0,0,32,350,1,0,0,0,34,368,1,0,0,0,36,371,
        1,0,0,0,38,382,1,0,0,0,40,389,1,0,0,0,42,408,1,0,0,0,44,412,1,0,
        0,0,46,419,1,0,0,0,48,440,1,0,0,0,50,447,1,0,0,0,52,449,1,0,0,0,
        54,467,1,0,0,0,56,478,1,0,0,0,58,487,1,0,0,0,60,491,1,0,0,0,62,501,
        1,0,0,0,64,503,1,0,0,0,66,521,1,0,0,0,68,523,1,0,0,0,70,538,1,0,
        0,0,72,540,1,0,0,0,74,544,1,0,0,0,76,567,1,0,0,0,78,569,1,0,0,0,
        80,573,1,0,0,0,82,617,1,0,0,0,84,619,1,0,0,0,86,621,1,0,0,0,88,623,
        1,0,0,0,90,630,1,0,0,0,92,647,1,0,0,0,94,652,1,0,0,0,96,654,1,0,
        0,0,98,659,1,0,0,0,100,661,1,0,0,0,102,663,1,0,0,0,104,665,1,0,0,
        0,106,673,1,0,0,0,108,689,1,0,0,0,110,703,1,0,0,0,112,705,1,0,0,
        0,114,709,1,0,0,0,116,711,1,0,0,0,118,725,1,0,0,0,120,730,1,0,0,
        0,122,732,1,0,0,0,124,741,1,0,0,0,126,748,1,0,0,0,128,758,1,0,0,
        0,130,761,1,0,0,0,132,765,1,0,0,0,134,771,1,0,0,0,136,773,1,0,0,
        0,138,779,1,0,0,0,140,781,1,0,0,0,142,811,1,0,0,0,144,829,1,0,0,
        0,146,852,1,0,0,0,148,855,1,0,0,0,150,859,1,0,0,0,152,870,1,0,0,
        0,154,884,1,0,0,0,156,886,1,0,0,0,158,919,1,0,0,0,160,930,1,0,0,
        0,162,941,1,0,0,0,164,952,1,0,0,0,166,966,1,0,0,0,168,980,1,0,0,
        0,170,1004,1,0,0,0,172,1006,1,0,0,0,174,1017,1,0,0,0,176,1022,1,
        0,0,0,178,1038,1,0,0,0,180,1049,1,0,0,0,182,1051,1,0,0,0,184,1056,
        1,0,0,0,186,1058,1,0,0,0,188,203,3,186,93,0,189,203,3,14,7,0,190,
        203,3,84,42,0,191,203,3,86,43,0,192,203,3,4,2,0,193,203,3,74,37,
        0,194,203,3,80,40,0,195,203,3,16,8,0,196,203,3,24,12,0,197,203,3,
        54,27,0,198,203,3,48,24,0,199,203,3,38,19,0,200,203,3,18,9,0,201,
        203,5,78,0,0,202,188,1,0,0,0,202,189,1,0,0,0,202,190,1,0,0,0,202,
        191,1,0,0,0,202,192,1,0,0,0,202,193,1,0,0,0,202,194,1,0,0,0,202,
        195,1,0,0,0,202,196,1,0,0,0,202,197,1,0,0,0,202,198,1,0,0,0,202,
        199,1,0,0,0,202,200,1,0,0,0,202,201,1,0,0,0,203,206,1,0,0,0,204,
        202,1,0,0,0,204,205,1,0,0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,
        208,5,0,0,1,208,1,1,0,0,0,209,210,5,68,0,0,210,3,1,0,0,0,211,215,
        5,5,0,0,212,214,5,6,0,0,213,212,1,0,0,0,214,217,1,0,0,0,215,213,
        1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,217,215,1,0,0,0,218,220,
        3,6,3,0,219,221,3,8,4,0,220,219,1,0,0,0,220,221,1,0,0,0,221,238,
        1,0,0,0,222,223,3,12,6,0,223,229,5,5,0,0,224,230,5,33,0,0,225,227,
        3,2,1,0,226,228,3,8,4,0,227,226,1,0,0,0,227,228,1,0,0,0,228,230,
        1,0,0,0,229,224,1,0,0,0,229,225,1,0,0,0,230,238,1,0,0,0,231,232,
        3,12,6,0,232,233,5,5,0,0,233,234,5,11,0,0,234,235,3,10,5,0,235,236,
        5,12,0,0,236,238,1,0,0,0,237,211,1,0,0,0,237,222,1,0,0,0,237,231,
        1,0,0,0,238,5,1,0,0,0,239,240,3,2,1,0,240,241,5,6,0,0,241,243,1,
        0,0,0,242,239,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,
        0,0,0,245,247,1,0,0,0,246,244,1,0,0,0,247,248,3,2,1,0,248,7,1,0,
        0,0,249,250,5,3,0,0,250,251,5,68,0,0,251,9,1,0,0,0,252,254,3,2,1,
        0,253,255,3,8,4,0,254,253,1,0,0,0,254,255,1,0,0,0,255,263,1,0,0,
        0,256,257,5,7,0,0,257,259,3,2,1,0,258,260,3,8,4,0,259,258,1,0,0,
        0,259,260,1,0,0,0,260,262,1,0,0,0,261,256,1,0,0,0,262,265,1,0,0,
        0,263,261,1,0,0,0,263,264,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,
        0,266,268,5,7,0,0,267,266,1,0,0,0,267,268,1,0,0,0,268,11,1,0,0,0,
        269,282,5,4,0,0,270,272,5,6,0,0,271,270,1,0,0,0,272,275,1,0,0,0,
        273,271,1,0,0,0,273,274,1,0,0,0,274,276,1,0,0,0,275,273,1,0,0,0,
        276,283,3,6,3,0,277,279,5,6,0,0,278,277,1,0,0,0,279,280,1,0,0,0,
        280,278,1,0,0,0,280,281,1,0,0,0,281,283,1,0,0,0,282,273,1,0,0,0,
        282,278,1,0,0,0,283,13,1,0,0,0,284,285,5,21,0,0,285,286,5,8,0,0,
        286,287,5,68,0,0,287,15,1,0,0,0,288,289,5,68,0,0,289,290,5,8,0,0,
        290,291,5,17,0,0,291,292,5,11,0,0,292,293,3,70,35,0,293,294,5,12,
        0,0,294,295,5,9,0,0,295,297,3,124,62,0,296,298,5,78,0,0,297,296,
        1,0,0,0,297,298,1,0,0,0,298,17,1,0,0,0,299,300,5,68,0,0,300,301,
        5,8,0,0,301,302,5,18,0,0,302,303,5,11,0,0,303,304,3,70,35,0,304,
        306,5,12,0,0,305,307,5,78,0,0,306,305,1,0,0,0,306,307,1,0,0,0,307,
        19,1,0,0,0,308,309,5,68,0,0,309,310,5,8,0,0,310,311,3,70,35,0,311,
        21,1,0,0,0,312,313,5,68,0,0,313,314,5,8,0,0,314,315,5,19,0,0,315,
        316,5,11,0,0,316,317,3,70,35,0,317,318,5,12,0,0,318,23,1,0,0,0,319,
        322,3,20,10,0,320,322,3,22,11,0,321,319,1,0,0,0,321,320,1,0,0,0,
        322,324,1,0,0,0,323,325,5,78,0,0,324,323,1,0,0,0,324,325,1,0,0,0,
        325,25,1,0,0,0,326,327,5,10,0,0,327,333,5,68,0,0,328,330,5,11,0,
        0,329,331,3,140,70,0,330,329,1,0,0,0,330,331,1,0,0,0,331,332,1,0,
        0,0,332,334,5,12,0,0,333,328,1,0,0,0,333,334,1,0,0,0,334,335,1,0,
        0,0,335,336,5,78,0,0,336,27,1,0,0,0,337,339,3,26,13,0,338,337,1,
        0,0,0,339,340,1,0,0,0,340,338,1,0,0,0,340,341,1,0,0,0,341,29,1,0,
        0,0,342,343,5,68,0,0,343,344,5,8,0,0,344,347,3,70,35,0,345,346,5,
        9,0,0,346,348,3,124,62,0,347,345,1,0,0,0,347,348,1,0,0,0,348,31,
        1,0,0,0,349,351,5,1,0,0,350,349,1,0,0,0,350,351,1,0,0,0,351,352,
        1,0,0,0,352,362,3,30,15,0,353,355,5,7,0,0,354,356,5,78,0,0,355,354,
        1,0,0,0,355,356,1,0,0,0,356,358,1,0,0,0,357,359,3,30,15,0,358,357,
        1,0,0,0,358,359,1,0,0,0,359,361,1,0,0,0,360,353,1,0,0,0,361,364,
        1,0,0,0,362,360,1,0,0,0,362,363,1,0,0,0,363,366,1,0,0,0,364,362,
        1,0,0,0,365,367,5,2,0,0,366,365,1,0,0,0,366,367,1,0,0,0,367,33,1,
        0,0,0,368,369,5,24,0,0,369,370,3,70,35,0,370,35,1,0,0,0,371,372,
        5,23,0,0,372,373,5,68,0,0,373,375,5,11,0,0,374,376,3,32,16,0,375,
        374,1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,379,5,12,0,0,378,
        380,3,34,17,0,379,378,1,0,0,0,379,380,1,0,0,0,380,37,1,0,0,0,381,
        383,3,28,14,0,382,381,1,0,0,0,382,383,1,0,0,0,383,384,1,0,0,0,384,
        385,3,36,18,0,385,386,5,8,0,0,386,387,3,40,20,0,387,39,1,0,0,0,388,
        390,3,84,42,0,389,388,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,
        396,5,1,0,0,392,394,5,71,0,0,393,395,5,78,0,0,394,393,1,0,0,0,394,
        395,1,0,0,0,395,397,1,0,0,0,396,392,1,0,0,0,396,397,1,0,0,0,397,
        402,1,0,0,0,398,400,3,82,41,0,399,401,5,78,0,0,400,399,1,0,0,0,400,
        401,1,0,0,0,401,403,1,0,0,0,402,398,1,0,0,0,403,404,1,0,0,0,404,
        402,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,407,5,2,0,0,407,
        41,1,0,0,0,408,409,5,68,0,0,409,410,5,8,0,0,410,411,3,70,35,0,411,
        43,1,0,0,0,412,413,5,68,0,0,413,414,5,8,0,0,414,415,5,20,0,0,415,
        416,5,11,0,0,416,417,3,70,35,0,417,418,5,12,0,0,418,45,1,0,0,0,419,
        424,5,1,0,0,420,422,3,86,43,0,421,423,5,78,0,0,422,421,1,0,0,0,422,
        423,1,0,0,0,423,425,1,0,0,0,424,420,1,0,0,0,424,425,1,0,0,0,425,
        434,1,0,0,0,426,430,3,84,42,0,427,430,3,42,21,0,428,430,3,44,22,
        0,429,426,1,0,0,0,429,427,1,0,0,0,429,428,1,0,0,0,430,432,1,0,0,
        0,431,433,5,78,0,0,432,431,1,0,0,0,432,433,1,0,0,0,433,435,1,0,0,
        0,434,429,1,0,0,0,435,436,1,0,0,0,436,434,1,0,0,0,436,437,1,0,0,
        0,437,438,1,0,0,0,438,439,5,2,0,0,439,47,1,0,0,0,440,441,5,25,0,
        0,441,442,5,68,0,0,442,445,5,8,0,0,443,446,3,46,23,0,444,446,5,39,
        0,0,445,443,1,0,0,0,445,444,1,0,0,0,446,49,1,0,0,0,447,448,5,68,
        0,0,448,51,1,0,0,0,449,454,5,1,0,0,450,452,3,86,43,0,451,453,5,78,
        0,0,452,451,1,0,0,0,452,453,1,0,0,0,453,455,1,0,0,0,454,450,1,0,
        0,0,454,455,1,0,0,0,455,461,1,0,0,0,456,462,3,84,42,0,457,459,3,
        50,25,0,458,460,5,78,0,0,459,458,1,0,0,0,459,460,1,0,0,0,460,462,
        1,0,0,0,461,456,1,0,0,0,461,457,1,0,0,0,462,463,1,0,0,0,463,461,
        1,0,0,0,463,464,1,0,0,0,464,465,1,0,0,0,465,466,5,2,0,0,466,53,1,
        0,0,0,467,468,5,26,0,0,468,469,5,68,0,0,469,470,5,8,0,0,470,471,
        3,52,26,0,471,55,1,0,0,0,472,473,6,28,-1,0,473,474,5,68,0,0,474,
        479,3,58,29,0,475,476,3,60,30,0,476,477,3,58,29,0,477,479,1,0,0,
        0,478,472,1,0,0,0,478,475,1,0,0,0,479,484,1,0,0,0,480,481,10,2,0,
        0,481,483,3,58,29,0,482,480,1,0,0,0,483,486,1,0,0,0,484,482,1,0,
        0,0,484,485,1,0,0,0,485,57,1,0,0,0,486,484,1,0,0,0,487,488,5,13,
        0,0,488,489,7,0,0,0,489,490,5,14,0,0,490,59,1,0,0,0,491,492,5,22,
        0,0,492,493,5,13,0,0,493,494,3,62,31,0,494,495,5,7,0,0,495,496,7,
        0,0,0,496,497,5,14,0,0,497,61,1,0,0,0,498,502,5,68,0,0,499,502,3,
        56,28,0,500,502,3,60,30,0,501,498,1,0,0,0,501,499,1,0,0,0,501,500,
        1,0,0,0,502,63,1,0,0,0,503,504,5,11,0,0,504,509,3,66,33,0,505,506,
        5,7,0,0,506,508,3,66,33,0,507,505,1,0,0,0,508,511,1,0,0,0,509,507,
        1,0,0,0,509,510,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,0,512,514,
        5,7,0,0,513,512,1,0,0,0,513,514,1,0,0,0,514,515,1,0,0,0,515,516,
        5,12,0,0,516,65,1,0,0,0,517,522,5,68,0,0,518,522,3,56,28,0,519,522,
        3,60,30,0,520,522,3,64,32,0,521,517,1,0,0,0,521,518,1,0,0,0,521,
        519,1,0,0,0,521,520,1,0,0,0,522,67,1,0,0,0,523,524,5,27,0,0,524,
        527,5,13,0,0,525,528,5,68,0,0,526,528,3,56,28,0,527,525,1,0,0,0,
        527,526,1,0,0,0,528,529,1,0,0,0,529,530,5,7,0,0,530,531,3,70,35,
        0,531,532,5,14,0,0,532,69,1,0,0,0,533,539,5,68,0,0,534,539,3,56,
        28,0,535,539,3,64,32,0,536,539,3,68,34,0,537,539,3,60,30,0,538,533,
        1,0,0,0,538,534,1,0,0,0,538,535,1,0,0,0,538,536,1,0,0,0,538,537,
        1,0,0,0,539,71,1,0,0,0,540,541,5,68,0,0,541,542,5,8,0,0,542,543,
        3,70,35,0,543,73,1,0,0,0,544,545,5,28,0,0,545,546,5,68,0,0,546,547,
        5,8,0,0,547,552,5,1,0,0,548,550,3,86,43,0,549,551,5,78,0,0,550,549,
        1,0,0,0,550,551,1,0,0,0,551,553,1,0,0,0,552,548,1,0,0,0,552,553,
        1,0,0,0,553,561,1,0,0,0,554,557,3,84,42,0,555,557,3,72,36,0,556,
        554,1,0,0,0,556,555,1,0,0,0,557,559,1,0,0,0,558,560,5,78,0,0,559,
        558,1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,556,1,0,0,0,562,
        563,1,0,0,0,563,561,1,0,0,0,563,564,1,0,0,0,564,565,1,0,0,0,565,
        566,5,2,0,0,566,75,1,0,0,0,567,568,5,68,0,0,568,77,1,0,0,0,569,570,
        3,36,18,0,570,571,5,8,0,0,571,572,3,76,38,0,572,79,1,0,0,0,573,574,
        5,29,0,0,574,575,5,68,0,0,575,576,5,8,0,0,576,581,5,1,0,0,577,579,
        3,86,43,0,578,580,5,78,0,0,579,578,1,0,0,0,579,580,1,0,0,0,580,582,
        1,0,0,0,581,577,1,0,0,0,581,582,1,0,0,0,582,590,1,0,0,0,583,586,
        3,84,42,0,584,586,3,78,39,0,585,583,1,0,0,0,585,584,1,0,0,0,586,
        588,1,0,0,0,587,589,5,78,0,0,588,587,1,0,0,0,588,589,1,0,0,0,589,
        591,1,0,0,0,590,585,1,0,0,0,591,592,1,0,0,0,592,590,1,0,0,0,592,
        593,1,0,0,0,593,594,1,0,0,0,594,595,5,2,0,0,595,81,1,0,0,0,596,599,
        3,116,58,0,597,599,3,122,61,0,598,596,1,0,0,0,598,597,1,0,0,0,599,
        618,1,0,0,0,600,612,3,92,46,0,601,612,3,96,48,0,602,612,3,88,44,
        0,603,612,3,106,53,0,604,612,3,98,49,0,605,612,3,100,50,0,606,612,
        3,102,51,0,607,612,3,104,52,0,608,612,3,108,54,0,609,612,3,110,55,
        0,610,612,3,124,62,0,611,600,1,0,0,0,611,601,1,0,0,0,611,602,1,0,
        0,0,611,603,1,0,0,0,611,604,1,0,0,0,611,605,1,0,0,0,611,606,1,0,
        0,0,611,607,1,0,0,0,611,608,1,0,0,0,611,609,1,0,0,0,611,610,1,0,
        0,0,612,614,1,0,0,0,613,615,5,79,0,0,614,613,1,0,0,0,614,615,1,0,
        0,0,615,618,1,0,0,0,616,618,3,84,42,0,617,598,1,0,0,0,617,611,1,
        0,0,0,617,616,1,0,0,0,618,83,1,0,0,0,619,620,5,79,0,0,620,85,1,0,
        0,0,621,622,5,71,0,0,622,87,1,0,0,0,623,626,3,20,10,0,624,625,5,
        9,0,0,625,627,3,124,62,0,626,624,1,0,0,0,626,627,1,0,0,0,627,89,
        1,0,0,0,628,631,3,126,63,0,629,631,5,30,0,0,630,628,1,0,0,0,630,
        629,1,0,0,0,631,637,1,0,0,0,632,635,5,7,0,0,633,636,3,126,63,0,634,
        636,5,30,0,0,635,633,1,0,0,0,635,634,1,0,0,0,636,638,1,0,0,0,637,
        632,1,0,0,0,638,639,1,0,0,0,639,637,1,0,0,0,639,640,1,0,0,0,640,
        91,1,0,0,0,641,648,3,126,63,0,642,648,3,90,45,0,643,644,5,11,0,0,
        644,645,3,90,45,0,645,646,5,12,0,0,646,648,1,0,0,0,647,641,1,0,0,
        0,647,642,1,0,0,0,647,643,1,0,0,0,648,649,1,0,0,0,649,650,5,9,0,
        0,650,651,3,124,62,0,651,93,1,0,0,0,652,653,7,1,0,0,653,95,1,0,0,
        0,654,655,3,126,63,0,655,656,3,94,47,0,656,657,5,9,0,0,657,658,3,
        124,62,0,658,97,1,0,0,0,659,660,5,39,0,0,660,99,1,0,0,0,661,662,
        5,40,0,0,662,101,1,0,0,0,663,664,5,41,0,0,664,103,1,0,0,0,665,666,
        5,42,0,0,666,667,5,68,0,0,667,669,5,11,0,0,668,670,3,140,70,0,669,
        668,1,0,0,0,669,670,1,0,0,0,670,671,1,0,0,0,671,672,5,12,0,0,672,
        105,1,0,0,0,673,682,5,43,0,0,674,679,3,124,62,0,675,676,5,7,0,0,
        676,678,3,124,62,0,677,675,1,0,0,0,678,681,1,0,0,0,679,677,1,0,0,
        0,679,680,1,0,0,0,680,683,1,0,0,0,681,679,1,0,0,0,682,674,1,0,0,
        0,682,683,1,0,0,0,683,107,1,0,0,0,684,690,5,44,0,0,685,686,5,44,
        0,0,686,690,3,124,62,0,687,688,5,44,0,0,688,690,5,49,0,0,689,684,
        1,0,0,0,689,685,1,0,0,0,689,687,1,0,0,0,690,109,1,0,0,0,691,692,
        5,45,0,0,692,704,3,124,62,0,693,694,5,45,0,0,694,695,3,124,62,0,
        695,696,5,7,0,0,696,697,3,124,62,0,697,704,1,0,0,0,698,699,5,45,
        0,0,699,700,3,124,62,0,700,701,5,7,0,0,701,702,5,49,0,0,702,704,
        1,0,0,0,703,691,1,0,0,0,703,693,1,0,0,0,703,698,1,0,0,0,704,111,
        1,0,0,0,705,706,3,124,62,0,706,707,5,8,0,0,707,708,3,40,20,0,708,
        113,1,0,0,0,709,710,3,40,20,0,710,115,1,0,0,0,711,712,5,46,0,0,712,
        717,3,112,56,0,713,714,5,48,0,0,714,716,3,112,56,0,715,713,1,0,0,
        0,716,719,1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,723,1,0,0,
        0,719,717,1,0,0,0,720,721,5,47,0,0,721,722,5,8,0,0,722,724,3,114,
        57,0,723,720,1,0,0,0,723,724,1,0,0,0,724,117,1,0,0,0,725,728,5,68,
        0,0,726,727,5,8,0,0,727,729,5,68,0,0,728,726,1,0,0,0,728,729,1,0,
        0,0,729,119,1,0,0,0,730,731,3,124,62,0,731,121,1,0,0,0,732,733,5,
        50,0,0,733,734,3,118,59,0,734,735,5,51,0,0,735,736,3,120,60,0,736,
        737,5,8,0,0,737,738,3,40,20,0,738,123,1,0,0,0,739,742,3,148,74,0,
        740,742,3,146,73,0,741,739,1,0,0,0,741,740,1,0,0,0,742,125,1,0,0,
        0,743,749,5,68,0,0,744,745,5,11,0,0,745,746,3,126,63,0,746,747,5,
        12,0,0,747,749,1,0,0,0,748,743,1,0,0,0,748,744,1,0,0,0,749,755,1,
        0,0,0,750,754,3,128,64,0,751,754,3,130,65,0,752,754,3,132,66,0,753,
        750,1,0,0,0,753,751,1,0,0,0,753,752,1,0,0,0,754,757,1,0,0,0,755,
        753,1,0,0,0,755,756,1,0,0,0,756,127,1,0,0,0,757,755,1,0,0,0,758,
        759,5,6,0,0,759,760,5,68,0,0,760,129,1,0,0,0,761,762,5,13,0,0,762,
        763,3,124,62,0,763,764,5,14,0,0,764,131,1,0,0,0,765,767,5,11,0,0,
        766,768,3,140,70,0,767,766,1,0,0,0,767,768,1,0,0,0,768,769,1,0,0,
        0,769,770,5,12,0,0,770,133,1,0,0,0,771,772,3,124,62,0,772,135,1,
        0,0,0,773,774,5,68,0,0,774,775,5,9,0,0,775,776,3,124,62,0,776,137,
        1,0,0,0,777,780,3,134,67,0,778,780,3,136,68,0,779,777,1,0,0,0,779,
        778,1,0,0,0,780,139,1,0,0,0,781,786,3,138,69,0,782,783,5,7,0,0,783,
        785,3,138,69,0,784,782,1,0,0,0,785,788,1,0,0,0,786,784,1,0,0,0,786,
        787,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,0,789,791,5,7,0,0,790,
        789,1,0,0,0,790,791,1,0,0,0,791,141,1,0,0,0,792,793,5,11,0,0,793,
        794,5,7,0,0,794,812,5,12,0,0,795,796,5,11,0,0,796,807,3,124,62,0,
        797,798,5,7,0,0,798,800,3,124,62,0,799,797,1,0,0,0,800,801,1,0,0,
        0,801,799,1,0,0,0,801,802,1,0,0,0,802,804,1,0,0,0,803,805,5,7,0,
        0,804,803,1,0,0,0,804,805,1,0,0,0,805,808,1,0,0,0,806,808,5,7,0,
        0,807,799,1,0,0,0,807,806,1,0,0,0,808,809,1,0,0,0,809,810,5,12,0,
        0,810,812,1,0,0,0,811,792,1,0,0,0,811,795,1,0,0,0,812,143,1,0,0,
        0,813,814,5,13,0,0,814,830,5,14,0,0,815,816,5,13,0,0,816,821,3,124,
        62,0,817,818,5,7,0,0,818,820,3,124,62,0,819,817,1,0,0,0,820,823,
        1,0,0,0,821,819,1,0,0,0,821,822,1,0,0,0,822,825,1,0,0,0,823,821,
        1,0,0,0,824,826,5,7,0,0,825,824,1,0,0,0,825,826,1,0,0,0,826,827,
        1,0,0,0,827,828,5,14,0,0,828,830,1,0,0,0,829,813,1,0,0,0,829,815,
        1,0,0,0,830,145,1,0,0,0,831,832,5,15,0,0,832,853,5,16,0,0,833,834,
        5,15,0,0,834,835,5,68,0,0,835,836,5,8,0,0,836,837,3,124,62,0,837,
        844,1,0,0,0,838,839,5,7,0,0,839,840,5,68,0,0,840,841,5,8,0,0,841,
        843,3,124,62,0,842,838,1,0,0,0,843,846,1,0,0,0,844,842,1,0,0,0,844,
        845,1,0,0,0,845,848,1,0,0,0,846,844,1,0,0,0,847,849,5,7,0,0,848,
        847,1,0,0,0,848,849,1,0,0,0,849,850,1,0,0,0,850,851,5,16,0,0,851,
        853,1,0,0,0,852,831,1,0,0,0,852,833,1,0,0,0,853,147,1,0,0,0,854,
        856,3,84,42,0,855,854,1,0,0,0,855,856,1,0,0,0,856,857,1,0,0,0,857,
        858,3,150,75,0,858,149,1,0,0,0,859,860,6,75,-1,0,860,861,3,152,76,
        0,861,867,1,0,0,0,862,863,10,1,0,0,863,864,5,53,0,0,864,866,3,152,
        76,0,865,862,1,0,0,0,866,869,1,0,0,0,867,865,1,0,0,0,867,868,1,0,
        0,0,868,151,1,0,0,0,869,867,1,0,0,0,870,871,6,76,-1,0,871,872,3,
        154,77,0,872,878,1,0,0,0,873,874,10,1,0,0,874,875,5,52,0,0,875,877,
        3,154,77,0,876,873,1,0,0,0,877,880,1,0,0,0,878,876,1,0,0,0,878,879,
        1,0,0,0,879,153,1,0,0,0,880,878,1,0,0,0,881,885,3,156,78,0,882,883,
        5,54,0,0,883,885,3,154,77,0,884,881,1,0,0,0,884,882,1,0,0,0,885,
        155,1,0,0,0,886,887,6,78,-1,0,887,888,3,158,79,0,888,916,1,0,0,0,
        889,890,10,8,0,0,890,891,5,63,0,0,891,915,3,158,79,0,892,893,10,
        7,0,0,893,894,5,64,0,0,894,915,3,158,79,0,895,896,10,6,0,0,896,897,
        5,59,0,0,897,915,3,158,79,0,898,899,10,5,0,0,899,900,5,60,0,0,900,
        915,3,158,79,0,901,902,10,4,0,0,902,903,5,61,0,0,903,915,3,158,79,
        0,904,905,10,3,0,0,905,906,5,62,0,0,906,915,3,158,79,0,907,908,10,
        2,0,0,908,909,5,51,0,0,909,915,3,158,79,0,910,911,10,1,0,0,911,912,
        5,54,0,0,912,913,5,51,0,0,913,915,3,158,79,0,914,889,1,0,0,0,914,
        892,1,0,0,0,914,895,1,0,0,0,914,898,1,0,0,0,914,901,1,0,0,0,914,
        904,1,0,0,0,914,907,1,0,0,0,914,910,1,0,0,0,915,918,1,0,0,0,916,
        914,1,0,0,0,916,917,1,0,0,0,917,157,1,0,0,0,918,916,1,0,0,0,919,
        920,6,79,-1,0,920,921,3,160,80,0,921,927,1,0,0,0,922,923,10,1,0,
        0,923,924,5,57,0,0,924,926,3,160,80,0,925,922,1,0,0,0,926,929,1,
        0,0,0,927,925,1,0,0,0,927,928,1,0,0,0,928,159,1,0,0,0,929,927,1,
        0,0,0,930,931,6,80,-1,0,931,932,3,162,81,0,932,938,1,0,0,0,933,934,
        10,1,0,0,934,935,5,58,0,0,935,937,3,162,81,0,936,933,1,0,0,0,937,
        940,1,0,0,0,938,936,1,0,0,0,938,939,1,0,0,0,939,161,1,0,0,0,940,
        938,1,0,0,0,941,942,6,81,-1,0,942,943,3,164,82,0,943,949,1,0,0,0,
        944,945,10,1,0,0,945,946,5,56,0,0,946,948,3,164,82,0,947,944,1,0,
        0,0,948,951,1,0,0,0,949,947,1,0,0,0,949,950,1,0,0,0,950,163,1,0,
        0,0,951,949,1,0,0,0,952,953,6,82,-1,0,953,954,3,166,83,0,954,963,
        1,0,0,0,955,956,10,2,0,0,956,957,5,37,0,0,957,962,3,166,83,0,958,
        959,10,1,0,0,959,960,5,38,0,0,960,962,3,166,83,0,961,955,1,0,0,0,
        961,958,1,0,0,0,962,965,1,0,0,0,963,961,1,0,0,0,963,964,1,0,0,0,
        964,165,1,0,0,0,965,963,1,0,0,0,966,967,6,83,-1,0,967,968,3,168,
        84,0,968,977,1,0,0,0,969,970,10,2,0,0,970,971,5,31,0,0,971,976,3,
        168,84,0,972,973,10,1,0,0,973,974,5,32,0,0,974,976,3,168,84,0,975,
        969,1,0,0,0,975,972,1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,977,
        978,1,0,0,0,978,167,1,0,0,0,979,977,1,0,0,0,980,981,6,84,-1,0,981,
        982,3,170,85,0,982,994,1,0,0,0,983,984,10,3,0,0,984,985,5,33,0,0,
        985,993,3,170,85,0,986,987,10,2,0,0,987,988,5,34,0,0,988,993,3,170,
        85,0,989,990,10,1,0,0,990,991,5,35,0,0,991,993,3,170,85,0,992,983,
        1,0,0,0,992,986,1,0,0,0,992,989,1,0,0,0,993,996,1,0,0,0,994,992,
        1,0,0,0,994,995,1,0,0,0,995,169,1,0,0,0,996,994,1,0,0,0,997,1005,
        3,172,86,0,998,999,5,31,0,0,999,1005,3,172,86,0,1000,1001,5,32,0,
        0,1001,1005,3,172,86,0,1002,1003,5,55,0,0,1003,1005,3,172,86,0,1004,
        997,1,0,0,0,1004,998,1,0,0,0,1004,1000,1,0,0,0,1004,1002,1,0,0,0,
        1005,171,1,0,0,0,1006,1007,6,86,-1,0,1007,1008,3,180,90,0,1008,1014,
        1,0,0,0,1009,1010,10,1,0,0,1010,1011,5,36,0,0,1011,1013,3,180,90,
        0,1012,1009,1,0,0,0,1013,1016,1,0,0,0,1014,1012,1,0,0,0,1014,1015,
        1,0,0,0,1015,173,1,0,0,0,1016,1014,1,0,0,0,1017,1018,5,65,0,0,1018,
        1019,5,11,0,0,1019,1020,3,70,35,0,1020,1021,5,12,0,0,1021,175,1,
        0,0,0,1022,1023,5,66,0,0,1023,1024,5,11,0,0,1024,1025,3,134,67,0,
        1025,1026,5,7,0,0,1026,1031,3,70,35,0,1027,1028,5,7,0,0,1028,1030,
        3,136,68,0,1029,1027,1,0,0,0,1030,1033,1,0,0,0,1031,1029,1,0,0,0,
        1031,1032,1,0,0,0,1032,1034,1,0,0,0,1033,1031,1,0,0,0,1034,1035,
        5,12,0,0,1035,177,1,0,0,0,1036,1039,3,174,87,0,1037,1039,3,176,88,
        0,1038,1036,1,0,0,0,1038,1037,1,0,0,0,1039,179,1,0,0,0,1040,1050,
        3,126,63,0,1041,1050,3,184,92,0,1042,1050,3,178,89,0,1043,1050,3,
        142,71,0,1044,1050,3,144,72,0,1045,1046,5,11,0,0,1046,1047,3,148,
        74,0,1047,1048,5,12,0,0,1048,1050,1,0,0,0,1049,1040,1,0,0,0,1049,
        1041,1,0,0,0,1049,1042,1,0,0,0,1049,1043,1,0,0,0,1049,1044,1,0,0,
        0,1049,1045,1,0,0,0,1050,181,1,0,0,0,1051,1052,7,2,0,0,1052,183,
        1,0,0,0,1053,1057,3,182,91,0,1054,1057,3,186,93,0,1055,1057,5,67,
        0,0,1056,1053,1,0,0,0,1056,1054,1,0,0,0,1056,1055,1,0,0,0,1057,185,
        1,0,0,0,1058,1059,5,70,0,0,1059,187,1,0,0,0,121,202,204,215,220,
        227,229,237,244,254,259,263,267,273,280,282,297,306,321,324,330,
        333,340,347,350,355,358,362,366,375,379,382,389,394,396,400,404,
        422,424,429,432,436,445,452,454,459,461,463,478,484,501,509,513,
        521,527,538,550,552,556,559,563,579,581,585,588,592,598,611,614,
        617,626,630,635,639,647,669,679,682,689,703,717,723,728,741,748,
        753,755,767,779,786,790,801,804,807,811,821,825,829,844,848,852,
        855,867,878,884,914,916,927,938,949,961,963,975,977,992,994,1004,
        1014,1031,1038,1049,1056
    ]

class VyperParser ( Parser ):

    grammarFileName = "VyperParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "'as'", "'from'", 
                     "'import'", "'.'", "','", "':'", "'='", "'@'", "'('", 
                     "')'", "'['", "']'", "'{'", "'}'", "'constant'", "'immutable'", 
                     "'public'", "'indexed'", "'implements'", "'DynArray'", 
                     "'def'", "'->'", "'event'", "'enum'", "'HashMap'", 
                     "'struct'", "'interface'", "'_'", "'+'", "'-'", "'*'", 
                     "'/'", "'%'", "'**'", "'<<'", "'>>'", "'pass'", "'break'", 
                     "'continue'", "'log'", "'return'", "'raise'", "'assert'", 
                     "'if'", "'else'", "'elif'", "'UNREACHABLE'", "'for'", 
                     "'in'", "'and'", "'or'", "'not'", "'~'", "'&'", "'|'", 
                     "'^'", "'=='", "'!='", "'<='", "'>='", "'<'", "'>'", 
                     "'empty'", "'_abi_decode'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "AS", "FROM", "IMPORT", 
                      "DOT", "COMMA", "COLON", "ASSIGN", "AT", "LPAREN", 
                      "RPAREN", "LSQUARE", "RSQUARE", "LCURLY", "RCURLY", 
                      "CONSTANT", "IMMUTABLE", "PUBLIC", "INDEXED", "IMPLEMENTS", 
                      "DYNARRAY", "FUNCDECL", "RETURNTYPE", "EVENTDECL", 
                      "ENUMDECL", "MAP", "STRUCTDECL", "INTERFACEDECL", 
                      "SKIPASSIGN", "ADD", "SUB", "MUL", "DIV", "MOD", "POW", 
                      "SHL", "SHR", "PASS", "Break", "CONTINUE", "LOG", 
                      "RETURN", "RAISE", "ASSERT", "IF", "ELSE", "ELIF", 
                      "UNREACHABLE", "FOR", "IN", "AND", "OR", "NOT", "NEG", 
                      "BITAND", "BITOR", "BITXOR", "EQ", "NE", "LE", "GE", 
                      "LT", "GT", "EMPTY", "ABIDECODE", "BOOL", "NAME", 
                      "TYPE", "STRING", "DOCSTRING", "DECNUMBER", "HEXNUMBER", 
                      "OCTNUMBER", "BINNUMBER", "FLOATNUMBER", "SPACES", 
                      "NEWLINE", "COMMENT" ]

    RULE_module = 0
    RULE_importname = 1
    RULE_import_ = 2
    RULE_importpath = 3
    RULE_importalias = 4
    RULE_importlist = 5
    RULE_importfrom = 6
    RULE_implements = 7
    RULE_constantdef = 8
    RULE_immutabledef = 9
    RULE_variable = 10
    RULE_variablewithgetter = 11
    RULE_variabledef = 12
    RULE_decorator = 13
    RULE_decorators = 14
    RULE_parameter = 15
    RULE_parameters = 16
    RULE_returns_ = 17
    RULE_functionsig = 18
    RULE_functiondef = 19
    RULE_body = 20
    RULE_eventmember = 21
    RULE_indexedeventarg = 22
    RULE_eventbody = 23
    RULE_eventdef = 24
    RULE_enummember = 25
    RULE_enumbody = 26
    RULE_enumdef = 27
    RULE_arraydef = 28
    RULE_arraydeftail = 29
    RULE_dynarraydef = 30
    RULE_dynarraydefinner = 31
    RULE_tupledef = 32
    RULE_tupledefinner = 33
    RULE_mapdef = 34
    RULE_type_ = 35
    RULE_structmember = 36
    RULE_structdef = 37
    RULE_mutability = 38
    RULE_interfacefunction = 39
    RULE_interfacedef = 40
    RULE_stmt = 41
    RULE_comment = 42
    RULE_docstring = 43
    RULE_declaration = 44
    RULE_multipleassign = 45
    RULE_assign = 46
    RULE_augoperator = 47
    RULE_augassign = 48
    RULE_passstmt = 49
    RULE_breakstmt = 50
    RULE_continuestmt = 51
    RULE_logstmt = 52
    RULE_returnstmt = 53
    RULE_raisestmt = 54
    RULE_assertstmt = 55
    RULE_condexec = 56
    RULE_defaultexec = 57
    RULE_ifstmt = 58
    RULE_loopvariable = 59
    RULE_loopiterator = 60
    RULE_forstmt = 61
    RULE_expr = 62
    RULE_variableaccess = 63
    RULE_getattr = 64
    RULE_getitem = 65
    RULE_call = 66
    RULE_arg = 67
    RULE_kwarg = 68
    RULE_argument = 69
    RULE_arguments = 70
    RULE_tuple = 71
    RULE_list = 72
    RULE_dict = 73
    RULE_operation = 74
    RULE_boolor = 75
    RULE_booland = 76
    RULE_boolnot = 77
    RULE_comparator = 78
    RULE_bitwiseor = 79
    RULE_bitwisexor = 80
    RULE_bitwiseand = 81
    RULE_shift = 82
    RULE_summation = 83
    RULE_product = 84
    RULE_unary = 85
    RULE_power = 86
    RULE_empty = 87
    RULE_abidecode = 88
    RULE_specialbuiltins = 89
    RULE_atom = 90
    RULE_number = 91
    RULE_literal = 92
    RULE_string = 93

    ruleNames =  [ "module", "importname", "import_", "importpath", "importalias", 
                   "importlist", "importfrom", "implements", "constantdef", 
                   "immutabledef", "variable", "variablewithgetter", "variabledef", 
                   "decorator", "decorators", "parameter", "parameters", 
                   "returns_", "functionsig", "functiondef", "body", "eventmember", 
                   "indexedeventarg", "eventbody", "eventdef", "enummember", 
                   "enumbody", "enumdef", "arraydef", "arraydeftail", "dynarraydef", 
                   "dynarraydefinner", "tupledef", "tupledefinner", "mapdef", 
                   "type_", "structmember", "structdef", "mutability", "interfacefunction", 
                   "interfacedef", "stmt", "comment", "docstring", "declaration", 
                   "multipleassign", "assign", "augoperator", "augassign", 
                   "passstmt", "breakstmt", "continuestmt", "logstmt", "returnstmt", 
                   "raisestmt", "assertstmt", "condexec", "defaultexec", 
                   "ifstmt", "loopvariable", "loopiterator", "forstmt", 
                   "expr", "variableaccess", "getattr", "getitem", "call", 
                   "arg", "kwarg", "argument", "arguments", "tuple", "list", 
                   "dict", "operation", "boolor", "booland", "boolnot", 
                   "comparator", "bitwiseor", "bitwisexor", "bitwiseand", 
                   "shift", "summation", "product", "unary", "power", "empty", 
                   "abidecode", "specialbuiltins", "atom", "number", "literal", 
                   "string" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    AS=3
    FROM=4
    IMPORT=5
    DOT=6
    COMMA=7
    COLON=8
    ASSIGN=9
    AT=10
    LPAREN=11
    RPAREN=12
    LSQUARE=13
    RSQUARE=14
    LCURLY=15
    RCURLY=16
    CONSTANT=17
    IMMUTABLE=18
    PUBLIC=19
    INDEXED=20
    IMPLEMENTS=21
    DYNARRAY=22
    FUNCDECL=23
    RETURNTYPE=24
    EVENTDECL=25
    ENUMDECL=26
    MAP=27
    STRUCTDECL=28
    INTERFACEDECL=29
    SKIPASSIGN=30
    ADD=31
    SUB=32
    MUL=33
    DIV=34
    MOD=35
    POW=36
    SHL=37
    SHR=38
    PASS=39
    Break=40
    CONTINUE=41
    LOG=42
    RETURN=43
    RAISE=44
    ASSERT=45
    IF=46
    ELSE=47
    ELIF=48
    UNREACHABLE=49
    FOR=50
    IN=51
    AND=52
    OR=53
    NOT=54
    NEG=55
    BITAND=56
    BITOR=57
    BITXOR=58
    EQ=59
    NE=60
    LE=61
    GE=62
    LT=63
    GT=64
    EMPTY=65
    ABIDECODE=66
    BOOL=67
    NAME=68
    TYPE=69
    STRING=70
    DOCSTRING=71
    DECNUMBER=72
    HEXNUMBER=73
    OCTNUMBER=74
    BINNUMBER=75
    FLOATNUMBER=76
    SPACES=77
    NEWLINE=78
    COMMENT=79

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(VyperParser.EOF, 0)

        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.StringContext)
            else:
                return self.getTypedRuleContext(VyperParser.StringContext,i)


        def implements(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ImplementsContext)
            else:
                return self.getTypedRuleContext(VyperParser.ImplementsContext,i)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.CommentContext)
            else:
                return self.getTypedRuleContext(VyperParser.CommentContext,i)


        def docstring(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.DocstringContext)
            else:
                return self.getTypedRuleContext(VyperParser.DocstringContext,i)


        def import_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Import_Context)
            else:
                return self.getTypedRuleContext(VyperParser.Import_Context,i)


        def structdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.StructdefContext)
            else:
                return self.getTypedRuleContext(VyperParser.StructdefContext,i)


        def interfacedef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.InterfacedefContext)
            else:
                return self.getTypedRuleContext(VyperParser.InterfacedefContext,i)


        def constantdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ConstantdefContext)
            else:
                return self.getTypedRuleContext(VyperParser.ConstantdefContext,i)


        def variabledef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.VariabledefContext)
            else:
                return self.getTypedRuleContext(VyperParser.VariabledefContext,i)


        def enumdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.EnumdefContext)
            else:
                return self.getTypedRuleContext(VyperParser.EnumdefContext,i)


        def eventdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.EventdefContext)
            else:
                return self.getTypedRuleContext(VyperParser.EventdefContext,i)


        def functiondef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.FunctiondefContext)
            else:
                return self.getTypedRuleContext(VyperParser.FunctiondefContext,i)


        def immutabledef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ImmutabledefContext)
            else:
                return self.getTypedRuleContext(VyperParser.ImmutabledefContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NEWLINE)
            else:
                return self.getToken(VyperParser.NEWLINE, i)

        def getRuleIndex(self):
            return VyperParser.RULE_module

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModule" ):
                return visitor.visitModule(self)
            else:
                return visitor.visitChildren(self)




    def module(self):

        localctx = VyperParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 916456496) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & 3085) != 0):
                self.state = 202
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 188
                    self.string()
                    pass

                elif la_ == 2:
                    self.state = 189
                    self.implements()
                    pass

                elif la_ == 3:
                    self.state = 190
                    self.comment()
                    pass

                elif la_ == 4:
                    self.state = 191
                    self.docstring()
                    pass

                elif la_ == 5:
                    self.state = 192
                    self.import_()
                    pass

                elif la_ == 6:
                    self.state = 193
                    self.structdef()
                    pass

                elif la_ == 7:
                    self.state = 194
                    self.interfacedef()
                    pass

                elif la_ == 8:
                    self.state = 195
                    self.constantdef()
                    pass

                elif la_ == 9:
                    self.state = 196
                    self.variabledef()
                    pass

                elif la_ == 10:
                    self.state = 197
                    self.enumdef()
                    pass

                elif la_ == 11:
                    self.state = 198
                    self.eventdef()
                    pass

                elif la_ == 12:
                    self.state = 199
                    self.functiondef()
                    pass

                elif la_ == 13:
                    self.state = 200
                    self.immutabledef()
                    pass

                elif la_ == 14:
                    self.state = 201
                    self.match(VyperParser.NEWLINE)
                    pass


                self.state = 206
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 207
            self.match(VyperParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_importname

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportname" ):
                return visitor.visitImportname(self)
            else:
                return visitor.visitChildren(self)




    def importname(self):

        localctx = VyperParser.ImportnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_importname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.match(VyperParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(VyperParser.IMPORT, 0)

        def importpath(self):
            return self.getTypedRuleContext(VyperParser.ImportpathContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.DOT)
            else:
                return self.getToken(VyperParser.DOT, i)

        def importalias(self):
            return self.getTypedRuleContext(VyperParser.ImportaliasContext,0)


        def importfrom(self):
            return self.getTypedRuleContext(VyperParser.ImportfromContext,0)


        def MUL(self):
            return self.getToken(VyperParser.MUL, 0)

        def importname(self):
            return self.getTypedRuleContext(VyperParser.ImportnameContext,0)


        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def importlist(self):
            return self.getTypedRuleContext(VyperParser.ImportlistContext,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_import_

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_" ):
                return visitor.visitImport_(self)
            else:
                return visitor.visitChildren(self)




    def import_(self):

        localctx = VyperParser.Import_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_import_)
        self._la = 0 # Token type
        try:
            self.state = 237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 211
                self.match(VyperParser.IMPORT)
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==6:
                    self.state = 212
                    self.match(VyperParser.DOT)
                    self.state = 217
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 218
                self.importpath()
                self.state = 220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 219
                    self.importalias()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 222
                self.importfrom()
                self.state = 223
                self.match(VyperParser.IMPORT)
                self.state = 229
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [33]:
                    self.state = 224
                    self.match(VyperParser.MUL)
                    pass
                elif token in [68]:
                    self.state = 225
                    self.importname()
                    self.state = 227
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==3:
                        self.state = 226
                        self.importalias()


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 231
                self.importfrom()
                self.state = 232
                self.match(VyperParser.IMPORT)
                self.state = 233
                self.match(VyperParser.LPAREN)
                self.state = 234
                self.importlist()
                self.state = 235
                self.match(VyperParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportpathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ImportnameContext)
            else:
                return self.getTypedRuleContext(VyperParser.ImportnameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.DOT)
            else:
                return self.getToken(VyperParser.DOT, i)

        def getRuleIndex(self):
            return VyperParser.RULE_importpath

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportpath" ):
                return visitor.visitImportpath(self)
            else:
                return visitor.visitChildren(self)




    def importpath(self):

        localctx = VyperParser.ImportpathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_importpath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 239
                    self.importname()
                    self.state = 240
                    self.match(VyperParser.DOT) 
                self.state = 246
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 247
            self.importname()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportaliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(VyperParser.AS, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_importalias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportalias" ):
                return visitor.visitImportalias(self)
            else:
                return visitor.visitChildren(self)




    def importalias(self):

        localctx = VyperParser.ImportaliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_importalias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.match(VyperParser.AS)
            self.state = 250
            self.match(VyperParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ImportnameContext)
            else:
                return self.getTypedRuleContext(VyperParser.ImportnameContext,i)


        def importalias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ImportaliasContext)
            else:
                return self.getTypedRuleContext(VyperParser.ImportaliasContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_importlist

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportlist" ):
                return visitor.visitImportlist(self)
            else:
                return visitor.visitChildren(self)




    def importlist(self):

        localctx = VyperParser.ImportlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_importlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.importname()
            self.state = 254
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 253
                self.importalias()


            self.state = 263
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 256
                    self.match(VyperParser.COMMA)
                    self.state = 257
                    self.importname()
                    self.state = 259
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==3:
                        self.state = 258
                        self.importalias()

             
                self.state = 265
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 266
                self.match(VyperParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportfromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(VyperParser.FROM, 0)

        def importpath(self):
            return self.getTypedRuleContext(VyperParser.ImportpathContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.DOT)
            else:
                return self.getToken(VyperParser.DOT, i)

        def getRuleIndex(self):
            return VyperParser.RULE_importfrom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportfrom" ):
                return visitor.visitImportfrom(self)
            else:
                return visitor.visitChildren(self)




    def importfrom(self):

        localctx = VyperParser.ImportfromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_importfrom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self.match(VyperParser.FROM)
            self.state = 282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==6:
                    self.state = 270
                    self.match(VyperParser.DOT)
                    self.state = 275
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 276
                self.importpath()
                pass

            elif la_ == 2:
                self.state = 278 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 277
                    self.match(VyperParser.DOT)
                    self.state = 280 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==6):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImplementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPLEMENTS(self):
            return self.getToken(VyperParser.IMPLEMENTS, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_implements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplements" ):
                return visitor.visitImplements(self)
            else:
                return visitor.visitChildren(self)




    def implements(self):

        localctx = VyperParser.ImplementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_implements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.match(VyperParser.IMPLEMENTS)
            self.state = 285
            self.match(VyperParser.COLON)
            self.state = 286
            self.match(VyperParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def CONSTANT(self):
            return self.getToken(VyperParser.CONSTANT, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def ASSIGN(self):
            return self.getToken(VyperParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def NEWLINE(self):
            return self.getToken(VyperParser.NEWLINE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_constantdef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantdef" ):
                return visitor.visitConstantdef(self)
            else:
                return visitor.visitChildren(self)




    def constantdef(self):

        localctx = VyperParser.ConstantdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_constantdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.match(VyperParser.NAME)
            self.state = 289
            self.match(VyperParser.COLON)
            self.state = 290
            self.match(VyperParser.CONSTANT)
            self.state = 291
            self.match(VyperParser.LPAREN)
            self.state = 292
            self.type_()
            self.state = 293
            self.match(VyperParser.RPAREN)
            self.state = 294
            self.match(VyperParser.ASSIGN)
            self.state = 295
            self.expr()
            self.state = 297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 296
                self.match(VyperParser.NEWLINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImmutabledefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def IMMUTABLE(self):
            return self.getToken(VyperParser.IMMUTABLE, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def NEWLINE(self):
            return self.getToken(VyperParser.NEWLINE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_immutabledef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImmutabledef" ):
                return visitor.visitImmutabledef(self)
            else:
                return visitor.visitChildren(self)




    def immutabledef(self):

        localctx = VyperParser.ImmutabledefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_immutabledef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(VyperParser.NAME)
            self.state = 300
            self.match(VyperParser.COLON)
            self.state = 301
            self.match(VyperParser.IMMUTABLE)
            self.state = 302
            self.match(VyperParser.LPAREN)
            self.state = 303
            self.type_()
            self.state = 304
            self.match(VyperParser.RPAREN)
            self.state = 306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 305
                self.match(VyperParser.NEWLINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def getRuleIndex(self):
            return VyperParser.RULE_variable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable" ):
                return visitor.visitVariable(self)
            else:
                return visitor.visitChildren(self)




    def variable(self):

        localctx = VyperParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.match(VyperParser.NAME)
            self.state = 309
            self.match(VyperParser.COLON)
            self.state = 310
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariablewithgetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def PUBLIC(self):
            return self.getToken(VyperParser.PUBLIC, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_variablewithgetter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariablewithgetter" ):
                return visitor.visitVariablewithgetter(self)
            else:
                return visitor.visitChildren(self)




    def variablewithgetter(self):

        localctx = VyperParser.VariablewithgetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_variablewithgetter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(VyperParser.NAME)
            self.state = 313
            self.match(VyperParser.COLON)
            self.state = 314
            self.match(VyperParser.PUBLIC)
            self.state = 315
            self.match(VyperParser.LPAREN)
            self.state = 316
            self.type_()
            self.state = 317
            self.match(VyperParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariabledefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(VyperParser.VariableContext,0)


        def variablewithgetter(self):
            return self.getTypedRuleContext(VyperParser.VariablewithgetterContext,0)


        def NEWLINE(self):
            return self.getToken(VyperParser.NEWLINE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_variabledef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariabledef" ):
                return visitor.visitVariabledef(self)
            else:
                return visitor.visitChildren(self)




    def variabledef(self):

        localctx = VyperParser.VariabledefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_variabledef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 319
                self.variable()
                pass

            elif la_ == 2:
                self.state = 320
                self.variablewithgetter()
                pass


            self.state = 324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 323
                self.match(VyperParser.NEWLINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(VyperParser.AT, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def NEWLINE(self):
            return self.getToken(VyperParser.NEWLINE, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def arguments(self):
            return self.getTypedRuleContext(VyperParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_decorator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = VyperParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self.match(VyperParser.AT)
            self.state = 327
            self.match(VyperParser.NAME)
            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 328
                self.match(VyperParser.LPAREN)
                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54043201970939904) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 20399) != 0):
                    self.state = 329
                    self.arguments()


                self.state = 332
                self.match(VyperParser.RPAREN)


            self.state = 335
            self.match(VyperParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(VyperParser.DecoratorContext,i)


        def getRuleIndex(self):
            return VyperParser.RULE_decorators

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = VyperParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 337
                self.decorator()
                self.state = 340 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==10):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def ASSIGN(self):
            return self.getToken(VyperParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_parameter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = VyperParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.match(VyperParser.NAME)
            self.state = 343
            self.match(VyperParser.COLON)
            self.state = 344
            self.type_()
            self.state = 347
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 345
                self.match(VyperParser.ASSIGN)
                self.state = 346
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ParameterContext)
            else:
                return self.getTypedRuleContext(VyperParser.ParameterContext,i)


        def INDENT(self):
            return self.getToken(VyperParser.INDENT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def DEDENT(self):
            return self.getToken(VyperParser.DEDENT, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NEWLINE)
            else:
                return self.getToken(VyperParser.NEWLINE, i)

        def getRuleIndex(self):
            return VyperParser.RULE_parameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = VyperParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 349
                self.match(VyperParser.INDENT)


            self.state = 352
            self.parameter()
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 353
                self.match(VyperParser.COMMA)
                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 354
                    self.match(VyperParser.NEWLINE)


                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==68:
                    self.state = 357
                    self.parameter()


                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 365
                self.match(VyperParser.DEDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returns_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNTYPE(self):
            return self.getToken(VyperParser.RETURNTYPE, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def getRuleIndex(self):
            return VyperParser.RULE_returns_

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturns_" ):
                return visitor.visitReturns_(self)
            else:
                return visitor.visitChildren(self)




    def returns_(self):

        localctx = VyperParser.Returns_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_returns_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.match(VyperParser.RETURNTYPE)
            self.state = 369
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionsigContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCDECL(self):
            return self.getToken(VyperParser.FUNCDECL, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def parameters(self):
            return self.getTypedRuleContext(VyperParser.ParametersContext,0)


        def returns_(self):
            return self.getTypedRuleContext(VyperParser.Returns_Context,0)


        def getRuleIndex(self):
            return VyperParser.RULE_functionsig

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionsig" ):
                return visitor.visitFunctionsig(self)
            else:
                return visitor.visitChildren(self)




    def functionsig(self):

        localctx = VyperParser.FunctionsigContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_functionsig)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(VyperParser.FUNCDECL)
            self.state = 372
            self.match(VyperParser.NAME)
            self.state = 373
            self.match(VyperParser.LPAREN)
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1 or _la==68:
                self.state = 374
                self.parameters()


            self.state = 377
            self.match(VyperParser.RPAREN)
            self.state = 379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==24:
                self.state = 378
                self.returns_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionsig(self):
            return self.getTypedRuleContext(VyperParser.FunctionsigContext,0)


        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def body(self):
            return self.getTypedRuleContext(VyperParser.BodyContext,0)


        def decorators(self):
            return self.getTypedRuleContext(VyperParser.DecoratorsContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_functiondef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiondef" ):
                return visitor.visitFunctiondef(self)
            else:
                return visitor.visitChildren(self)




    def functiondef(self):

        localctx = VyperParser.FunctiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_functiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 381
                self.decorators()


            self.state = 384
            self.functionsig()
            self.state = 385
            self.match(VyperParser.COLON)
            self.state = 386
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(VyperParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(VyperParser.DEDENT, 0)

        def comment(self):
            return self.getTypedRuleContext(VyperParser.CommentContext,0)


        def DOCSTRING(self):
            return self.getToken(VyperParser.DOCSTRING, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.StmtContext)
            else:
                return self.getTypedRuleContext(VyperParser.StmtContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NEWLINE)
            else:
                return self.getToken(VyperParser.NEWLINE, i)

        def getRuleIndex(self):
            return VyperParser.RULE_body

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = VyperParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 388
                self.comment()


            self.state = 391
            self.match(VyperParser.INDENT)
            self.state = 396
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 392
                self.match(VyperParser.DOCSTRING)
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 393
                    self.match(VyperParser.NEWLINE)




            self.state = 402 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 398
                self.stmt()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 399
                    self.match(VyperParser.NEWLINE)


                self.state = 404 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 55309290684065792) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 20399) != 0)):
                    break

            self.state = 406
            self.match(VyperParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventmemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def getRuleIndex(self):
            return VyperParser.RULE_eventmember

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventmember" ):
                return visitor.visitEventmember(self)
            else:
                return visitor.visitChildren(self)




    def eventmember(self):

        localctx = VyperParser.EventmemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_eventmember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(VyperParser.NAME)
            self.state = 409
            self.match(VyperParser.COLON)
            self.state = 410
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexedeventargContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def INDEXED(self):
            return self.getToken(VyperParser.INDEXED, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_indexedeventarg

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexedeventarg" ):
                return visitor.visitIndexedeventarg(self)
            else:
                return visitor.visitChildren(self)




    def indexedeventarg(self):

        localctx = VyperParser.IndexedeventargContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_indexedeventarg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 412
            self.match(VyperParser.NAME)
            self.state = 413
            self.match(VyperParser.COLON)
            self.state = 414
            self.match(VyperParser.INDEXED)
            self.state = 415
            self.match(VyperParser.LPAREN)
            self.state = 416
            self.type_()
            self.state = 417
            self.match(VyperParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventbodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(VyperParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(VyperParser.DEDENT, 0)

        def docstring(self):
            return self.getTypedRuleContext(VyperParser.DocstringContext,0)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.CommentContext)
            else:
                return self.getTypedRuleContext(VyperParser.CommentContext,i)


        def eventmember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.EventmemberContext)
            else:
                return self.getTypedRuleContext(VyperParser.EventmemberContext,i)


        def indexedeventarg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.IndexedeventargContext)
            else:
                return self.getTypedRuleContext(VyperParser.IndexedeventargContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NEWLINE)
            else:
                return self.getToken(VyperParser.NEWLINE, i)

        def getRuleIndex(self):
            return VyperParser.RULE_eventbody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventbody" ):
                return visitor.visitEventbody(self)
            else:
                return visitor.visitChildren(self)




    def eventbody(self):

        localctx = VyperParser.EventbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_eventbody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(VyperParser.INDENT)
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 420
                self.docstring()
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 421
                    self.match(VyperParser.NEWLINE)




            self.state = 434 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 429
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
                if la_ == 1:
                    self.state = 426
                    self.comment()
                    pass

                elif la_ == 2:
                    self.state = 427
                    self.eventmember()
                    pass

                elif la_ == 3:
                    self.state = 428
                    self.indexedeventarg()
                    pass


                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 431
                    self.match(VyperParser.NEWLINE)


                self.state = 436 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==68 or _la==79):
                    break

            self.state = 438
            self.match(VyperParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENTDECL(self):
            return self.getToken(VyperParser.EVENTDECL, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def eventbody(self):
            return self.getTypedRuleContext(VyperParser.EventbodyContext,0)


        def PASS(self):
            return self.getToken(VyperParser.PASS, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_eventdef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventdef" ):
                return visitor.visitEventdef(self)
            else:
                return visitor.visitChildren(self)




    def eventdef(self):

        localctx = VyperParser.EventdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_eventdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.match(VyperParser.EVENTDECL)
            self.state = 441
            self.match(VyperParser.NAME)
            self.state = 442
            self.match(VyperParser.COLON)
            self.state = 445
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.state = 443
                self.eventbody()
                pass
            elif token in [39]:
                self.state = 444
                self.match(VyperParser.PASS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnummemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_enummember

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnummember" ):
                return visitor.visitEnummember(self)
            else:
                return visitor.visitChildren(self)




    def enummember(self):

        localctx = VyperParser.EnummemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_enummember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 447
            self.match(VyperParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumbodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(VyperParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(VyperParser.DEDENT, 0)

        def docstring(self):
            return self.getTypedRuleContext(VyperParser.DocstringContext,0)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.CommentContext)
            else:
                return self.getTypedRuleContext(VyperParser.CommentContext,i)


        def enummember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.EnummemberContext)
            else:
                return self.getTypedRuleContext(VyperParser.EnummemberContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NEWLINE)
            else:
                return self.getToken(VyperParser.NEWLINE, i)

        def getRuleIndex(self):
            return VyperParser.RULE_enumbody

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumbody" ):
                return visitor.visitEnumbody(self)
            else:
                return visitor.visitChildren(self)




    def enumbody(self):

        localctx = VyperParser.EnumbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_enumbody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(VyperParser.INDENT)
            self.state = 454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 450
                self.docstring()
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 451
                    self.match(VyperParser.NEWLINE)




            self.state = 461 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 461
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [79]:
                    self.state = 456
                    self.comment()
                    pass
                elif token in [68]:
                    self.state = 457
                    self.enummember()
                    self.state = 459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==78:
                        self.state = 458
                        self.match(VyperParser.NEWLINE)


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 463 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==68 or _la==79):
                    break

            self.state = 465
            self.match(VyperParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUMDECL(self):
            return self.getToken(VyperParser.ENUMDECL, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def enumbody(self):
            return self.getTypedRuleContext(VyperParser.EnumbodyContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_enumdef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumdef" ):
                return visitor.visitEnumdef(self)
            else:
                return visitor.visitChildren(self)




    def enumdef(self):

        localctx = VyperParser.EnumdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_enumdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(VyperParser.ENUMDECL)
            self.state = 468
            self.match(VyperParser.NAME)
            self.state = 469
            self.match(VyperParser.COLON)
            self.state = 470
            self.enumbody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArraydefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def arraydeftail(self):
            return self.getTypedRuleContext(VyperParser.ArraydeftailContext,0)


        def dynarraydef(self):
            return self.getTypedRuleContext(VyperParser.DynarraydefContext,0)


        def arraydef(self):
            return self.getTypedRuleContext(VyperParser.ArraydefContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_arraydef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArraydef" ):
                return visitor.visitArraydef(self)
            else:
                return visitor.visitChildren(self)



    def arraydef(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.ArraydefContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 56
        self.enterRecursionRule(localctx, 56, self.RULE_arraydef, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.state = 473
                self.match(VyperParser.NAME)
                self.state = 474
                self.arraydeftail()
                pass
            elif token in [22]:
                self.state = 475
                self.dynarraydef()
                self.state = 476
                self.arraydeftail()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 484
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,48,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = VyperParser.ArraydefContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_arraydef)
                    self.state = 480
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 481
                    self.arraydeftail() 
                self.state = 486
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ArraydeftailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(VyperParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(VyperParser.RSQUARE, 0)

        def DECNUMBER(self):
            return self.getToken(VyperParser.DECNUMBER, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_arraydeftail

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArraydeftail" ):
                return visitor.visitArraydeftail(self)
            else:
                return visitor.visitChildren(self)




    def arraydeftail(self):

        localctx = VyperParser.ArraydeftailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_arraydeftail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(VyperParser.LSQUARE)
            self.state = 488
            _la = self._input.LA(1)
            if not(_la==68 or _la==72):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 489
            self.match(VyperParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynarraydefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DYNARRAY(self):
            return self.getToken(VyperParser.DYNARRAY, 0)

        def LSQUARE(self):
            return self.getToken(VyperParser.LSQUARE, 0)

        def dynarraydefinner(self):
            return self.getTypedRuleContext(VyperParser.DynarraydefinnerContext,0)


        def COMMA(self):
            return self.getToken(VyperParser.COMMA, 0)

        def RSQUARE(self):
            return self.getToken(VyperParser.RSQUARE, 0)

        def DECNUMBER(self):
            return self.getToken(VyperParser.DECNUMBER, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_dynarraydef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynarraydef" ):
                return visitor.visitDynarraydef(self)
            else:
                return visitor.visitChildren(self)




    def dynarraydef(self):

        localctx = VyperParser.DynarraydefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dynarraydef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.match(VyperParser.DYNARRAY)
            self.state = 492
            self.match(VyperParser.LSQUARE)
            self.state = 493
            self.dynarraydefinner()
            self.state = 494
            self.match(VyperParser.COMMA)
            self.state = 495
            _la = self._input.LA(1)
            if not(_la==68 or _la==72):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 496
            self.match(VyperParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynarraydefinnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def arraydef(self):
            return self.getTypedRuleContext(VyperParser.ArraydefContext,0)


        def dynarraydef(self):
            return self.getTypedRuleContext(VyperParser.DynarraydefContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_dynarraydefinner

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynarraydefinner" ):
                return visitor.visitDynarraydefinner(self)
            else:
                return visitor.visitChildren(self)




    def dynarraydefinner(self):

        localctx = VyperParser.DynarraydefinnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_dynarraydefinner)
        try:
            self.state = 501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 498
                self.match(VyperParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 499
                self.arraydef(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 500
                self.dynarraydef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupledefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def tupledefinner(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TupledefinnerContext)
            else:
                return self.getTypedRuleContext(VyperParser.TupledefinnerContext,i)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_tupledef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupledef" ):
                return visitor.visitTupledef(self)
            else:
                return visitor.visitChildren(self)




    def tupledef(self):

        localctx = VyperParser.TupledefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_tupledef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(VyperParser.LPAREN)
            self.state = 504
            self.tupledefinner()
            self.state = 509
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 505
                    self.match(VyperParser.COMMA)
                    self.state = 506
                    self.tupledefinner() 
                self.state = 511
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 512
                self.match(VyperParser.COMMA)


            self.state = 515
            self.match(VyperParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupledefinnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def arraydef(self):
            return self.getTypedRuleContext(VyperParser.ArraydefContext,0)


        def dynarraydef(self):
            return self.getTypedRuleContext(VyperParser.DynarraydefContext,0)


        def tupledef(self):
            return self.getTypedRuleContext(VyperParser.TupledefContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_tupledefinner

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupledefinner" ):
                return visitor.visitTupledefinner(self)
            else:
                return visitor.visitChildren(self)




    def tupledefinner(self):

        localctx = VyperParser.TupledefinnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_tupledefinner)
        try:
            self.state = 521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self.match(VyperParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 518
                self.arraydef(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 519
                self.dynarraydef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 520
                self.tupledef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAP(self):
            return self.getToken(VyperParser.MAP, 0)

        def LSQUARE(self):
            return self.getToken(VyperParser.LSQUARE, 0)

        def COMMA(self):
            return self.getToken(VyperParser.COMMA, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def RSQUARE(self):
            return self.getToken(VyperParser.RSQUARE, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def arraydef(self):
            return self.getTypedRuleContext(VyperParser.ArraydefContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_mapdef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapdef" ):
                return visitor.visitMapdef(self)
            else:
                return visitor.visitChildren(self)




    def mapdef(self):

        localctx = VyperParser.MapdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_mapdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(VyperParser.MAP)
            self.state = 524
            self.match(VyperParser.LSQUARE)
            self.state = 527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.state = 525
                self.match(VyperParser.NAME)
                pass

            elif la_ == 2:
                self.state = 526
                self.arraydef(0)
                pass


            self.state = 529
            self.match(VyperParser.COMMA)
            self.state = 530
            self.type_()
            self.state = 531
            self.match(VyperParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def arraydef(self):
            return self.getTypedRuleContext(VyperParser.ArraydefContext,0)


        def tupledef(self):
            return self.getTypedRuleContext(VyperParser.TupledefContext,0)


        def mapdef(self):
            return self.getTypedRuleContext(VyperParser.MapdefContext,0)


        def dynarraydef(self):
            return self.getTypedRuleContext(VyperParser.DynarraydefContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_type_

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_" ):
                return visitor.visitType_(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = VyperParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_type_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.state = 533
                self.match(VyperParser.NAME)
                pass

            elif la_ == 2:
                self.state = 534
                self.arraydef(0)
                pass

            elif la_ == 3:
                self.state = 535
                self.tupledef()
                pass

            elif la_ == 4:
                self.state = 536
                self.mapdef()
                pass

            elif la_ == 5:
                self.state = 537
                self.dynarraydef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructmemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def getRuleIndex(self):
            return VyperParser.RULE_structmember

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructmember" ):
                return visitor.visitStructmember(self)
            else:
                return visitor.visitChildren(self)




    def structmember(self):

        localctx = VyperParser.StructmemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_structmember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 540
            self.match(VyperParser.NAME)
            self.state = 541
            self.match(VyperParser.COLON)
            self.state = 542
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCTDECL(self):
            return self.getToken(VyperParser.STRUCTDECL, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def INDENT(self):
            return self.getToken(VyperParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(VyperParser.DEDENT, 0)

        def docstring(self):
            return self.getTypedRuleContext(VyperParser.DocstringContext,0)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.CommentContext)
            else:
                return self.getTypedRuleContext(VyperParser.CommentContext,i)


        def structmember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.StructmemberContext)
            else:
                return self.getTypedRuleContext(VyperParser.StructmemberContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NEWLINE)
            else:
                return self.getToken(VyperParser.NEWLINE, i)

        def getRuleIndex(self):
            return VyperParser.RULE_structdef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructdef" ):
                return visitor.visitStructdef(self)
            else:
                return visitor.visitChildren(self)




    def structdef(self):

        localctx = VyperParser.StructdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_structdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(VyperParser.STRUCTDECL)
            self.state = 545
            self.match(VyperParser.NAME)
            self.state = 546
            self.match(VyperParser.COLON)
            self.state = 547
            self.match(VyperParser.INDENT)
            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 548
                self.docstring()
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 549
                    self.match(VyperParser.NEWLINE)




            self.state = 561 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 556
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [79]:
                    self.state = 554
                    self.comment()
                    pass
                elif token in [68]:
                    self.state = 555
                    self.structmember()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 558
                    self.match(VyperParser.NEWLINE)


                self.state = 563 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==68 or _la==79):
                    break

            self.state = 565
            self.match(VyperParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_mutability

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMutability" ):
                return visitor.visitMutability(self)
            else:
                return visitor.visitChildren(self)




    def mutability(self):

        localctx = VyperParser.MutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_mutability)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(VyperParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfacefunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionsig(self):
            return self.getTypedRuleContext(VyperParser.FunctionsigContext,0)


        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def mutability(self):
            return self.getTypedRuleContext(VyperParser.MutabilityContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_interfacefunction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfacefunction" ):
                return visitor.visitInterfacefunction(self)
            else:
                return visitor.visitChildren(self)




    def interfacefunction(self):

        localctx = VyperParser.InterfacefunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_interfacefunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.functionsig()
            self.state = 570
            self.match(VyperParser.COLON)
            self.state = 571
            self.mutability()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfacedefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACEDECL(self):
            return self.getToken(VyperParser.INTERFACEDECL, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def INDENT(self):
            return self.getToken(VyperParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(VyperParser.DEDENT, 0)

        def docstring(self):
            return self.getTypedRuleContext(VyperParser.DocstringContext,0)


        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.CommentContext)
            else:
                return self.getTypedRuleContext(VyperParser.CommentContext,i)


        def interfacefunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.InterfacefunctionContext)
            else:
                return self.getTypedRuleContext(VyperParser.InterfacefunctionContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NEWLINE)
            else:
                return self.getToken(VyperParser.NEWLINE, i)

        def getRuleIndex(self):
            return VyperParser.RULE_interfacedef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfacedef" ):
                return visitor.visitInterfacedef(self)
            else:
                return visitor.visitChildren(self)




    def interfacedef(self):

        localctx = VyperParser.InterfacedefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_interfacedef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.match(VyperParser.INTERFACEDECL)
            self.state = 574
            self.match(VyperParser.NAME)
            self.state = 575
            self.match(VyperParser.COLON)
            self.state = 576
            self.match(VyperParser.INDENT)
            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==71:
                self.state = 577
                self.docstring()
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 578
                    self.match(VyperParser.NEWLINE)




            self.state = 590 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 585
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [79]:
                    self.state = 583
                    self.comment()
                    pass
                elif token in [23]:
                    self.state = 584
                    self.interfacefunction()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==78:
                    self.state = 587
                    self.match(VyperParser.NEWLINE)


                self.state = 592 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==23 or _la==79):
                    break

            self.state = 594
            self.match(VyperParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifstmt(self):
            return self.getTypedRuleContext(VyperParser.IfstmtContext,0)


        def forstmt(self):
            return self.getTypedRuleContext(VyperParser.ForstmtContext,0)


        def assign(self):
            return self.getTypedRuleContext(VyperParser.AssignContext,0)


        def augassign(self):
            return self.getTypedRuleContext(VyperParser.AugassignContext,0)


        def declaration(self):
            return self.getTypedRuleContext(VyperParser.DeclarationContext,0)


        def returnstmt(self):
            return self.getTypedRuleContext(VyperParser.ReturnstmtContext,0)


        def passstmt(self):
            return self.getTypedRuleContext(VyperParser.PassstmtContext,0)


        def breakstmt(self):
            return self.getTypedRuleContext(VyperParser.BreakstmtContext,0)


        def continuestmt(self):
            return self.getTypedRuleContext(VyperParser.ContinuestmtContext,0)


        def logstmt(self):
            return self.getTypedRuleContext(VyperParser.LogstmtContext,0)


        def raisestmt(self):
            return self.getTypedRuleContext(VyperParser.RaisestmtContext,0)


        def assertstmt(self):
            return self.getTypedRuleContext(VyperParser.AssertstmtContext,0)


        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def COMMENT(self):
            return self.getToken(VyperParser.COMMENT, 0)

        def comment(self):
            return self.getTypedRuleContext(VyperParser.CommentContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = VyperParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_stmt)
        try:
            self.state = 617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 598
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [46]:
                    self.state = 596
                    self.ifstmt()
                    pass
                elif token in [50]:
                    self.state = 597
                    self.forstmt()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 611
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 600
                    self.assign()
                    pass

                elif la_ == 2:
                    self.state = 601
                    self.augassign()
                    pass

                elif la_ == 3:
                    self.state = 602
                    self.declaration()
                    pass

                elif la_ == 4:
                    self.state = 603
                    self.returnstmt()
                    pass

                elif la_ == 5:
                    self.state = 604
                    self.passstmt()
                    pass

                elif la_ == 6:
                    self.state = 605
                    self.breakstmt()
                    pass

                elif la_ == 7:
                    self.state = 606
                    self.continuestmt()
                    pass

                elif la_ == 8:
                    self.state = 607
                    self.logstmt()
                    pass

                elif la_ == 9:
                    self.state = 608
                    self.raisestmt()
                    pass

                elif la_ == 10:
                    self.state = 609
                    self.assertstmt()
                    pass

                elif la_ == 11:
                    self.state = 610
                    self.expr()
                    pass


                self.state = 614
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 613
                    self.match(VyperParser.COMMENT)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 616
                self.comment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(VyperParser.COMMENT, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_comment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComment" ):
                return visitor.visitComment(self)
            else:
                return visitor.visitChildren(self)




    def comment(self):

        localctx = VyperParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_comment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(VyperParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DocstringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOCSTRING(self):
            return self.getToken(VyperParser.DOCSTRING, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_docstring

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDocstring" ):
                return visitor.visitDocstring(self)
            else:
                return visitor.visitChildren(self)




    def docstring(self):

        localctx = VyperParser.DocstringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_docstring)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(VyperParser.DOCSTRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(VyperParser.VariableContext,0)


        def ASSIGN(self):
            return self.getToken(VyperParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_declaration

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = VyperParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.variable()
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 624
                self.match(VyperParser.ASSIGN)
                self.state = 625
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableaccess(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.VariableaccessContext)
            else:
                return self.getTypedRuleContext(VyperParser.VariableaccessContext,i)


        def SKIPASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.SKIPASSIGN)
            else:
                return self.getToken(VyperParser.SKIPASSIGN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_multipleassign

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipleassign" ):
                return visitor.visitMultipleassign(self)
            else:
                return visitor.visitChildren(self)




    def multipleassign(self):

        localctx = VyperParser.MultipleassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_multipleassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 68]:
                self.state = 628
                self.variableaccess()
                pass
            elif token in [30]:
                self.state = 629
                self.match(VyperParser.SKIPASSIGN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 637 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 632
                self.match(VyperParser.COMMA)
                self.state = 635
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [11, 68]:
                    self.state = 633
                    self.variableaccess()
                    pass
                elif token in [30]:
                    self.state = 634
                    self.match(VyperParser.SKIPASSIGN)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 639 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==7):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(VyperParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def variableaccess(self):
            return self.getTypedRuleContext(VyperParser.VariableaccessContext,0)


        def multipleassign(self):
            return self.getTypedRuleContext(VyperParser.MultipleassignContext,0)


        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_assign

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign" ):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)




    def assign(self):

        localctx = VyperParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 641
                self.variableaccess()
                pass

            elif la_ == 2:
                self.state = 642
                self.multipleassign()
                pass

            elif la_ == 3:
                self.state = 643
                self.match(VyperParser.LPAREN)
                self.state = 644
                self.multipleassign()
                self.state = 645
                self.match(VyperParser.RPAREN)
                pass


            self.state = 649
            self.match(VyperParser.ASSIGN)
            self.state = 650
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugoperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(VyperParser.ADD, 0)

        def SUB(self):
            return self.getToken(VyperParser.SUB, 0)

        def MUL(self):
            return self.getToken(VyperParser.MUL, 0)

        def DIV(self):
            return self.getToken(VyperParser.DIV, 0)

        def MOD(self):
            return self.getToken(VyperParser.MOD, 0)

        def POW(self):
            return self.getToken(VyperParser.POW, 0)

        def SHL(self):
            return self.getToken(VyperParser.SHL, 0)

        def SHR(self):
            return self.getToken(VyperParser.SHR, 0)

        def BITAND(self):
            return self.getToken(VyperParser.BITAND, 0)

        def BITOR(self):
            return self.getToken(VyperParser.BITOR, 0)

        def BITXOR(self):
            return self.getToken(VyperParser.BITXOR, 0)

        def AND(self):
            return self.getToken(VyperParser.AND, 0)

        def OR(self):
            return self.getToken(VyperParser.OR, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_augoperator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugoperator" ):
                return visitor.visitAugoperator(self)
            else:
                return visitor.visitChildren(self)




    def augoperator(self):

        localctx = VyperParser.AugoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_augoperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 517914504755937280) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableaccess(self):
            return self.getTypedRuleContext(VyperParser.VariableaccessContext,0)


        def augoperator(self):
            return self.getTypedRuleContext(VyperParser.AugoperatorContext,0)


        def ASSIGN(self):
            return self.getToken(VyperParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_augassign

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = VyperParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_augassign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.variableaccess()
            self.state = 655
            self.augoperator()
            self.state = 656
            self.match(VyperParser.ASSIGN)
            self.state = 657
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PassstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(VyperParser.PASS, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_passstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPassstmt" ):
                return visitor.visitPassstmt(self)
            else:
                return visitor.visitChildren(self)




    def passstmt(self):

        localctx = VyperParser.PassstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_passstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(VyperParser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(VyperParser.Break, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_breakstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakstmt" ):
                return visitor.visitBreakstmt(self)
            else:
                return visitor.visitChildren(self)




    def breakstmt(self):

        localctx = VyperParser.BreakstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_breakstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.match(VyperParser.Break)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinuestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(VyperParser.CONTINUE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_continuestmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinuestmt" ):
                return visitor.visitContinuestmt(self)
            else:
                return visitor.visitChildren(self)




    def continuestmt(self):

        localctx = VyperParser.ContinuestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_continuestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(VyperParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(VyperParser.LOG, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def arguments(self):
            return self.getTypedRuleContext(VyperParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_logstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogstmt" ):
                return visitor.visitLogstmt(self)
            else:
                return visitor.visitChildren(self)




    def logstmt(self):

        localctx = VyperParser.LogstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_logstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(VyperParser.LOG)
            self.state = 666
            self.match(VyperParser.NAME)
            self.state = 667
            self.match(VyperParser.LPAREN)
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54043201970939904) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 20399) != 0):
                self.state = 668
                self.arguments()


            self.state = 671
            self.match(VyperParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(VyperParser.RETURN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ExprContext)
            else:
                return self.getTypedRuleContext(VyperParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_returnstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnstmt" ):
                return visitor.visitReturnstmt(self)
            else:
                return visitor.visitChildren(self)




    def returnstmt(self):

        localctx = VyperParser.ReturnstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_returnstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.match(VyperParser.RETURN)
            self.state = 682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 674
                self.expr()
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 675
                    self.match(VyperParser.COMMA)
                    self.state = 676
                    self.expr()
                    self.state = 681
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaisestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(VyperParser.RAISE, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def UNREACHABLE(self):
            return self.getToken(VyperParser.UNREACHABLE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_raisestmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaisestmt" ):
                return visitor.visitRaisestmt(self)
            else:
                return visitor.visitChildren(self)




    def raisestmt(self):

        localctx = VyperParser.RaisestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_raisestmt)
        try:
            self.state = 689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 684
                self.match(VyperParser.RAISE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 685
                self.match(VyperParser.RAISE)
                self.state = 686
                self.expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 687
                self.match(VyperParser.RAISE)
                self.state = 688
                self.match(VyperParser.UNREACHABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(VyperParser.ASSERT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ExprContext)
            else:
                return self.getTypedRuleContext(VyperParser.ExprContext,i)


        def COMMA(self):
            return self.getToken(VyperParser.COMMA, 0)

        def UNREACHABLE(self):
            return self.getToken(VyperParser.UNREACHABLE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_assertstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssertstmt" ):
                return visitor.visitAssertstmt(self)
            else:
                return visitor.visitChildren(self)




    def assertstmt(self):

        localctx = VyperParser.AssertstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_assertstmt)
        try:
            self.state = 703
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 691
                self.match(VyperParser.ASSERT)
                self.state = 692
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 693
                self.match(VyperParser.ASSERT)
                self.state = 694
                self.expr()
                self.state = 695
                self.match(VyperParser.COMMA)
                self.state = 696
                self.expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 698
                self.match(VyperParser.ASSERT)
                self.state = 699
                self.expr()
                self.state = 700
                self.match(VyperParser.COMMA)
                self.state = 701
                self.match(VyperParser.UNREACHABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondexecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def body(self):
            return self.getTypedRuleContext(VyperParser.BodyContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_condexec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondexec" ):
                return visitor.visitCondexec(self)
            else:
                return visitor.visitChildren(self)




    def condexec(self):

        localctx = VyperParser.CondexecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_condexec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.expr()
            self.state = 706
            self.match(VyperParser.COLON)
            self.state = 707
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultexecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body(self):
            return self.getTypedRuleContext(VyperParser.BodyContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_defaultexec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultexec" ):
                return visitor.visitDefaultexec(self)
            else:
                return visitor.visitChildren(self)




    def defaultexec(self):

        localctx = VyperParser.DefaultexecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_defaultexec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(VyperParser.IF, 0)

        def condexec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.CondexecContext)
            else:
                return self.getTypedRuleContext(VyperParser.CondexecContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.ELIF)
            else:
                return self.getToken(VyperParser.ELIF, i)

        def ELSE(self):
            return self.getToken(VyperParser.ELSE, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def defaultexec(self):
            return self.getTypedRuleContext(VyperParser.DefaultexecContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_ifstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfstmt" ):
                return visitor.visitIfstmt(self)
            else:
                return visitor.visitChildren(self)




    def ifstmt(self):

        localctx = VyperParser.IfstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_ifstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 711
            self.match(VyperParser.IF)
            self.state = 712
            self.condexec()
            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==48:
                self.state = 713
                self.match(VyperParser.ELIF)
                self.state = 714
                self.condexec()
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 720
                self.match(VyperParser.ELSE)
                self.state = 721
                self.match(VyperParser.COLON)
                self.state = 722
                self.defaultexec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopvariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NAME)
            else:
                return self.getToken(VyperParser.NAME, i)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_loopvariable

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopvariable" ):
                return visitor.visitLoopvariable(self)
            else:
                return visitor.visitChildren(self)




    def loopvariable(self):

        localctx = VyperParser.LoopvariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_loopvariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(VyperParser.NAME)
            self.state = 728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 726
                self.match(VyperParser.COLON)
                self.state = 727
                self.match(VyperParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopiteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_loopiterator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopiterator" ):
                return visitor.visitLoopiterator(self)
            else:
                return visitor.visitChildren(self)




    def loopiterator(self):

        localctx = VyperParser.LoopiteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_loopiterator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(VyperParser.FOR, 0)

        def loopvariable(self):
            return self.getTypedRuleContext(VyperParser.LoopvariableContext,0)


        def IN(self):
            return self.getToken(VyperParser.IN, 0)

        def loopiterator(self):
            return self.getTypedRuleContext(VyperParser.LoopiteratorContext,0)


        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def body(self):
            return self.getTypedRuleContext(VyperParser.BodyContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_forstmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForstmt" ):
                return visitor.visitForstmt(self)
            else:
                return visitor.visitChildren(self)




    def forstmt(self):

        localctx = VyperParser.ForstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_forstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(VyperParser.FOR)
            self.state = 733
            self.loopvariable()
            self.state = 734
            self.match(VyperParser.IN)
            self.state = 735
            self.loopiterator()
            self.state = 736
            self.match(VyperParser.COLON)
            self.state = 737
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operation(self):
            return self.getTypedRuleContext(VyperParser.OperationContext,0)


        def dict_(self):
            return self.getTypedRuleContext(VyperParser.DictContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = VyperParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_expr)
        try:
            self.state = 741
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 13, 31, 32, 54, 55, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 79]:
                self.enterOuterAlt(localctx, 1)
                self.state = 739
                self.operation()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 740
                self.dict_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableaccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def variableaccess(self):
            return self.getTypedRuleContext(VyperParser.VariableaccessContext,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def getattr_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.GetattrContext)
            else:
                return self.getTypedRuleContext(VyperParser.GetattrContext,i)


        def getitem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.GetitemContext)
            else:
                return self.getTypedRuleContext(VyperParser.GetitemContext,i)


        def call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.CallContext)
            else:
                return self.getTypedRuleContext(VyperParser.CallContext,i)


        def getRuleIndex(self):
            return VyperParser.RULE_variableaccess

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableaccess" ):
                return visitor.visitVariableaccess(self)
            else:
                return visitor.visitChildren(self)




    def variableaccess(self):

        localctx = VyperParser.VariableaccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_variableaccess)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.state = 743
                self.match(VyperParser.NAME)
                pass
            elif token in [11]:
                self.state = 744
                self.match(VyperParser.LPAREN)
                self.state = 745
                self.variableaccess()
                self.state = 746
                self.match(VyperParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 755
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 753
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [6]:
                        self.state = 750
                        self.getattr_()
                        pass
                    elif token in [13]:
                        self.state = 751
                        self.getitem()
                        pass
                    elif token in [11]:
                        self.state = 752
                        self.call()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 757
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetattrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(VyperParser.DOT, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_getattr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetattr" ):
                return visitor.visitGetattr(self)
            else:
                return visitor.visitChildren(self)




    def getattr_(self):

        localctx = VyperParser.GetattrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_getattr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(VyperParser.DOT)
            self.state = 759
            self.match(VyperParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetitemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(VyperParser.LSQUARE, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def RSQUARE(self):
            return self.getToken(VyperParser.RSQUARE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_getitem

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetitem" ):
                return visitor.visitGetitem(self)
            else:
                return visitor.visitChildren(self)




    def getitem(self):

        localctx = VyperParser.GetitemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_getitem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.match(VyperParser.LSQUARE)
            self.state = 762
            self.expr()
            self.state = 763
            self.match(VyperParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def arguments(self):
            return self.getTypedRuleContext(VyperParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_call

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCall" ):
                return visitor.visitCall(self)
            else:
                return visitor.visitChildren(self)




    def call(self):

        localctx = VyperParser.CallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(VyperParser.LPAREN)

            self.state = 767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 54043201970939904) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 20399) != 0):
                self.state = 766
                self.arguments()


            self.state = 769
            self.match(VyperParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_arg

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArg" ):
                return visitor.visitArg(self)
            else:
                return visitor.visitChildren(self)




    def arg(self):

        localctx = VyperParser.ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def ASSIGN(self):
            return self.getToken(VyperParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_kwarg

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwarg" ):
                return visitor.visitKwarg(self)
            else:
                return visitor.visitChildren(self)




    def kwarg(self):

        localctx = VyperParser.KwargContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_kwarg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(VyperParser.NAME)
            self.state = 774
            self.match(VyperParser.ASSIGN)
            self.state = 775
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg(self):
            return self.getTypedRuleContext(VyperParser.ArgContext,0)


        def kwarg(self):
            return self.getTypedRuleContext(VyperParser.KwargContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_argument

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = VyperParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 777
                self.arg()
                pass

            elif la_ == 2:
                self.state = 778
                self.kwarg()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(VyperParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_arguments

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = VyperParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 781
            self.argument()
            self.state = 786
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 782
                    self.match(VyperParser.COMMA)
                    self.state = 783
                    self.argument() 
                self.state = 788
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

            self.state = 790
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 789
                self.match(VyperParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ExprContext)
            else:
                return self.getTypedRuleContext(VyperParser.ExprContext,i)


        def getRuleIndex(self):
            return VyperParser.RULE_tuple

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple" ):
                return visitor.visitTuple(self)
            else:
                return visitor.visitChildren(self)




    def tuple_(self):

        localctx = VyperParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_tuple)
        self._la = 0 # Token type
        try:
            self.state = 811
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 792
                self.match(VyperParser.LPAREN)
                self.state = 793
                self.match(VyperParser.COMMA)
                self.state = 794
                self.match(VyperParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 795
                self.match(VyperParser.LPAREN)
                self.state = 796
                self.expr()
                self.state = 807
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 799 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 797
                            self.match(VyperParser.COMMA)
                            self.state = 798
                            self.expr()

                        else:
                            raise NoViableAltException(self)
                        self.state = 801 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,90,self._ctx)

                    self.state = 804
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==7:
                        self.state = 803
                        self.match(VyperParser.COMMA)


                    pass

                elif la_ == 2:
                    self.state = 806
                    self.match(VyperParser.COMMA)
                    pass


                self.state = 809
                self.match(VyperParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(VyperParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(VyperParser.RSQUARE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ExprContext)
            else:
                return self.getTypedRuleContext(VyperParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList" ):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)




    def list_(self):

        localctx = VyperParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.state = 829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 813
                self.match(VyperParser.LSQUARE)
                self.state = 814
                self.match(VyperParser.RSQUARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 815
                self.match(VyperParser.LSQUARE)
                self.state = 816
                self.expr()
                self.state = 821
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 817
                        self.match(VyperParser.COMMA)
                        self.state = 818
                        self.expr() 
                    self.state = 823
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 824
                    self.match(VyperParser.COMMA)


                self.state = 827
                self.match(VyperParser.RSQUARE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(VyperParser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(VyperParser.RCURLY, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NAME)
            else:
                return self.getToken(VyperParser.NAME, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COLON)
            else:
                return self.getToken(VyperParser.COLON, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ExprContext)
            else:
                return self.getTypedRuleContext(VyperParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_dict

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDict" ):
                return visitor.visitDict(self)
            else:
                return visitor.visitChildren(self)




    def dict_(self):

        localctx = VyperParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_dict)
        self._la = 0 # Token type
        try:
            self.state = 852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 831
                self.match(VyperParser.LCURLY)
                self.state = 832
                self.match(VyperParser.RCURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 833
                self.match(VyperParser.LCURLY)

                self.state = 834
                self.match(VyperParser.NAME)
                self.state = 835
                self.match(VyperParser.COLON)
                self.state = 836
                self.expr()
                self.state = 844
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 838
                        self.match(VyperParser.COMMA)

                        self.state = 839
                        self.match(VyperParser.NAME)
                        self.state = 840
                        self.match(VyperParser.COLON)
                        self.state = 841
                        self.expr() 
                    self.state = 846
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 847
                    self.match(VyperParser.COMMA)


                self.state = 850
                self.match(VyperParser.RCURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolor(self):
            return self.getTypedRuleContext(VyperParser.BoolorContext,0)


        def comment(self):
            return self.getTypedRuleContext(VyperParser.CommentContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_operation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperation" ):
                return visitor.visitOperation(self)
            else:
                return visitor.visitChildren(self)




    def operation(self):

        localctx = VyperParser.OperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==79:
                self.state = 854
                self.comment()


            self.state = 857
            self.boolor(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booland(self):
            return self.getTypedRuleContext(VyperParser.BoolandContext,0)


        def boolor(self):
            return self.getTypedRuleContext(VyperParser.BoolorContext,0)


        def OR(self):
            return self.getToken(VyperParser.OR, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_boolor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolor" ):
                return visitor.visitBoolor(self)
            else:
                return visitor.visitChildren(self)



    def boolor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.BoolorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 150
        self.enterRecursionRule(localctx, 150, self.RULE_boolor, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.booland(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 867
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = VyperParser.BoolorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_boolor)
                    self.state = 862
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 863
                    self.match(VyperParser.OR)
                    self.state = 864
                    self.booland(0) 
                self.state = 869
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BoolandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolnot(self):
            return self.getTypedRuleContext(VyperParser.BoolnotContext,0)


        def booland(self):
            return self.getTypedRuleContext(VyperParser.BoolandContext,0)


        def AND(self):
            return self.getToken(VyperParser.AND, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_booland

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooland" ):
                return visitor.visitBooland(self)
            else:
                return visitor.visitChildren(self)



    def booland(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.BoolandContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 152
        self.enterRecursionRule(localctx, 152, self.RULE_booland, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.boolnot()
            self._ctx.stop = self._input.LT(-1)
            self.state = 878
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = VyperParser.BoolandContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_booland)
                    self.state = 873
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 874
                    self.match(VyperParser.AND)
                    self.state = 875
                    self.boolnot() 
                self.state = 880
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BoolnotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparator(self):
            return self.getTypedRuleContext(VyperParser.ComparatorContext,0)


        def NOT(self):
            return self.getToken(VyperParser.NOT, 0)

        def boolnot(self):
            return self.getTypedRuleContext(VyperParser.BoolnotContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_boolnot

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolnot" ):
                return visitor.visitBoolnot(self)
            else:
                return visitor.visitChildren(self)




    def boolnot(self):

        localctx = VyperParser.BoolnotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_boolnot)
        try:
            self.state = 884
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 13, 31, 32, 55, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 881
                self.comparator(0)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 882
                self.match(VyperParser.NOT)
                self.state = 883
                self.boolnot()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseor(self):
            return self.getTypedRuleContext(VyperParser.BitwiseorContext,0)


        def comparator(self):
            return self.getTypedRuleContext(VyperParser.ComparatorContext,0)


        def LT(self):
            return self.getToken(VyperParser.LT, 0)

        def GT(self):
            return self.getToken(VyperParser.GT, 0)

        def EQ(self):
            return self.getToken(VyperParser.EQ, 0)

        def NE(self):
            return self.getToken(VyperParser.NE, 0)

        def LE(self):
            return self.getToken(VyperParser.LE, 0)

        def GE(self):
            return self.getToken(VyperParser.GE, 0)

        def IN(self):
            return self.getToken(VyperParser.IN, 0)

        def NOT(self):
            return self.getToken(VyperParser.NOT, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_comparator

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparator" ):
                return visitor.visitComparator(self)
            else:
                return visitor.visitChildren(self)



    def comparator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.ComparatorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 156
        self.enterRecursionRule(localctx, 156, self.RULE_comparator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.bitwiseor(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 916
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 914
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                    if la_ == 1:
                        localctx = VyperParser.ComparatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparator)
                        self.state = 889
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 890
                        self.match(VyperParser.LT)
                        self.state = 891
                        self.bitwiseor(0)
                        pass

                    elif la_ == 2:
                        localctx = VyperParser.ComparatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparator)
                        self.state = 892
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 893
                        self.match(VyperParser.GT)
                        self.state = 894
                        self.bitwiseor(0)
                        pass

                    elif la_ == 3:
                        localctx = VyperParser.ComparatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparator)
                        self.state = 895
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 896
                        self.match(VyperParser.EQ)
                        self.state = 897
                        self.bitwiseor(0)
                        pass

                    elif la_ == 4:
                        localctx = VyperParser.ComparatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparator)
                        self.state = 898
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 899
                        self.match(VyperParser.NE)
                        self.state = 900
                        self.bitwiseor(0)
                        pass

                    elif la_ == 5:
                        localctx = VyperParser.ComparatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparator)
                        self.state = 901
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 902
                        self.match(VyperParser.LE)
                        self.state = 903
                        self.bitwiseor(0)
                        pass

                    elif la_ == 6:
                        localctx = VyperParser.ComparatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparator)
                        self.state = 904
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 905
                        self.match(VyperParser.GE)
                        self.state = 906
                        self.bitwiseor(0)
                        pass

                    elif la_ == 7:
                        localctx = VyperParser.ComparatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparator)
                        self.state = 907
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 908
                        self.match(VyperParser.IN)
                        self.state = 909
                        self.bitwiseor(0)
                        pass

                    elif la_ == 8:
                        localctx = VyperParser.ComparatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparator)
                        self.state = 910
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 911
                        self.match(VyperParser.NOT)
                        self.state = 912
                        self.match(VyperParser.IN)
                        self.state = 913
                        self.bitwiseor(0)
                        pass

             
                self.state = 918
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitwiseorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwisexor(self):
            return self.getTypedRuleContext(VyperParser.BitwisexorContext,0)


        def bitwiseor(self):
            return self.getTypedRuleContext(VyperParser.BitwiseorContext,0)


        def BITOR(self):
            return self.getToken(VyperParser.BITOR, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_bitwiseor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseor" ):
                return visitor.visitBitwiseor(self)
            else:
                return visitor.visitChildren(self)



    def bitwiseor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.BitwiseorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 158
        self.enterRecursionRule(localctx, 158, self.RULE_bitwiseor, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.bitwisexor(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 927
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = VyperParser.BitwiseorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwiseor)
                    self.state = 922
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 923
                    self.match(VyperParser.BITOR)
                    self.state = 924
                    self.bitwisexor(0) 
                self.state = 929
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitwisexorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseand(self):
            return self.getTypedRuleContext(VyperParser.BitwiseandContext,0)


        def bitwisexor(self):
            return self.getTypedRuleContext(VyperParser.BitwisexorContext,0)


        def BITXOR(self):
            return self.getToken(VyperParser.BITXOR, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_bitwisexor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwisexor" ):
                return visitor.visitBitwisexor(self)
            else:
                return visitor.visitChildren(self)



    def bitwisexor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.BitwisexorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 160
        self.enterRecursionRule(localctx, 160, self.RULE_bitwisexor, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self.bitwiseand(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 938
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = VyperParser.BitwisexorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwisexor)
                    self.state = 933
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 934
                    self.match(VyperParser.BITXOR)
                    self.state = 935
                    self.bitwiseand(0) 
                self.state = 940
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitwiseandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift(self):
            return self.getTypedRuleContext(VyperParser.ShiftContext,0)


        def bitwiseand(self):
            return self.getTypedRuleContext(VyperParser.BitwiseandContext,0)


        def BITAND(self):
            return self.getToken(VyperParser.BITAND, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_bitwiseand

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseand" ):
                return visitor.visitBitwiseand(self)
            else:
                return visitor.visitChildren(self)



    def bitwiseand(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.BitwiseandContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 162
        self.enterRecursionRule(localctx, 162, self.RULE_bitwiseand, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.shift(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 949
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,108,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = VyperParser.BitwiseandContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwiseand)
                    self.state = 944
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 945
                    self.match(VyperParser.BITAND)
                    self.state = 946
                    self.shift(0) 
                self.state = 951
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def summation(self):
            return self.getTypedRuleContext(VyperParser.SummationContext,0)


        def shift(self):
            return self.getTypedRuleContext(VyperParser.ShiftContext,0)


        def SHL(self):
            return self.getToken(VyperParser.SHL, 0)

        def SHR(self):
            return self.getToken(VyperParser.SHR, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_shift

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShift" ):
                return visitor.visitShift(self)
            else:
                return visitor.visitChildren(self)



    def shift(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.ShiftContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 164
        self.enterRecursionRule(localctx, 164, self.RULE_shift, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.summation(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 963
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 961
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                    if la_ == 1:
                        localctx = VyperParser.ShiftContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shift)
                        self.state = 955
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 956
                        self.match(VyperParser.SHL)
                        self.state = 957
                        self.summation(0)
                        pass

                    elif la_ == 2:
                        localctx = VyperParser.ShiftContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shift)
                        self.state = 958
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 959
                        self.match(VyperParser.SHR)
                        self.state = 960
                        self.summation(0)
                        pass

             
                self.state = 965
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SummationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def product(self):
            return self.getTypedRuleContext(VyperParser.ProductContext,0)


        def summation(self):
            return self.getTypedRuleContext(VyperParser.SummationContext,0)


        def ADD(self):
            return self.getToken(VyperParser.ADD, 0)

        def SUB(self):
            return self.getToken(VyperParser.SUB, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_summation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSummation" ):
                return visitor.visitSummation(self)
            else:
                return visitor.visitChildren(self)



    def summation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.SummationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 166
        self.enterRecursionRule(localctx, 166, self.RULE_summation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.product(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 977
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 975
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                    if la_ == 1:
                        localctx = VyperParser.SummationContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_summation)
                        self.state = 969
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 970
                        self.match(VyperParser.ADD)
                        self.state = 971
                        self.product(0)
                        pass

                    elif la_ == 2:
                        localctx = VyperParser.SummationContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_summation)
                        self.state = 972
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 973
                        self.match(VyperParser.SUB)
                        self.state = 974
                        self.product(0)
                        pass

             
                self.state = 979
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ProductContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(VyperParser.UnaryContext,0)


        def product(self):
            return self.getTypedRuleContext(VyperParser.ProductContext,0)


        def MUL(self):
            return self.getToken(VyperParser.MUL, 0)

        def DIV(self):
            return self.getToken(VyperParser.DIV, 0)

        def MOD(self):
            return self.getToken(VyperParser.MOD, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_product

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProduct" ):
                return visitor.visitProduct(self)
            else:
                return visitor.visitChildren(self)



    def product(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.ProductContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 168
        self.enterRecursionRule(localctx, 168, self.RULE_product, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.unary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 994
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 992
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                    if la_ == 1:
                        localctx = VyperParser.ProductContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_product)
                        self.state = 983
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 984
                        self.match(VyperParser.MUL)
                        self.state = 985
                        self.unary()
                        pass

                    elif la_ == 2:
                        localctx = VyperParser.ProductContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_product)
                        self.state = 986
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 987
                        self.match(VyperParser.DIV)
                        self.state = 988
                        self.unary()
                        pass

                    elif la_ == 3:
                        localctx = VyperParser.ProductContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_product)
                        self.state = 989
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 990
                        self.match(VyperParser.MOD)
                        self.state = 991
                        self.unary()
                        pass

             
                self.state = 996
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def power(self):
            return self.getTypedRuleContext(VyperParser.PowerContext,0)


        def ADD(self):
            return self.getToken(VyperParser.ADD, 0)

        def SUB(self):
            return self.getToken(VyperParser.SUB, 0)

        def NEG(self):
            return self.getToken(VyperParser.NEG, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_unary

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary" ):
                return visitor.visitUnary(self)
            else:
                return visitor.visitChildren(self)




    def unary(self):

        localctx = VyperParser.UnaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_unary)
        try:
            self.state = 1004
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 13, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76]:
                self.enterOuterAlt(localctx, 1)
                self.state = 997
                self.power(0)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 2)
                self.state = 998
                self.match(VyperParser.ADD)
                self.state = 999
                self.power(0)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1000
                self.match(VyperParser.SUB)
                self.state = 1001
                self.power(0)
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1002
                self.match(VyperParser.NEG)
                self.state = 1003
                self.power(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(VyperParser.AtomContext,0)


        def power(self):
            return self.getTypedRuleContext(VyperParser.PowerContext,0)


        def POW(self):
            return self.getToken(VyperParser.POW, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_power

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPower" ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)



    def power(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.PowerContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 172
        self.enterRecursionRule(localctx, 172, self.RULE_power, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1014
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = VyperParser.PowerContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_power)
                    self.state = 1009
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1010
                    self.match(VyperParser.POW)
                    self.state = 1011
                    self.atom() 
                self.state = 1016
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EMPTY(self):
            return self.getToken(VyperParser.EMPTY, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_empty

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmpty" ):
                return visitor.visitEmpty(self)
            else:
                return visitor.visitChildren(self)




    def empty(self):

        localctx = VyperParser.EmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_empty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.match(VyperParser.EMPTY)
            self.state = 1018
            self.match(VyperParser.LPAREN)
            self.state = 1019
            self.type_()
            self.state = 1020
            self.match(VyperParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbidecodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABIDECODE(self):
            return self.getToken(VyperParser.ABIDECODE, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def arg(self):
            return self.getTypedRuleContext(VyperParser.ArgContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def kwarg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.KwargContext)
            else:
                return self.getTypedRuleContext(VyperParser.KwargContext,i)


        def getRuleIndex(self):
            return VyperParser.RULE_abidecode

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbidecode" ):
                return visitor.visitAbidecode(self)
            else:
                return visitor.visitChildren(self)




    def abidecode(self):

        localctx = VyperParser.AbidecodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_abidecode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1022
            self.match(VyperParser.ABIDECODE)
            self.state = 1023
            self.match(VyperParser.LPAREN)
            self.state = 1024
            self.arg()
            self.state = 1025
            self.match(VyperParser.COMMA)
            self.state = 1026
            self.type_()
            self.state = 1031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 1027
                self.match(VyperParser.COMMA)
                self.state = 1028
                self.kwarg()
                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1034
            self.match(VyperParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialbuiltinsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def empty(self):
            return self.getTypedRuleContext(VyperParser.EmptyContext,0)


        def abidecode(self):
            return self.getTypedRuleContext(VyperParser.AbidecodeContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_specialbuiltins

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialbuiltins" ):
                return visitor.visitSpecialbuiltins(self)
            else:
                return visitor.visitChildren(self)




    def specialbuiltins(self):

        localctx = VyperParser.SpecialbuiltinsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_specialbuiltins)
        try:
            self.state = 1038
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1036
                self.empty()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1037
                self.abidecode()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableaccess(self):
            return self.getTypedRuleContext(VyperParser.VariableaccessContext,0)


        def literal(self):
            return self.getTypedRuleContext(VyperParser.LiteralContext,0)


        def specialbuiltins(self):
            return self.getTypedRuleContext(VyperParser.SpecialbuiltinsContext,0)


        def tuple_(self):
            return self.getTypedRuleContext(VyperParser.TupleContext,0)


        def list_(self):
            return self.getTypedRuleContext(VyperParser.ListContext,0)


        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def operation(self):
            return self.getTypedRuleContext(VyperParser.OperationContext,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_atom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = VyperParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_atom)
        try:
            self.state = 1049
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1040
                self.variableaccess()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1041
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1042
                self.specialbuiltins()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1043
                self.tuple_()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1044
                self.list_()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1045
                self.match(VyperParser.LPAREN)
                self.state = 1046
                self.operation()
                self.state = 1047
                self.match(VyperParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECNUMBER(self):
            return self.getToken(VyperParser.DECNUMBER, 0)

        def HEXNUMBER(self):
            return self.getToken(VyperParser.HEXNUMBER, 0)

        def BINNUMBER(self):
            return self.getToken(VyperParser.BINNUMBER, 0)

        def OCTNUMBER(self):
            return self.getToken(VyperParser.OCTNUMBER, 0)

        def FLOATNUMBER(self):
            return self.getToken(VyperParser.FLOATNUMBER, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = VyperParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1051
            _la = self._input.LA(1)
            if not(((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(VyperParser.NumberContext,0)


        def string(self):
            return self.getTypedRuleContext(VyperParser.StringContext,0)


        def BOOL(self):
            return self.getToken(VyperParser.BOOL, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_literal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = VyperParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72, 73, 74, 75, 76]:
                self.state = 1053
                self.number()
                pass
            elif token in [70]:
                self.state = 1054
                self.string()
                pass
            elif token in [67]:
                self.state = 1055
                self.match(VyperParser.BOOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(VyperParser.STRING, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_string

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = VyperParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1058
            self.match(VyperParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[28] = self.arraydef_sempred
        self._predicates[75] = self.boolor_sempred
        self._predicates[76] = self.booland_sempred
        self._predicates[78] = self.comparator_sempred
        self._predicates[79] = self.bitwiseor_sempred
        self._predicates[80] = self.bitwisexor_sempred
        self._predicates[81] = self.bitwiseand_sempred
        self._predicates[82] = self.shift_sempred
        self._predicates[83] = self.summation_sempred
        self._predicates[84] = self.product_sempred
        self._predicates[86] = self.power_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def arraydef_sempred(self, localctx:ArraydefContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def boolor_sempred(self, localctx:BoolorContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def booland_sempred(self, localctx:BoolandContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def comparator_sempred(self, localctx:ComparatorContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

    def bitwiseor_sempred(self, localctx:BitwiseorContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         

    def bitwisexor_sempred(self, localctx:BitwisexorContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def bitwiseand_sempred(self, localctx:BitwiseandContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         

    def shift_sempred(self, localctx:ShiftContext, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def summation_sempred(self, localctx:SummationContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

    def product_sempred(self, localctx:ProductContext, predIndex:int):
            if predIndex == 18:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 1)
         

    def power_sempred(self, localctx:PowerContext, predIndex:int):
            if predIndex == 21:
                return self.precpred(self._ctx, 1)
         




