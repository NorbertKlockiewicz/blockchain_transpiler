# Generated from VyperLexer.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from dist.VyperParser import VyperParser


def serializedATN():
    return [
        4,0,78,598,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,1,0,1,0,1,0,
        1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,
        1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,
        11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,
        22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,
        30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,
        35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,
        41,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,
        44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,
        45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,
        48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,
        53,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,
        58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,
        63,1,63,1,63,1,63,1,63,3,63,442,8,63,1,64,1,64,5,64,446,8,64,10,
        64,12,64,449,9,64,1,65,1,65,5,65,453,8,65,10,65,12,65,456,9,65,1,
        66,3,66,459,8,66,1,66,1,66,1,66,5,66,464,8,66,10,66,12,66,467,9,
        66,1,66,1,66,3,66,471,8,66,1,66,1,66,1,66,5,66,476,8,66,10,66,12,
        66,479,9,66,1,66,3,66,482,8,66,1,67,1,67,1,67,1,67,1,67,1,67,5,67,
        490,8,67,10,67,12,67,493,9,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,5,67,504,8,67,10,67,12,67,507,9,67,1,67,1,67,1,67,3,67,
        512,8,67,1,68,1,68,1,68,1,68,1,68,1,68,3,68,520,8,68,1,69,4,69,523,
        8,69,11,69,12,69,524,1,70,1,70,1,70,1,70,5,70,531,8,70,10,70,12,
        70,534,9,70,1,71,1,71,1,71,1,71,5,71,540,8,71,10,71,12,71,543,9,
        71,1,72,1,72,1,72,1,72,5,72,549,8,72,10,72,12,72,552,9,72,1,73,3,
        73,555,8,73,1,73,5,73,558,8,73,10,73,12,73,561,9,73,1,73,3,73,564,
        8,73,1,73,4,73,567,8,73,11,73,12,73,568,1,74,4,74,572,8,74,11,74,
        12,74,573,1,74,1,74,1,75,3,75,579,8,75,1,75,1,75,5,75,583,8,75,10,
        75,12,75,586,9,75,1,75,1,75,1,76,1,76,5,76,592,8,76,10,76,12,76,
        595,9,76,1,76,1,76,4,465,477,491,505,0,77,1,3,3,4,5,5,7,6,9,7,11,
        8,13,9,15,10,17,11,19,12,21,13,23,14,25,15,27,16,29,17,31,18,33,
        19,35,20,37,21,39,22,41,23,43,24,45,25,47,26,49,27,51,28,53,29,55,
        30,57,31,59,32,61,33,63,34,65,35,67,36,69,37,71,38,73,39,75,40,77,
        41,79,42,81,43,83,44,85,45,87,46,89,47,91,48,93,49,95,50,97,51,99,
        52,101,53,103,54,105,55,107,56,109,57,111,58,113,59,115,60,117,61,
        119,62,121,63,123,64,125,65,127,66,129,67,131,68,133,69,135,70,137,
        0,139,71,141,72,143,73,145,74,147,75,149,76,151,77,153,78,1,0,9,
        3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,
        0,48,57,97,102,1,0,48,55,1,0,48,49,2,0,43,43,45,45,1,0,46,46,2,0,
        10,10,12,13,625,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
        0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,
        0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,
        0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,
        0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,
        1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,
        0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,135,1,
        0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,
        147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,1,155,1,0,
        0,0,3,158,1,0,0,0,5,163,1,0,0,0,7,170,1,0,0,0,9,172,1,0,0,0,11,174,
        1,0,0,0,13,176,1,0,0,0,15,178,1,0,0,0,17,180,1,0,0,0,19,183,1,0,
        0,0,21,186,1,0,0,0,23,189,1,0,0,0,25,192,1,0,0,0,27,195,1,0,0,0,
        29,198,1,0,0,0,31,207,1,0,0,0,33,217,1,0,0,0,35,224,1,0,0,0,37,232,
        1,0,0,0,39,241,1,0,0,0,41,245,1,0,0,0,43,248,1,0,0,0,45,254,1,0,
        0,0,47,259,1,0,0,0,49,267,1,0,0,0,51,274,1,0,0,0,53,284,1,0,0,0,
        55,286,1,0,0,0,57,288,1,0,0,0,59,290,1,0,0,0,61,292,1,0,0,0,63,294,
        1,0,0,0,65,296,1,0,0,0,67,299,1,0,0,0,69,302,1,0,0,0,71,305,1,0,
        0,0,73,310,1,0,0,0,75,316,1,0,0,0,77,325,1,0,0,0,79,329,1,0,0,0,
        81,336,1,0,0,0,83,342,1,0,0,0,85,349,1,0,0,0,87,352,1,0,0,0,89,357,
        1,0,0,0,91,362,1,0,0,0,93,374,1,0,0,0,95,378,1,0,0,0,97,381,1,0,
        0,0,99,385,1,0,0,0,101,388,1,0,0,0,103,392,1,0,0,0,105,394,1,0,0,
        0,107,396,1,0,0,0,109,398,1,0,0,0,111,400,1,0,0,0,113,403,1,0,0,
        0,115,406,1,0,0,0,117,409,1,0,0,0,119,412,1,0,0,0,121,414,1,0,0,
        0,123,416,1,0,0,0,125,422,1,0,0,0,127,441,1,0,0,0,129,443,1,0,0,
        0,131,450,1,0,0,0,133,481,1,0,0,0,135,511,1,0,0,0,137,519,1,0,0,
        0,139,522,1,0,0,0,141,526,1,0,0,0,143,535,1,0,0,0,145,544,1,0,0,
        0,147,554,1,0,0,0,149,571,1,0,0,0,151,578,1,0,0,0,153,589,1,0,0,
        0,155,156,5,97,0,0,156,157,5,115,0,0,157,2,1,0,0,0,158,159,5,102,
        0,0,159,160,5,114,0,0,160,161,5,111,0,0,161,162,5,109,0,0,162,4,
        1,0,0,0,163,164,5,105,0,0,164,165,5,109,0,0,165,166,5,112,0,0,166,
        167,5,111,0,0,167,168,5,114,0,0,168,169,5,116,0,0,169,6,1,0,0,0,
        170,171,5,46,0,0,171,8,1,0,0,0,172,173,5,44,0,0,173,10,1,0,0,0,174,
        175,5,58,0,0,175,12,1,0,0,0,176,177,5,61,0,0,177,14,1,0,0,0,178,
        179,5,64,0,0,179,16,1,0,0,0,180,181,5,40,0,0,181,182,6,8,0,0,182,
        18,1,0,0,0,183,184,5,41,0,0,184,185,6,9,1,0,185,20,1,0,0,0,186,187,
        5,91,0,0,187,188,6,10,2,0,188,22,1,0,0,0,189,190,5,93,0,0,190,191,
        6,11,3,0,191,24,1,0,0,0,192,193,5,123,0,0,193,194,6,12,4,0,194,26,
        1,0,0,0,195,196,5,125,0,0,196,197,6,13,5,0,197,28,1,0,0,0,198,199,
        5,99,0,0,199,200,5,111,0,0,200,201,5,110,0,0,201,202,5,115,0,0,202,
        203,5,116,0,0,203,204,5,97,0,0,204,205,5,110,0,0,205,206,5,116,0,
        0,206,30,1,0,0,0,207,208,5,105,0,0,208,209,5,109,0,0,209,210,5,109,
        0,0,210,211,5,117,0,0,211,212,5,116,0,0,212,213,5,97,0,0,213,214,
        5,98,0,0,214,215,5,108,0,0,215,216,5,101,0,0,216,32,1,0,0,0,217,
        218,5,112,0,0,218,219,5,117,0,0,219,220,5,98,0,0,220,221,5,108,0,
        0,221,222,5,105,0,0,222,223,5,99,0,0,223,34,1,0,0,0,224,225,5,105,
        0,0,225,226,5,110,0,0,226,227,5,100,0,0,227,228,5,101,0,0,228,229,
        5,120,0,0,229,230,5,101,0,0,230,231,5,100,0,0,231,36,1,0,0,0,232,
        233,5,68,0,0,233,234,5,121,0,0,234,235,5,110,0,0,235,236,5,65,0,
        0,236,237,5,114,0,0,237,238,5,114,0,0,238,239,5,97,0,0,239,240,5,
        121,0,0,240,38,1,0,0,0,241,242,5,100,0,0,242,243,5,101,0,0,243,244,
        5,102,0,0,244,40,1,0,0,0,245,246,5,45,0,0,246,247,5,62,0,0,247,42,
        1,0,0,0,248,249,5,101,0,0,249,250,5,118,0,0,250,251,5,101,0,0,251,
        252,5,110,0,0,252,253,5,116,0,0,253,44,1,0,0,0,254,255,5,101,0,0,
        255,256,5,110,0,0,256,257,5,117,0,0,257,258,5,109,0,0,258,46,1,0,
        0,0,259,260,5,72,0,0,260,261,5,97,0,0,261,262,5,115,0,0,262,263,
        5,104,0,0,263,264,5,77,0,0,264,265,5,97,0,0,265,266,5,112,0,0,266,
        48,1,0,0,0,267,268,5,115,0,0,268,269,5,116,0,0,269,270,5,114,0,0,
        270,271,5,117,0,0,271,272,5,99,0,0,272,273,5,116,0,0,273,50,1,0,
        0,0,274,275,5,105,0,0,275,276,5,110,0,0,276,277,5,116,0,0,277,278,
        5,101,0,0,278,279,5,114,0,0,279,280,5,102,0,0,280,281,5,97,0,0,281,
        282,5,99,0,0,282,283,5,101,0,0,283,52,1,0,0,0,284,285,5,95,0,0,285,
        54,1,0,0,0,286,287,5,43,0,0,287,56,1,0,0,0,288,289,5,45,0,0,289,
        58,1,0,0,0,290,291,5,42,0,0,291,60,1,0,0,0,292,293,5,47,0,0,293,
        62,1,0,0,0,294,295,5,37,0,0,295,64,1,0,0,0,296,297,5,42,0,0,297,
        298,5,42,0,0,298,66,1,0,0,0,299,300,5,60,0,0,300,301,5,60,0,0,301,
        68,1,0,0,0,302,303,5,62,0,0,303,304,5,62,0,0,304,70,1,0,0,0,305,
        306,5,112,0,0,306,307,5,97,0,0,307,308,5,115,0,0,308,309,5,115,0,
        0,309,72,1,0,0,0,310,311,5,98,0,0,311,312,5,114,0,0,312,313,5,101,
        0,0,313,314,5,97,0,0,314,315,5,107,0,0,315,74,1,0,0,0,316,317,5,
        99,0,0,317,318,5,111,0,0,318,319,5,110,0,0,319,320,5,116,0,0,320,
        321,5,105,0,0,321,322,5,110,0,0,322,323,5,117,0,0,323,324,5,101,
        0,0,324,76,1,0,0,0,325,326,5,108,0,0,326,327,5,111,0,0,327,328,5,
        103,0,0,328,78,1,0,0,0,329,330,5,114,0,0,330,331,5,101,0,0,331,332,
        5,116,0,0,332,333,5,117,0,0,333,334,5,114,0,0,334,335,5,110,0,0,
        335,80,1,0,0,0,336,337,5,114,0,0,337,338,5,97,0,0,338,339,5,105,
        0,0,339,340,5,115,0,0,340,341,5,101,0,0,341,82,1,0,0,0,342,343,5,
        97,0,0,343,344,5,115,0,0,344,345,5,115,0,0,345,346,5,101,0,0,346,
        347,5,114,0,0,347,348,5,116,0,0,348,84,1,0,0,0,349,350,5,105,0,0,
        350,351,5,102,0,0,351,86,1,0,0,0,352,353,5,101,0,0,353,354,5,108,
        0,0,354,355,5,115,0,0,355,356,5,101,0,0,356,88,1,0,0,0,357,358,5,
        101,0,0,358,359,5,108,0,0,359,360,5,105,0,0,360,361,5,102,0,0,361,
        90,1,0,0,0,362,363,5,85,0,0,363,364,5,78,0,0,364,365,5,82,0,0,365,
        366,5,69,0,0,366,367,5,65,0,0,367,368,5,67,0,0,368,369,5,72,0,0,
        369,370,5,65,0,0,370,371,5,66,0,0,371,372,5,76,0,0,372,373,5,69,
        0,0,373,92,1,0,0,0,374,375,5,102,0,0,375,376,5,111,0,0,376,377,5,
        114,0,0,377,94,1,0,0,0,378,379,5,105,0,0,379,380,5,110,0,0,380,96,
        1,0,0,0,381,382,5,97,0,0,382,383,5,110,0,0,383,384,5,100,0,0,384,
        98,1,0,0,0,385,386,5,111,0,0,386,387,5,114,0,0,387,100,1,0,0,0,388,
        389,5,110,0,0,389,390,5,111,0,0,390,391,5,116,0,0,391,102,1,0,0,
        0,392,393,5,126,0,0,393,104,1,0,0,0,394,395,5,38,0,0,395,106,1,0,
        0,0,396,397,5,124,0,0,397,108,1,0,0,0,398,399,5,94,0,0,399,110,1,
        0,0,0,400,401,5,61,0,0,401,402,5,61,0,0,402,112,1,0,0,0,403,404,
        5,33,0,0,404,405,5,61,0,0,405,114,1,0,0,0,406,407,5,60,0,0,407,408,
        5,61,0,0,408,116,1,0,0,0,409,410,5,62,0,0,410,411,5,61,0,0,411,118,
        1,0,0,0,412,413,5,60,0,0,413,120,1,0,0,0,414,415,5,62,0,0,415,122,
        1,0,0,0,416,417,5,101,0,0,417,418,5,109,0,0,418,419,5,112,0,0,419,
        420,5,116,0,0,420,421,5,121,0,0,421,124,1,0,0,0,422,423,5,97,0,0,
        423,424,5,98,0,0,424,425,5,105,0,0,425,426,5,100,0,0,426,427,5,101,
        0,0,427,428,5,99,0,0,428,429,5,111,0,0,429,430,5,100,0,0,430,431,
        5,101,0,0,431,126,1,0,0,0,432,433,5,84,0,0,433,434,5,114,0,0,434,
        435,5,117,0,0,435,442,5,101,0,0,436,437,5,70,0,0,437,438,5,97,0,
        0,438,439,5,108,0,0,439,440,5,115,0,0,440,442,5,101,0,0,441,432,
        1,0,0,0,441,436,1,0,0,0,442,128,1,0,0,0,443,447,7,0,0,0,444,446,
        7,1,0,0,445,444,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,448,
        1,0,0,0,448,130,1,0,0,0,449,447,1,0,0,0,450,454,7,0,0,0,451,453,
        7,1,0,0,452,451,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,454,455,
        1,0,0,0,455,132,1,0,0,0,456,454,1,0,0,0,457,459,5,98,0,0,458,457,
        1,0,0,0,458,459,1,0,0,0,459,460,1,0,0,0,460,465,5,34,0,0,461,464,
        3,137,68,0,462,464,9,0,0,0,463,461,1,0,0,0,463,462,1,0,0,0,464,467,
        1,0,0,0,465,466,1,0,0,0,465,463,1,0,0,0,466,468,1,0,0,0,467,465,
        1,0,0,0,468,482,5,34,0,0,469,471,5,98,0,0,470,469,1,0,0,0,470,471,
        1,0,0,0,471,472,1,0,0,0,472,477,5,39,0,0,473,476,3,137,68,0,474,
        476,9,0,0,0,475,473,1,0,0,0,475,474,1,0,0,0,476,479,1,0,0,0,477,
        478,1,0,0,0,477,475,1,0,0,0,478,480,1,0,0,0,479,477,1,0,0,0,480,
        482,5,39,0,0,481,458,1,0,0,0,481,470,1,0,0,0,482,134,1,0,0,0,483,
        484,5,34,0,0,484,485,5,34,0,0,485,486,5,34,0,0,486,491,1,0,0,0,487,
        490,3,137,68,0,488,490,9,0,0,0,489,487,1,0,0,0,489,488,1,0,0,0,490,
        493,1,0,0,0,491,492,1,0,0,0,491,489,1,0,0,0,492,494,1,0,0,0,493,
        491,1,0,0,0,494,495,5,34,0,0,495,496,5,34,0,0,496,512,5,34,0,0,497,
        498,5,39,0,0,498,499,5,39,0,0,499,500,5,39,0,0,500,505,1,0,0,0,501,
        504,3,137,68,0,502,504,9,0,0,0,503,501,1,0,0,0,503,502,1,0,0,0,504,
        507,1,0,0,0,505,506,1,0,0,0,505,503,1,0,0,0,506,508,1,0,0,0,507,
        505,1,0,0,0,508,509,5,39,0,0,509,510,5,39,0,0,510,512,5,39,0,0,511,
        483,1,0,0,0,511,497,1,0,0,0,512,136,1,0,0,0,513,514,5,92,0,0,514,
        520,5,92,0,0,515,516,5,92,0,0,516,520,5,34,0,0,517,518,5,92,0,0,
        518,520,5,39,0,0,519,513,1,0,0,0,519,515,1,0,0,0,519,517,1,0,0,0,
        520,138,1,0,0,0,521,523,7,2,0,0,522,521,1,0,0,0,523,524,1,0,0,0,
        524,522,1,0,0,0,524,525,1,0,0,0,525,140,1,0,0,0,526,527,5,48,0,0,
        527,528,5,120,0,0,528,532,1,0,0,0,529,531,7,3,0,0,530,529,1,0,0,
        0,531,534,1,0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,142,1,0,0,
        0,534,532,1,0,0,0,535,536,5,48,0,0,536,537,5,111,0,0,537,541,1,0,
        0,0,538,540,7,4,0,0,539,538,1,0,0,0,540,543,1,0,0,0,541,539,1,0,
        0,0,541,542,1,0,0,0,542,144,1,0,0,0,543,541,1,0,0,0,544,545,5,48,
        0,0,545,546,5,98,0,0,546,550,1,0,0,0,547,549,7,5,0,0,548,547,1,0,
        0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,146,1,0,
        0,0,552,550,1,0,0,0,553,555,7,6,0,0,554,553,1,0,0,0,554,555,1,0,
        0,0,555,563,1,0,0,0,556,558,7,2,0,0,557,556,1,0,0,0,558,561,1,0,
        0,0,559,557,1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,559,1,0,
        0,0,562,564,7,7,0,0,563,559,1,0,0,0,563,564,1,0,0,0,564,566,1,0,
        0,0,565,567,7,2,0,0,566,565,1,0,0,0,567,568,1,0,0,0,568,566,1,0,
        0,0,568,569,1,0,0,0,569,148,1,0,0,0,570,572,5,32,0,0,571,570,1,0,
        0,0,572,573,1,0,0,0,573,571,1,0,0,0,573,574,1,0,0,0,574,575,1,0,
        0,0,575,576,6,74,6,0,576,150,1,0,0,0,577,579,5,13,0,0,578,577,1,
        0,0,0,578,579,1,0,0,0,579,580,1,0,0,0,580,584,5,10,0,0,581,583,5,
        32,0,0,582,581,1,0,0,0,583,586,1,0,0,0,584,582,1,0,0,0,584,585,1,
        0,0,0,585,587,1,0,0,0,586,584,1,0,0,0,587,588,6,75,7,0,588,152,1,
        0,0,0,589,593,5,35,0,0,590,592,8,8,0,0,591,590,1,0,0,0,592,595,1,
        0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,596,1,0,0,0,595,593,1,
        0,0,0,596,597,6,76,6,0,597,154,1,0,0,0,29,0,441,447,454,458,463,
        465,470,475,477,481,489,491,503,505,511,519,524,532,541,550,554,
        559,563,568,573,578,584,593,8,1,8,0,1,9,1,1,10,2,1,11,3,1,12,4,1,
        13,5,6,0,0,1,75,6
    ]

class VyperLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INDENT = 1
    DEDENT = 2
    AS = 3
    FROM = 4
    IMPORT = 5
    DOT = 6
    COMMA = 7
    COLON = 8
    ASSIGN = 9
    AT = 10
    LPAREN = 11
    RPAREN = 12
    LSQUARE = 13
    RSQUARE = 14
    LCURLY = 15
    RCURLY = 16
    CONSTANT = 17
    IMMUTABLE = 18
    PUBLIC = 19
    INDEXED = 20
    DYNARRAY = 21
    FUNCDECL = 22
    RETURNTYPE = 23
    EVENTDECL = 24
    ENUMDECL = 25
    MAP = 26
    STRUCTDECL = 27
    INTERFACEDECL = 28
    SKIPASSIGN = 29
    ADD = 30
    SUB = 31
    MUL = 32
    DIV = 33
    MOD = 34
    POW = 35
    SHL = 36
    SHR = 37
    PASS = 38
    Break = 39
    CONTINUE = 40
    LOG = 41
    RETURN = 42
    RAISE = 43
    ASSERT = 44
    IF = 45
    ELSE = 46
    ELIF = 47
    UNREACHABLE = 48
    FOR = 49
    IN = 50
    AND = 51
    OR = 52
    NOT = 53
    NEG = 54
    BITAND = 55
    BITOR = 56
    BITXOR = 57
    EQ = 58
    NE = 59
    LE = 60
    GE = 61
    LT = 62
    GT = 63
    EMPTY = 64
    ABIDECODE = 65
    BOOL = 66
    NAME = 67
    TYPE = 68
    STRING = 69
    DOCSTRING = 70
    DECNUMBER = 71
    HEXNUMBER = 72
    OCTNUMBER = 73
    BINNUMBER = 74
    FLOATNUMBER = 75
    SPACES = 76
    NEWLINE = 77
    COMMENT = 78

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'as'", "'from'", "'import'", "'.'", "','", "':'", "'='", "'@'", 
            "'('", "')'", "'['", "']'", "'{'", "'}'", "'constant'", "'immutable'", 
            "'public'", "'indexed'", "'DynArray'", "'def'", "'->'", "'event'", 
            "'enum'", "'HashMap'", "'struct'", "'interface'", "'_'", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'**'", "'<<'", "'>>'", "'pass'", 
            "'break'", "'continue'", "'log'", "'return'", "'raise'", "'assert'", 
            "'if'", "'else'", "'elif'", "'UNREACHABLE'", "'for'", "'in'", 
            "'and'", "'or'", "'not'", "'~'", "'&'", "'|'", "'^'", "'=='", 
            "'!='", "'<='", "'>='", "'<'", "'>'", "'empty'", "'abidecode'" ]

    symbolicNames = [ "<INVALID>",
            "INDENT", "DEDENT", "AS", "FROM", "IMPORT", "DOT", "COMMA", 
            "COLON", "ASSIGN", "AT", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", 
            "LCURLY", "RCURLY", "CONSTANT", "IMMUTABLE", "PUBLIC", "INDEXED", 
            "DYNARRAY", "FUNCDECL", "RETURNTYPE", "EVENTDECL", "ENUMDECL", 
            "MAP", "STRUCTDECL", "INTERFACEDECL", "SKIPASSIGN", "ADD", "SUB", 
            "MUL", "DIV", "MOD", "POW", "SHL", "SHR", "PASS", "Break", "CONTINUE", 
            "LOG", "RETURN", "RAISE", "ASSERT", "IF", "ELSE", "ELIF", "UNREACHABLE", 
            "FOR", "IN", "AND", "OR", "NOT", "NEG", "BITAND", "BITOR", "BITXOR", 
            "EQ", "NE", "LE", "GE", "LT", "GT", "EMPTY", "ABIDECODE", "BOOL", 
            "NAME", "TYPE", "STRING", "DOCSTRING", "DECNUMBER", "HEXNUMBER", 
            "OCTNUMBER", "BINNUMBER", "FLOATNUMBER", "SPACES", "NEWLINE", 
            "COMMENT" ]

    ruleNames = [ "AS", "FROM", "IMPORT", "DOT", "COMMA", "COLON", "ASSIGN", 
                  "AT", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "LCURLY", 
                  "RCURLY", "CONSTANT", "IMMUTABLE", "PUBLIC", "INDEXED", 
                  "DYNARRAY", "FUNCDECL", "RETURNTYPE", "EVENTDECL", "ENUMDECL", 
                  "MAP", "STRUCTDECL", "INTERFACEDECL", "SKIPASSIGN", "ADD", 
                  "SUB", "MUL", "DIV", "MOD", "POW", "SHL", "SHR", "PASS", 
                  "Break", "CONTINUE", "LOG", "RETURN", "RAISE", "ASSERT", 
                  "IF", "ELSE", "ELIF", "UNREACHABLE", "FOR", "IN", "AND", 
                  "OR", "NOT", "NEG", "BITAND", "BITOR", "BITXOR", "EQ", 
                  "NE", "LE", "GE", "LT", "GT", "EMPTY", "ABIDECODE", "BOOL", 
                  "NAME", "TYPE", "STRING", "DOCSTRING", "ESC", "DECNUMBER", 
                  "HEXNUMBER", "OCTNUMBER", "BINNUMBER", "FLOATNUMBER", 
                  "SPACES", "NEWLINE", "COMMENT" ]

    grammarFileName = "VyperLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    ignore = False
    bracketCount = 0

    def openBracket(self):
        self.bracketCount += 1
        VyperLexer.ignore=True

    def closeBracket(self):
        self.bracketCount -= 1
        if self.bracketCount == 0:
            VyperLexer.ignore=False

    class MyCoolDenter(DenterHelper):
        def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
            super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
            self.lexer: VyperLexer = lexer

        def pull_token(self):
            return super(VyperLexer, self.lexer).nextToken()

    denter = None

    def nextToken(self):
        if not self.denter:
            self.denter = self.MyCoolDenter(self, self.NEWLINE, VyperParser.INDENT, VyperParser.DEDENT, False)
        return self.denter.next_token()


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[8] = self.LPAREN_action 
            actions[9] = self.RPAREN_action 
            actions[10] = self.LSQUARE_action 
            actions[11] = self.RSQUARE_action 
            actions[12] = self.LCURLY_action 
            actions[13] = self.RCURLY_action 
            actions[75] = self.NEWLINE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def LPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.openBracket()
     

    def RPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.closeBracket()
     

    def LSQUARE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.openBracket()
     

    def RSQUARE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.closeBracket()
     

    def LCURLY_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            self.openBracket()
     

    def RCURLY_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
            self.closeBracket()
     

    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:

                if VyperLexer.ignore:
                    self.skip()

     


