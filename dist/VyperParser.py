# Generated from VyperParser.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,78,1012,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,198,8,
        0,10,0,12,0,201,9,0,1,0,1,0,1,1,1,1,1,2,1,2,5,2,209,8,2,10,2,12,
        2,212,9,2,1,2,1,2,3,2,216,8,2,1,2,1,2,1,2,1,2,1,2,3,2,223,8,2,3,
        2,225,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,233,8,2,1,3,1,3,1,3,5,3,238,
        8,3,10,3,12,3,241,9,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,3,5,250,8,5,1,
        5,1,5,1,5,3,5,255,8,5,5,5,257,8,5,10,5,12,5,260,9,5,1,5,3,5,263,
        8,5,1,6,1,6,5,6,267,8,6,10,6,12,6,270,9,6,1,6,1,6,4,6,274,8,6,11,
        6,12,6,275,3,6,278,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,289,
        8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,298,8,8,1,9,1,9,1,9,1,9,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,3,11,313,8,11,1,11,3,11,
        316,8,11,1,12,1,12,1,12,1,12,3,12,322,8,12,1,12,3,12,325,8,12,1,
        12,1,12,1,13,4,13,330,8,13,11,13,12,13,331,1,14,1,14,1,14,1,14,1,
        14,3,14,339,8,14,1,15,3,15,342,8,15,1,15,1,15,1,15,3,15,347,8,15,
        1,15,3,15,350,8,15,5,15,352,8,15,10,15,12,15,355,9,15,1,15,3,15,
        358,8,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,3,17,367,8,17,1,17,1,
        17,3,17,371,8,17,1,18,3,18,374,8,18,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,3,19,383,8,19,3,19,385,8,19,1,19,1,19,3,19,389,8,19,4,19,391,
        8,19,11,19,12,19,392,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,22,1,22,1,22,3,22,411,8,22,1,22,3,22,414,8,
        22,4,22,416,8,22,11,22,12,22,417,1,22,1,22,1,23,1,23,1,23,1,23,1,
        23,3,23,427,8,23,1,24,1,24,1,25,1,25,1,25,3,25,434,8,25,4,25,436,
        8,25,11,25,12,25,437,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,
        1,27,1,27,1,27,1,27,3,27,453,8,27,1,27,1,27,5,27,457,8,27,10,27,
        12,27,460,9,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,30,1,30,1,30,3,30,476,8,30,1,31,1,31,1,31,1,31,5,31,482,8,
        31,10,31,12,31,485,9,31,1,31,3,31,488,8,31,1,31,1,31,1,32,1,32,1,
        32,1,32,3,32,496,8,32,1,33,1,33,1,33,1,33,3,33,502,8,33,1,33,1,33,
        1,33,1,33,1,34,1,34,1,34,1,34,1,34,3,34,513,8,34,1,35,1,35,1,35,
        1,35,1,36,1,36,1,36,1,36,1,36,1,36,3,36,525,8,36,4,36,527,8,36,11,
        36,12,36,528,1,36,1,36,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,
        39,1,39,1,39,1,39,3,39,545,8,39,4,39,547,8,39,11,39,12,39,548,1,
        39,1,39,1,40,1,40,3,40,555,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,40,3,40,568,8,40,1,40,3,40,571,8,40,1,40,3,40,
        574,8,40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,3,43,583,8,43,1,44,1,
        44,3,44,587,8,44,1,44,1,44,1,44,3,44,592,8,44,4,44,594,8,44,11,44,
        12,44,595,1,45,1,45,1,45,1,45,1,45,1,45,3,45,604,8,45,1,45,1,45,
        1,45,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,49,1,49,1,50,
        1,50,1,51,1,51,1,51,1,51,3,51,626,8,51,1,51,1,51,1,52,1,52,1,52,
        1,52,5,52,634,8,52,10,52,12,52,637,9,52,3,52,639,8,52,1,53,1,53,
        1,53,1,53,1,53,3,53,646,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,3,54,660,8,54,1,55,1,55,1,55,1,55,1,56,
        1,56,1,57,1,57,1,57,1,57,5,57,672,8,57,10,57,12,57,675,9,57,1,57,
        1,57,1,57,3,57,680,8,57,1,58,1,58,1,58,3,58,685,8,58,1,59,1,59,1,
        60,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,3,61,698,8,61,1,62,1,
        62,1,62,1,62,1,62,3,62,705,8,62,1,62,1,62,1,62,5,62,710,8,62,10,
        62,12,62,713,9,62,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,65,1,65,3,
        65,724,8,65,1,65,1,65,1,66,1,66,1,67,1,67,1,67,1,67,1,68,1,68,3,
        68,736,8,68,1,69,1,69,1,69,5,69,741,8,69,10,69,12,69,744,9,69,1,
        69,3,69,747,8,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,4,70,756,8,70,
        11,70,12,70,757,1,70,3,70,761,8,70,1,70,3,70,764,8,70,1,70,1,70,
        3,70,768,8,70,1,71,1,71,1,71,1,71,1,71,1,71,5,71,776,8,71,10,71,
        12,71,779,9,71,1,71,3,71,782,8,71,1,71,1,71,3,71,786,8,71,1,72,1,
        72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,5,72,799,8,72,10,
        72,12,72,802,9,72,1,72,3,72,805,8,72,1,72,1,72,3,72,809,8,72,1,73,
        1,73,1,74,1,74,1,74,1,74,1,74,1,74,5,74,819,8,74,10,74,12,74,822,
        9,74,1,75,1,75,1,75,1,75,1,75,1,75,5,75,830,8,75,10,75,12,75,833,
        9,75,1,76,1,76,1,76,3,76,838,8,76,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,5,77,868,8,77,10,77,
        12,77,871,9,77,1,78,1,78,1,78,1,78,1,78,1,78,5,78,879,8,78,10,78,
        12,78,882,9,78,1,79,1,79,1,79,1,79,1,79,1,79,5,79,890,8,79,10,79,
        12,79,893,9,79,1,80,1,80,1,80,1,80,1,80,1,80,5,80,901,8,80,10,80,
        12,80,904,9,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,5,81,
        915,8,81,10,81,12,81,918,9,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,5,82,929,8,82,10,82,12,82,932,9,82,1,83,1,83,1,83,1,83,
        1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,5,83,946,8,83,10,83,12,83,
        949,9,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,958,8,84,1,85,1,
        85,1,85,1,85,1,85,1,85,5,85,966,8,85,10,85,12,85,969,9,85,1,86,1,
        86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,5,87,983,8,
        87,10,87,12,87,986,9,87,1,87,1,87,1,88,1,88,3,88,992,8,88,1,89,1,
        89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,1003,8,89,1,90,1,90,1,
        91,1,91,1,91,3,91,1010,8,91,1,91,0,11,54,148,150,154,156,158,160,
        162,164,166,170,92,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
        34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,
        78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
        116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
        148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
        180,182,0,3,2,0,67,67,71,71,3,0,30,37,51,52,55,57,1,0,71,75,1073,
        0,199,1,0,0,0,2,204,1,0,0,0,4,232,1,0,0,0,6,239,1,0,0,0,8,244,1,
        0,0,0,10,247,1,0,0,0,12,264,1,0,0,0,14,279,1,0,0,0,16,290,1,0,0,
        0,18,299,1,0,0,0,20,303,1,0,0,0,22,312,1,0,0,0,24,317,1,0,0,0,26,
        329,1,0,0,0,28,333,1,0,0,0,30,341,1,0,0,0,32,359,1,0,0,0,34,362,
        1,0,0,0,36,373,1,0,0,0,38,379,1,0,0,0,40,396,1,0,0,0,42,400,1,0,
        0,0,44,407,1,0,0,0,46,421,1,0,0,0,48,428,1,0,0,0,50,430,1,0,0,0,
        52,441,1,0,0,0,54,452,1,0,0,0,56,461,1,0,0,0,58,465,1,0,0,0,60,475,
        1,0,0,0,62,477,1,0,0,0,64,495,1,0,0,0,66,497,1,0,0,0,68,512,1,0,
        0,0,70,514,1,0,0,0,72,518,1,0,0,0,74,532,1,0,0,0,76,534,1,0,0,0,
        78,538,1,0,0,0,80,573,1,0,0,0,82,575,1,0,0,0,84,577,1,0,0,0,86,579,
        1,0,0,0,88,586,1,0,0,0,90,603,1,0,0,0,92,608,1,0,0,0,94,610,1,0,
        0,0,96,615,1,0,0,0,98,617,1,0,0,0,100,619,1,0,0,0,102,621,1,0,0,
        0,104,629,1,0,0,0,106,645,1,0,0,0,108,659,1,0,0,0,110,661,1,0,0,
        0,112,665,1,0,0,0,114,667,1,0,0,0,116,681,1,0,0,0,118,686,1,0,0,
        0,120,688,1,0,0,0,122,697,1,0,0,0,124,704,1,0,0,0,126,714,1,0,0,
        0,128,717,1,0,0,0,130,721,1,0,0,0,132,727,1,0,0,0,134,729,1,0,0,
        0,136,735,1,0,0,0,138,737,1,0,0,0,140,767,1,0,0,0,142,785,1,0,0,
        0,144,808,1,0,0,0,146,810,1,0,0,0,148,812,1,0,0,0,150,823,1,0,0,
        0,152,837,1,0,0,0,154,839,1,0,0,0,156,872,1,0,0,0,158,883,1,0,0,
        0,160,894,1,0,0,0,162,905,1,0,0,0,164,919,1,0,0,0,166,933,1,0,0,
        0,168,957,1,0,0,0,170,959,1,0,0,0,172,970,1,0,0,0,174,975,1,0,0,
        0,176,991,1,0,0,0,178,1002,1,0,0,0,180,1004,1,0,0,0,182,1009,1,0,
        0,0,184,198,5,69,0,0,185,198,3,82,41,0,186,198,3,84,42,0,187,198,
        3,4,2,0,188,198,3,72,36,0,189,198,3,78,39,0,190,198,3,14,7,0,191,
        198,3,22,11,0,192,198,3,52,26,0,193,198,3,46,23,0,194,198,3,36,18,
        0,195,198,3,16,8,0,196,198,5,77,0,0,197,184,1,0,0,0,197,185,1,0,
        0,0,197,186,1,0,0,0,197,187,1,0,0,0,197,188,1,0,0,0,197,189,1,0,
        0,0,197,190,1,0,0,0,197,191,1,0,0,0,197,192,1,0,0,0,197,193,1,0,
        0,0,197,194,1,0,0,0,197,195,1,0,0,0,197,196,1,0,0,0,198,201,1,0,
        0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,202,1,0,0,0,201,199,1,0,
        0,0,202,203,5,0,0,1,203,1,1,0,0,0,204,205,5,67,0,0,205,3,1,0,0,0,
        206,210,5,5,0,0,207,209,5,6,0,0,208,207,1,0,0,0,209,212,1,0,0,0,
        210,208,1,0,0,0,210,211,1,0,0,0,211,213,1,0,0,0,212,210,1,0,0,0,
        213,215,3,6,3,0,214,216,3,8,4,0,215,214,1,0,0,0,215,216,1,0,0,0,
        216,233,1,0,0,0,217,218,3,12,6,0,218,224,5,5,0,0,219,225,5,32,0,
        0,220,222,3,2,1,0,221,223,3,8,4,0,222,221,1,0,0,0,222,223,1,0,0,
        0,223,225,1,0,0,0,224,219,1,0,0,0,224,220,1,0,0,0,225,233,1,0,0,
        0,226,227,3,12,6,0,227,228,5,5,0,0,228,229,5,11,0,0,229,230,3,10,
        5,0,230,231,5,12,0,0,231,233,1,0,0,0,232,206,1,0,0,0,232,217,1,0,
        0,0,232,226,1,0,0,0,233,5,1,0,0,0,234,235,3,2,1,0,235,236,5,6,0,
        0,236,238,1,0,0,0,237,234,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,
        0,239,240,1,0,0,0,240,242,1,0,0,0,241,239,1,0,0,0,242,243,3,2,1,
        0,243,7,1,0,0,0,244,245,5,3,0,0,245,246,5,67,0,0,246,9,1,0,0,0,247,
        249,3,2,1,0,248,250,3,8,4,0,249,248,1,0,0,0,249,250,1,0,0,0,250,
        258,1,0,0,0,251,252,5,7,0,0,252,254,3,2,1,0,253,255,3,8,4,0,254,
        253,1,0,0,0,254,255,1,0,0,0,255,257,1,0,0,0,256,251,1,0,0,0,257,
        260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,0,0,259,262,1,0,0,0,260,
        258,1,0,0,0,261,263,5,7,0,0,262,261,1,0,0,0,262,263,1,0,0,0,263,
        11,1,0,0,0,264,277,5,4,0,0,265,267,5,6,0,0,266,265,1,0,0,0,267,270,
        1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,268,
        1,0,0,0,271,278,3,6,3,0,272,274,5,6,0,0,273,272,1,0,0,0,274,275,
        1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,278,1,0,0,0,277,268,
        1,0,0,0,277,273,1,0,0,0,278,13,1,0,0,0,279,280,5,67,0,0,280,281,
        5,8,0,0,281,282,5,17,0,0,282,283,5,11,0,0,283,284,3,68,34,0,284,
        285,5,12,0,0,285,286,5,9,0,0,286,288,3,122,61,0,287,289,5,77,0,0,
        288,287,1,0,0,0,288,289,1,0,0,0,289,15,1,0,0,0,290,291,5,67,0,0,
        291,292,5,8,0,0,292,293,5,18,0,0,293,294,5,11,0,0,294,295,3,68,34,
        0,295,297,5,12,0,0,296,298,5,77,0,0,297,296,1,0,0,0,297,298,1,0,
        0,0,298,17,1,0,0,0,299,300,5,67,0,0,300,301,5,8,0,0,301,302,3,68,
        34,0,302,19,1,0,0,0,303,304,5,67,0,0,304,305,5,8,0,0,305,306,5,19,
        0,0,306,307,5,11,0,0,307,308,3,68,34,0,308,309,5,12,0,0,309,21,1,
        0,0,0,310,313,3,18,9,0,311,313,3,20,10,0,312,310,1,0,0,0,312,311,
        1,0,0,0,313,315,1,0,0,0,314,316,5,77,0,0,315,314,1,0,0,0,315,316,
        1,0,0,0,316,23,1,0,0,0,317,318,5,10,0,0,318,324,5,67,0,0,319,321,
        5,11,0,0,320,322,3,138,69,0,321,320,1,0,0,0,321,322,1,0,0,0,322,
        323,1,0,0,0,323,325,5,12,0,0,324,319,1,0,0,0,324,325,1,0,0,0,325,
        326,1,0,0,0,326,327,5,77,0,0,327,25,1,0,0,0,328,330,3,24,12,0,329,
        328,1,0,0,0,330,331,1,0,0,0,331,329,1,0,0,0,331,332,1,0,0,0,332,
        27,1,0,0,0,333,334,5,67,0,0,334,335,5,8,0,0,335,338,3,68,34,0,336,
        337,5,9,0,0,337,339,3,122,61,0,338,336,1,0,0,0,338,339,1,0,0,0,339,
        29,1,0,0,0,340,342,5,1,0,0,341,340,1,0,0,0,341,342,1,0,0,0,342,343,
        1,0,0,0,343,353,3,28,14,0,344,346,5,7,0,0,345,347,5,77,0,0,346,345,
        1,0,0,0,346,347,1,0,0,0,347,349,1,0,0,0,348,350,3,28,14,0,349,348,
        1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,344,1,0,0,0,352,355,
        1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,357,1,0,0,0,355,353,
        1,0,0,0,356,358,5,2,0,0,357,356,1,0,0,0,357,358,1,0,0,0,358,31,1,
        0,0,0,359,360,5,23,0,0,360,361,3,68,34,0,361,33,1,0,0,0,362,363,
        5,22,0,0,363,364,5,67,0,0,364,366,5,11,0,0,365,367,3,30,15,0,366,
        365,1,0,0,0,366,367,1,0,0,0,367,368,1,0,0,0,368,370,5,12,0,0,369,
        371,3,32,16,0,370,369,1,0,0,0,370,371,1,0,0,0,371,35,1,0,0,0,372,
        374,3,26,13,0,373,372,1,0,0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,
        376,3,34,17,0,376,377,5,8,0,0,377,378,3,38,19,0,378,37,1,0,0,0,379,
        384,5,1,0,0,380,382,5,70,0,0,381,383,5,77,0,0,382,381,1,0,0,0,382,
        383,1,0,0,0,383,385,1,0,0,0,384,380,1,0,0,0,384,385,1,0,0,0,385,
        390,1,0,0,0,386,388,3,80,40,0,387,389,5,77,0,0,388,387,1,0,0,0,388,
        389,1,0,0,0,389,391,1,0,0,0,390,386,1,0,0,0,391,392,1,0,0,0,392,
        390,1,0,0,0,392,393,1,0,0,0,393,394,1,0,0,0,394,395,5,2,0,0,395,
        39,1,0,0,0,396,397,5,67,0,0,397,398,5,8,0,0,398,399,3,68,34,0,399,
        41,1,0,0,0,400,401,5,67,0,0,401,402,5,8,0,0,402,403,5,20,0,0,403,
        404,5,11,0,0,404,405,3,68,34,0,405,406,5,12,0,0,406,43,1,0,0,0,407,
        415,5,1,0,0,408,411,3,40,20,0,409,411,3,42,21,0,410,408,1,0,0,0,
        410,409,1,0,0,0,411,413,1,0,0,0,412,414,5,77,0,0,413,412,1,0,0,0,
        413,414,1,0,0,0,414,416,1,0,0,0,415,410,1,0,0,0,416,417,1,0,0,0,
        417,415,1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,419,420,5,2,0,0,
        420,45,1,0,0,0,421,422,5,24,0,0,422,423,5,67,0,0,423,426,5,8,0,0,
        424,427,3,44,22,0,425,427,5,38,0,0,426,424,1,0,0,0,426,425,1,0,0,
        0,427,47,1,0,0,0,428,429,5,67,0,0,429,49,1,0,0,0,430,435,5,1,0,0,
        431,433,3,48,24,0,432,434,5,77,0,0,433,432,1,0,0,0,433,434,1,0,0,
        0,434,436,1,0,0,0,435,431,1,0,0,0,436,437,1,0,0,0,437,435,1,0,0,
        0,437,438,1,0,0,0,438,439,1,0,0,0,439,440,5,2,0,0,440,51,1,0,0,0,
        441,442,5,25,0,0,442,443,5,67,0,0,443,444,5,8,0,0,444,445,3,50,25,
        0,445,53,1,0,0,0,446,447,6,27,-1,0,447,448,5,67,0,0,448,453,3,56,
        28,0,449,450,3,58,29,0,450,451,3,56,28,0,451,453,1,0,0,0,452,446,
        1,0,0,0,452,449,1,0,0,0,453,458,1,0,0,0,454,455,10,2,0,0,455,457,
        3,56,28,0,456,454,1,0,0,0,457,460,1,0,0,0,458,456,1,0,0,0,458,459,
        1,0,0,0,459,55,1,0,0,0,460,458,1,0,0,0,461,462,5,13,0,0,462,463,
        7,0,0,0,463,464,5,14,0,0,464,57,1,0,0,0,465,466,5,21,0,0,466,467,
        5,13,0,0,467,468,3,60,30,0,468,469,5,7,0,0,469,470,7,0,0,0,470,471,
        5,14,0,0,471,59,1,0,0,0,472,476,5,67,0,0,473,476,3,54,27,0,474,476,
        3,58,29,0,475,472,1,0,0,0,475,473,1,0,0,0,475,474,1,0,0,0,476,61,
        1,0,0,0,477,478,5,11,0,0,478,483,3,64,32,0,479,480,5,7,0,0,480,482,
        3,64,32,0,481,479,1,0,0,0,482,485,1,0,0,0,483,481,1,0,0,0,483,484,
        1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,486,488,5,7,0,0,487,486,
        1,0,0,0,487,488,1,0,0,0,488,489,1,0,0,0,489,490,5,12,0,0,490,63,
        1,0,0,0,491,496,5,67,0,0,492,496,3,54,27,0,493,496,3,58,29,0,494,
        496,3,62,31,0,495,491,1,0,0,0,495,492,1,0,0,0,495,493,1,0,0,0,495,
        494,1,0,0,0,496,65,1,0,0,0,497,498,5,26,0,0,498,501,5,13,0,0,499,
        502,5,67,0,0,500,502,3,54,27,0,501,499,1,0,0,0,501,500,1,0,0,0,502,
        503,1,0,0,0,503,504,5,7,0,0,504,505,3,68,34,0,505,506,5,14,0,0,506,
        67,1,0,0,0,507,513,5,67,0,0,508,513,3,54,27,0,509,513,3,62,31,0,
        510,513,3,66,33,0,511,513,3,58,29,0,512,507,1,0,0,0,512,508,1,0,
        0,0,512,509,1,0,0,0,512,510,1,0,0,0,512,511,1,0,0,0,513,69,1,0,0,
        0,514,515,5,67,0,0,515,516,5,8,0,0,516,517,3,68,34,0,517,71,1,0,
        0,0,518,519,5,27,0,0,519,520,5,67,0,0,520,521,5,8,0,0,521,526,5,
        1,0,0,522,524,3,70,35,0,523,525,5,77,0,0,524,523,1,0,0,0,524,525,
        1,0,0,0,525,527,1,0,0,0,526,522,1,0,0,0,527,528,1,0,0,0,528,526,
        1,0,0,0,528,529,1,0,0,0,529,530,1,0,0,0,530,531,5,2,0,0,531,73,1,
        0,0,0,532,533,5,67,0,0,533,75,1,0,0,0,534,535,3,34,17,0,535,536,
        5,8,0,0,536,537,3,74,37,0,537,77,1,0,0,0,538,539,5,28,0,0,539,540,
        5,67,0,0,540,541,5,8,0,0,541,546,5,1,0,0,542,544,3,76,38,0,543,545,
        5,77,0,0,544,543,1,0,0,0,544,545,1,0,0,0,545,547,1,0,0,0,546,542,
        1,0,0,0,547,548,1,0,0,0,548,546,1,0,0,0,548,549,1,0,0,0,549,550,
        1,0,0,0,550,551,5,2,0,0,551,79,1,0,0,0,552,555,3,114,57,0,553,555,
        3,120,60,0,554,552,1,0,0,0,554,553,1,0,0,0,555,574,1,0,0,0,556,568,
        3,90,45,0,557,568,3,94,47,0,558,568,3,86,43,0,559,568,3,104,52,0,
        560,568,3,96,48,0,561,568,3,98,49,0,562,568,3,100,50,0,563,568,3,
        102,51,0,564,568,3,106,53,0,565,568,3,108,54,0,566,568,3,122,61,
        0,567,556,1,0,0,0,567,557,1,0,0,0,567,558,1,0,0,0,567,559,1,0,0,
        0,567,560,1,0,0,0,567,561,1,0,0,0,567,562,1,0,0,0,567,563,1,0,0,
        0,567,564,1,0,0,0,567,565,1,0,0,0,567,566,1,0,0,0,568,570,1,0,0,
        0,569,571,5,78,0,0,570,569,1,0,0,0,570,571,1,0,0,0,571,574,1,0,0,
        0,572,574,3,82,41,0,573,554,1,0,0,0,573,567,1,0,0,0,573,572,1,0,
        0,0,574,81,1,0,0,0,575,576,5,78,0,0,576,83,1,0,0,0,577,578,5,70,
        0,0,578,85,1,0,0,0,579,582,3,18,9,0,580,581,5,9,0,0,581,583,3,122,
        61,0,582,580,1,0,0,0,582,583,1,0,0,0,583,87,1,0,0,0,584,587,3,124,
        62,0,585,587,5,29,0,0,586,584,1,0,0,0,586,585,1,0,0,0,587,593,1,
        0,0,0,588,591,5,7,0,0,589,592,3,124,62,0,590,592,5,29,0,0,591,589,
        1,0,0,0,591,590,1,0,0,0,592,594,1,0,0,0,593,588,1,0,0,0,594,595,
        1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,89,1,0,0,0,597,604,3,
        124,62,0,598,604,3,88,44,0,599,600,5,11,0,0,600,601,3,88,44,0,601,
        602,5,12,0,0,602,604,1,0,0,0,603,597,1,0,0,0,603,598,1,0,0,0,603,
        599,1,0,0,0,604,605,1,0,0,0,605,606,5,9,0,0,606,607,3,122,61,0,607,
        91,1,0,0,0,608,609,7,1,0,0,609,93,1,0,0,0,610,611,3,124,62,0,611,
        612,3,92,46,0,612,613,5,9,0,0,613,614,3,122,61,0,614,95,1,0,0,0,
        615,616,5,38,0,0,616,97,1,0,0,0,617,618,5,39,0,0,618,99,1,0,0,0,
        619,620,5,40,0,0,620,101,1,0,0,0,621,622,5,41,0,0,622,623,5,67,0,
        0,623,625,5,11,0,0,624,626,3,138,69,0,625,624,1,0,0,0,625,626,1,
        0,0,0,626,627,1,0,0,0,627,628,5,12,0,0,628,103,1,0,0,0,629,638,5,
        42,0,0,630,635,3,122,61,0,631,632,5,7,0,0,632,634,3,122,61,0,633,
        631,1,0,0,0,634,637,1,0,0,0,635,633,1,0,0,0,635,636,1,0,0,0,636,
        639,1,0,0,0,637,635,1,0,0,0,638,630,1,0,0,0,638,639,1,0,0,0,639,
        105,1,0,0,0,640,646,5,43,0,0,641,642,5,43,0,0,642,646,3,122,61,0,
        643,644,5,43,0,0,644,646,5,48,0,0,645,640,1,0,0,0,645,641,1,0,0,
        0,645,643,1,0,0,0,646,107,1,0,0,0,647,648,5,44,0,0,648,660,3,122,
        61,0,649,650,5,44,0,0,650,651,3,122,61,0,651,652,5,7,0,0,652,653,
        3,122,61,0,653,660,1,0,0,0,654,655,5,44,0,0,655,656,3,122,61,0,656,
        657,5,7,0,0,657,658,5,48,0,0,658,660,1,0,0,0,659,647,1,0,0,0,659,
        649,1,0,0,0,659,654,1,0,0,0,660,109,1,0,0,0,661,662,3,122,61,0,662,
        663,5,8,0,0,663,664,3,38,19,0,664,111,1,0,0,0,665,666,3,38,19,0,
        666,113,1,0,0,0,667,668,5,45,0,0,668,673,3,110,55,0,669,670,5,47,
        0,0,670,672,3,110,55,0,671,669,1,0,0,0,672,675,1,0,0,0,673,671,1,
        0,0,0,673,674,1,0,0,0,674,679,1,0,0,0,675,673,1,0,0,0,676,677,5,
        46,0,0,677,678,5,8,0,0,678,680,3,112,56,0,679,676,1,0,0,0,679,680,
        1,0,0,0,680,115,1,0,0,0,681,684,5,67,0,0,682,683,5,8,0,0,683,685,
        5,67,0,0,684,682,1,0,0,0,684,685,1,0,0,0,685,117,1,0,0,0,686,687,
        3,122,61,0,687,119,1,0,0,0,688,689,5,49,0,0,689,690,3,116,58,0,690,
        691,5,50,0,0,691,692,3,118,59,0,692,693,5,8,0,0,693,694,3,38,19,
        0,694,121,1,0,0,0,695,698,3,146,73,0,696,698,3,144,72,0,697,695,
        1,0,0,0,697,696,1,0,0,0,698,123,1,0,0,0,699,705,5,67,0,0,700,701,
        5,11,0,0,701,702,3,124,62,0,702,703,5,12,0,0,703,705,1,0,0,0,704,
        699,1,0,0,0,704,700,1,0,0,0,705,711,1,0,0,0,706,710,3,126,63,0,707,
        710,3,128,64,0,708,710,3,130,65,0,709,706,1,0,0,0,709,707,1,0,0,
        0,709,708,1,0,0,0,710,713,1,0,0,0,711,709,1,0,0,0,711,712,1,0,0,
        0,712,125,1,0,0,0,713,711,1,0,0,0,714,715,5,6,0,0,715,716,5,67,0,
        0,716,127,1,0,0,0,717,718,5,13,0,0,718,719,3,122,61,0,719,720,5,
        14,0,0,720,129,1,0,0,0,721,723,5,11,0,0,722,724,3,138,69,0,723,722,
        1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,726,5,12,0,0,726,131,
        1,0,0,0,727,728,3,122,61,0,728,133,1,0,0,0,729,730,5,67,0,0,730,
        731,5,9,0,0,731,732,3,122,61,0,732,135,1,0,0,0,733,736,3,132,66,
        0,734,736,3,134,67,0,735,733,1,0,0,0,735,734,1,0,0,0,736,137,1,0,
        0,0,737,742,3,136,68,0,738,739,5,7,0,0,739,741,3,136,68,0,740,738,
        1,0,0,0,741,744,1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,746,
        1,0,0,0,744,742,1,0,0,0,745,747,5,7,0,0,746,745,1,0,0,0,746,747,
        1,0,0,0,747,139,1,0,0,0,748,749,5,11,0,0,749,750,5,7,0,0,750,768,
        5,12,0,0,751,752,5,11,0,0,752,763,3,122,61,0,753,754,5,7,0,0,754,
        756,3,122,61,0,755,753,1,0,0,0,756,757,1,0,0,0,757,755,1,0,0,0,757,
        758,1,0,0,0,758,760,1,0,0,0,759,761,5,7,0,0,760,759,1,0,0,0,760,
        761,1,0,0,0,761,764,1,0,0,0,762,764,5,7,0,0,763,755,1,0,0,0,763,
        762,1,0,0,0,764,765,1,0,0,0,765,766,5,12,0,0,766,768,1,0,0,0,767,
        748,1,0,0,0,767,751,1,0,0,0,768,141,1,0,0,0,769,770,5,13,0,0,770,
        786,5,14,0,0,771,772,5,13,0,0,772,777,3,122,61,0,773,774,5,7,0,0,
        774,776,3,122,61,0,775,773,1,0,0,0,776,779,1,0,0,0,777,775,1,0,0,
        0,777,778,1,0,0,0,778,781,1,0,0,0,779,777,1,0,0,0,780,782,5,7,0,
        0,781,780,1,0,0,0,781,782,1,0,0,0,782,783,1,0,0,0,783,784,5,14,0,
        0,784,786,1,0,0,0,785,769,1,0,0,0,785,771,1,0,0,0,786,143,1,0,0,
        0,787,788,5,15,0,0,788,809,5,16,0,0,789,790,5,15,0,0,790,791,5,67,
        0,0,791,792,5,8,0,0,792,793,3,122,61,0,793,800,1,0,0,0,794,795,5,
        7,0,0,795,796,5,67,0,0,796,797,5,8,0,0,797,799,3,122,61,0,798,794,
        1,0,0,0,799,802,1,0,0,0,800,798,1,0,0,0,800,801,1,0,0,0,801,804,
        1,0,0,0,802,800,1,0,0,0,803,805,5,7,0,0,804,803,1,0,0,0,804,805,
        1,0,0,0,805,806,1,0,0,0,806,807,5,16,0,0,807,809,1,0,0,0,808,787,
        1,0,0,0,808,789,1,0,0,0,809,145,1,0,0,0,810,811,3,148,74,0,811,147,
        1,0,0,0,812,813,6,74,-1,0,813,814,3,150,75,0,814,820,1,0,0,0,815,
        816,10,1,0,0,816,817,5,52,0,0,817,819,3,150,75,0,818,815,1,0,0,0,
        819,822,1,0,0,0,820,818,1,0,0,0,820,821,1,0,0,0,821,149,1,0,0,0,
        822,820,1,0,0,0,823,824,6,75,-1,0,824,825,3,152,76,0,825,831,1,0,
        0,0,826,827,10,1,0,0,827,828,5,51,0,0,828,830,3,152,76,0,829,826,
        1,0,0,0,830,833,1,0,0,0,831,829,1,0,0,0,831,832,1,0,0,0,832,151,
        1,0,0,0,833,831,1,0,0,0,834,838,3,154,77,0,835,836,5,53,0,0,836,
        838,3,152,76,0,837,834,1,0,0,0,837,835,1,0,0,0,838,153,1,0,0,0,839,
        840,6,77,-1,0,840,841,3,156,78,0,841,869,1,0,0,0,842,843,10,8,0,
        0,843,844,5,62,0,0,844,868,3,156,78,0,845,846,10,7,0,0,846,847,5,
        63,0,0,847,868,3,156,78,0,848,849,10,6,0,0,849,850,5,58,0,0,850,
        868,3,156,78,0,851,852,10,5,0,0,852,853,5,59,0,0,853,868,3,156,78,
        0,854,855,10,4,0,0,855,856,5,60,0,0,856,868,3,156,78,0,857,858,10,
        3,0,0,858,859,5,61,0,0,859,868,3,156,78,0,860,861,10,2,0,0,861,862,
        5,50,0,0,862,868,3,156,78,0,863,864,10,1,0,0,864,865,5,53,0,0,865,
        866,5,50,0,0,866,868,3,156,78,0,867,842,1,0,0,0,867,845,1,0,0,0,
        867,848,1,0,0,0,867,851,1,0,0,0,867,854,1,0,0,0,867,857,1,0,0,0,
        867,860,1,0,0,0,867,863,1,0,0,0,868,871,1,0,0,0,869,867,1,0,0,0,
        869,870,1,0,0,0,870,155,1,0,0,0,871,869,1,0,0,0,872,873,6,78,-1,
        0,873,874,3,158,79,0,874,880,1,0,0,0,875,876,10,1,0,0,876,877,5,
        56,0,0,877,879,3,158,79,0,878,875,1,0,0,0,879,882,1,0,0,0,880,878,
        1,0,0,0,880,881,1,0,0,0,881,157,1,0,0,0,882,880,1,0,0,0,883,884,
        6,79,-1,0,884,885,3,160,80,0,885,891,1,0,0,0,886,887,10,1,0,0,887,
        888,5,57,0,0,888,890,3,160,80,0,889,886,1,0,0,0,890,893,1,0,0,0,
        891,889,1,0,0,0,891,892,1,0,0,0,892,159,1,0,0,0,893,891,1,0,0,0,
        894,895,6,80,-1,0,895,896,3,162,81,0,896,902,1,0,0,0,897,898,10,
        1,0,0,898,899,5,55,0,0,899,901,3,162,81,0,900,897,1,0,0,0,901,904,
        1,0,0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,161,1,0,0,0,904,902,
        1,0,0,0,905,906,6,81,-1,0,906,907,3,164,82,0,907,916,1,0,0,0,908,
        909,10,2,0,0,909,910,5,36,0,0,910,915,3,164,82,0,911,912,10,1,0,
        0,912,913,5,37,0,0,913,915,3,164,82,0,914,908,1,0,0,0,914,911,1,
        0,0,0,915,918,1,0,0,0,916,914,1,0,0,0,916,917,1,0,0,0,917,163,1,
        0,0,0,918,916,1,0,0,0,919,920,6,82,-1,0,920,921,3,166,83,0,921,930,
        1,0,0,0,922,923,10,2,0,0,923,924,5,30,0,0,924,929,3,166,83,0,925,
        926,10,1,0,0,926,927,5,31,0,0,927,929,3,166,83,0,928,922,1,0,0,0,
        928,925,1,0,0,0,929,932,1,0,0,0,930,928,1,0,0,0,930,931,1,0,0,0,
        931,165,1,0,0,0,932,930,1,0,0,0,933,934,6,83,-1,0,934,935,3,168,
        84,0,935,947,1,0,0,0,936,937,10,3,0,0,937,938,5,32,0,0,938,946,3,
        168,84,0,939,940,10,2,0,0,940,941,5,33,0,0,941,946,3,168,84,0,942,
        943,10,1,0,0,943,944,5,34,0,0,944,946,3,168,84,0,945,936,1,0,0,0,
        945,939,1,0,0,0,945,942,1,0,0,0,946,949,1,0,0,0,947,945,1,0,0,0,
        947,948,1,0,0,0,948,167,1,0,0,0,949,947,1,0,0,0,950,958,3,170,85,
        0,951,952,5,30,0,0,952,958,3,170,85,0,953,954,5,31,0,0,954,958,3,
        170,85,0,955,956,5,54,0,0,956,958,3,170,85,0,957,950,1,0,0,0,957,
        951,1,0,0,0,957,953,1,0,0,0,957,955,1,0,0,0,958,169,1,0,0,0,959,
        960,6,85,-1,0,960,961,3,178,89,0,961,967,1,0,0,0,962,963,10,1,0,
        0,963,964,5,35,0,0,964,966,3,178,89,0,965,962,1,0,0,0,966,969,1,
        0,0,0,967,965,1,0,0,0,967,968,1,0,0,0,968,171,1,0,0,0,969,967,1,
        0,0,0,970,971,5,64,0,0,971,972,5,11,0,0,972,973,3,68,34,0,973,974,
        5,12,0,0,974,173,1,0,0,0,975,976,5,65,0,0,976,977,5,11,0,0,977,978,
        3,132,66,0,978,979,5,7,0,0,979,984,3,68,34,0,980,981,5,7,0,0,981,
        983,3,134,67,0,982,980,1,0,0,0,983,986,1,0,0,0,984,982,1,0,0,0,984,
        985,1,0,0,0,985,987,1,0,0,0,986,984,1,0,0,0,987,988,5,12,0,0,988,
        175,1,0,0,0,989,992,3,172,86,0,990,992,3,174,87,0,991,989,1,0,0,
        0,991,990,1,0,0,0,992,177,1,0,0,0,993,1003,3,124,62,0,994,1003,3,
        182,91,0,995,1003,3,176,88,0,996,1003,3,140,70,0,997,1003,3,142,
        71,0,998,999,5,11,0,0,999,1000,3,146,73,0,1000,1001,5,12,0,0,1001,
        1003,1,0,0,0,1002,993,1,0,0,0,1002,994,1,0,0,0,1002,995,1,0,0,0,
        1002,996,1,0,0,0,1002,997,1,0,0,0,1002,998,1,0,0,0,1003,179,1,0,
        0,0,1004,1005,7,2,0,0,1005,181,1,0,0,0,1006,1010,3,180,90,0,1007,
        1010,5,69,0,0,1008,1010,5,66,0,0,1009,1006,1,0,0,0,1009,1007,1,0,
        0,0,1009,1008,1,0,0,0,1010,183,1,0,0,0,108,197,199,210,215,222,224,
        232,239,249,254,258,262,268,275,277,288,297,312,315,321,324,331,
        338,341,346,349,353,357,366,370,373,382,384,388,392,410,413,417,
        426,433,437,452,458,475,483,487,495,501,512,524,528,544,548,554,
        567,570,573,582,586,591,595,603,625,635,638,645,659,673,679,684,
        697,704,709,711,723,735,742,746,757,760,763,767,777,781,785,800,
        804,808,820,831,837,867,869,880,891,902,914,916,928,930,945,947,
        957,967,984,991,1002,1009
    ]

class VyperParser ( Parser ):

    grammarFileName = "VyperParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "'as'", "'from'", 
                     "'import'", "'.'", "','", "':'", "'='", "'@'", "'('", 
                     "')'", "'['", "']'", "'{'", "'}'", "'constant'", "'immutable'", 
                     "'public'", "'indexed'", "'DynArray'", "'def'", "'->'", 
                     "'event'", "'enum'", "'HashMap'", "'struct'", "'interface'", 
                     "'_'", "'+'", "'-'", "'*'", "'/'", "'%'", "'**'", "'<<'", 
                     "'>>'", "'pass'", "'break'", "'continue'", "'log'", 
                     "'return'", "'raise'", "'assert'", "'if'", "'else'", 
                     "'elif'", "'UNREACHABLE'", "'for'", "'in'", "'and'", 
                     "'or'", "'not'", "'~'", "'&'", "'|'", "'^'", "'=='", 
                     "'!='", "'<='", "'>='", "'<'", "'>'", "'empty'", "'_abi_decode'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "AS", "FROM", "IMPORT", 
                      "DOT", "COMMA", "COLON", "ASSIGN", "AT", "LPAREN", 
                      "RPAREN", "LSQUARE", "RSQUARE", "LCURLY", "RCURLY", 
                      "CONSTANT", "IMMUTABLE", "PUBLIC", "INDEXED", "DYNARRAY", 
                      "FUNCDECL", "RETURNTYPE", "EVENTDECL", "ENUMDECL", 
                      "MAP", "STRUCTDECL", "INTERFACEDECL", "SKIPASSIGN", 
                      "ADD", "SUB", "MUL", "DIV", "MOD", "POW", "SHL", "SHR", 
                      "PASS", "Break", "CONTINUE", "LOG", "RETURN", "RAISE", 
                      "ASSERT", "IF", "ELSE", "ELIF", "UNREACHABLE", "FOR", 
                      "IN", "AND", "OR", "NOT", "NEG", "BITAND", "BITOR", 
                      "BITXOR", "EQ", "NE", "LE", "GE", "LT", "GT", "EMPTY", 
                      "ABIDECODE", "BOOL", "NAME", "TYPE", "STRING", "DOCSTRING", 
                      "DECNUMBER", "HEXNUMBER", "OCTNUMBER", "BINNUMBER", 
                      "FLOATNUMBER", "SPACES", "NEWLINE", "COMMENT" ]

    RULE_module = 0
    RULE_importname = 1
    RULE_import_ = 2
    RULE_importpath = 3
    RULE_importalias = 4
    RULE_importlist = 5
    RULE_importfrom = 6
    RULE_constantdef = 7
    RULE_immutabledef = 8
    RULE_variable = 9
    RULE_variablewithgetter = 10
    RULE_variabledef = 11
    RULE_decorator = 12
    RULE_decorators = 13
    RULE_parameter = 14
    RULE_parameters = 15
    RULE_returns_ = 16
    RULE_functionsig = 17
    RULE_functiondef = 18
    RULE_body = 19
    RULE_eventmember = 20
    RULE_indexedeventarg = 21
    RULE_eventbody = 22
    RULE_eventdef = 23
    RULE_enummember = 24
    RULE_enumbody = 25
    RULE_enumdef = 26
    RULE_arraydef = 27
    RULE_arraydeftail = 28
    RULE_dynarraydef = 29
    RULE_dynarraydefinner = 30
    RULE_tupledef = 31
    RULE_tupledefinner = 32
    RULE_mapdef = 33
    RULE_type_ = 34
    RULE_structmember = 35
    RULE_structdef = 36
    RULE_mutability = 37
    RULE_interfacefunction = 38
    RULE_interfacedef = 39
    RULE_stmt = 40
    RULE_comment = 41
    RULE_docstring = 42
    RULE_declaration = 43
    RULE_multipleassign = 44
    RULE_assign = 45
    RULE_augoperator = 46
    RULE_augassign = 47
    RULE_passstmt = 48
    RULE_breakstmt = 49
    RULE_continuestmt = 50
    RULE_logstmt = 51
    RULE_returnstmt = 52
    RULE_raisestmt = 53
    RULE_assertstmt = 54
    RULE_condexec = 55
    RULE_defaultexec = 56
    RULE_ifstmt = 57
    RULE_loopvariable = 58
    RULE_loopiterator = 59
    RULE_forstmt = 60
    RULE_expr = 61
    RULE_variableaccess = 62
    RULE_getattr = 63
    RULE_getitem = 64
    RULE_call = 65
    RULE_arg = 66
    RULE_kwarg = 67
    RULE_argument = 68
    RULE_arguments = 69
    RULE_tuple = 70
    RULE_list = 71
    RULE_dict = 72
    RULE_operation = 73
    RULE_boolor = 74
    RULE_booland = 75
    RULE_boolnot = 76
    RULE_comparator = 77
    RULE_bitwiseor = 78
    RULE_bitwisexor = 79
    RULE_bitwiseand = 80
    RULE_shift = 81
    RULE_summation = 82
    RULE_product = 83
    RULE_unary = 84
    RULE_power = 85
    RULE_empty = 86
    RULE_abidecode = 87
    RULE_specialbuiltins = 88
    RULE_atom = 89
    RULE_number = 90
    RULE_literal = 91

    ruleNames =  [ "module", "importname", "import_", "importpath", "importalias", 
                   "importlist", "importfrom", "constantdef", "immutabledef", 
                   "variable", "variablewithgetter", "variabledef", "decorator", 
                   "decorators", "parameter", "parameters", "returns_", 
                   "functionsig", "functiondef", "body", "eventmember", 
                   "indexedeventarg", "eventbody", "eventdef", "enummember", 
                   "enumbody", "enumdef", "arraydef", "arraydeftail", "dynarraydef", 
                   "dynarraydefinner", "tupledef", "tupledefinner", "mapdef", 
                   "type_", "structmember", "structdef", "mutability", "interfacefunction", 
                   "interfacedef", "stmt", "comment", "docstring", "declaration", 
                   "multipleassign", "assign", "augoperator", "augassign", 
                   "passstmt", "breakstmt", "continuestmt", "logstmt", "returnstmt", 
                   "raisestmt", "assertstmt", "condexec", "defaultexec", 
                   "ifstmt", "loopvariable", "loopiterator", "forstmt", 
                   "expr", "variableaccess", "getattr", "getitem", "call", 
                   "arg", "kwarg", "argument", "arguments", "tuple", "list", 
                   "dict", "operation", "boolor", "booland", "boolnot", 
                   "comparator", "bitwiseor", "bitwisexor", "bitwiseand", 
                   "shift", "summation", "product", "unary", "power", "empty", 
                   "abidecode", "specialbuiltins", "atom", "number", "literal" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    AS=3
    FROM=4
    IMPORT=5
    DOT=6
    COMMA=7
    COLON=8
    ASSIGN=9
    AT=10
    LPAREN=11
    RPAREN=12
    LSQUARE=13
    RSQUARE=14
    LCURLY=15
    RCURLY=16
    CONSTANT=17
    IMMUTABLE=18
    PUBLIC=19
    INDEXED=20
    DYNARRAY=21
    FUNCDECL=22
    RETURNTYPE=23
    EVENTDECL=24
    ENUMDECL=25
    MAP=26
    STRUCTDECL=27
    INTERFACEDECL=28
    SKIPASSIGN=29
    ADD=30
    SUB=31
    MUL=32
    DIV=33
    MOD=34
    POW=35
    SHL=36
    SHR=37
    PASS=38
    Break=39
    CONTINUE=40
    LOG=41
    RETURN=42
    RAISE=43
    ASSERT=44
    IF=45
    ELSE=46
    ELIF=47
    UNREACHABLE=48
    FOR=49
    IN=50
    AND=51
    OR=52
    NOT=53
    NEG=54
    BITAND=55
    BITOR=56
    BITXOR=57
    EQ=58
    NE=59
    LE=60
    GE=61
    LT=62
    GT=63
    EMPTY=64
    ABIDECODE=65
    BOOL=66
    NAME=67
    TYPE=68
    STRING=69
    DOCSTRING=70
    DECNUMBER=71
    HEXNUMBER=72
    OCTNUMBER=73
    BINNUMBER=74
    FLOATNUMBER=75
    SPACES=76
    NEWLINE=77
    COMMENT=78

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ModuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(VyperParser.EOF, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.STRING)
            else:
                return self.getToken(VyperParser.STRING, i)

        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.CommentContext)
            else:
                return self.getTypedRuleContext(VyperParser.CommentContext,i)


        def docstring(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.DocstringContext)
            else:
                return self.getTypedRuleContext(VyperParser.DocstringContext,i)


        def import_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Import_Context)
            else:
                return self.getTypedRuleContext(VyperParser.Import_Context,i)


        def structdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.StructdefContext)
            else:
                return self.getTypedRuleContext(VyperParser.StructdefContext,i)


        def interfacedef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.InterfacedefContext)
            else:
                return self.getTypedRuleContext(VyperParser.InterfacedefContext,i)


        def constantdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ConstantdefContext)
            else:
                return self.getTypedRuleContext(VyperParser.ConstantdefContext,i)


        def variabledef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.VariabledefContext)
            else:
                return self.getTypedRuleContext(VyperParser.VariabledefContext,i)


        def enumdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.EnumdefContext)
            else:
                return self.getTypedRuleContext(VyperParser.EnumdefContext,i)


        def eventdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.EventdefContext)
            else:
                return self.getTypedRuleContext(VyperParser.EventdefContext,i)


        def functiondef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.FunctiondefContext)
            else:
                return self.getTypedRuleContext(VyperParser.FunctiondefContext,i)


        def immutabledef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ImmutabledefContext)
            else:
                return self.getTypedRuleContext(VyperParser.ImmutabledefContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NEWLINE)
            else:
                return self.getToken(VyperParser.NEWLINE, i)

        def getRuleIndex(self):
            return VyperParser.RULE_module

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModule" ):
                return visitor.visitModule(self)
            else:
                return visitor.visitChildren(self)




    def module(self):

        localctx = VyperParser.ModuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_module)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 457180208) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 3085) != 0):
                self.state = 197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 184
                    self.match(VyperParser.STRING)
                    pass

                elif la_ == 2:
                    self.state = 185
                    self.comment()
                    pass

                elif la_ == 3:
                    self.state = 186
                    self.docstring()
                    pass

                elif la_ == 4:
                    self.state = 187
                    self.import_()
                    pass

                elif la_ == 5:
                    self.state = 188
                    self.structdef()
                    pass

                elif la_ == 6:
                    self.state = 189
                    self.interfacedef()
                    pass

                elif la_ == 7:
                    self.state = 190
                    self.constantdef()
                    pass

                elif la_ == 8:
                    self.state = 191
                    self.variabledef()
                    pass

                elif la_ == 9:
                    self.state = 192
                    self.enumdef()
                    pass

                elif la_ == 10:
                    self.state = 193
                    self.eventdef()
                    pass

                elif la_ == 11:
                    self.state = 194
                    self.functiondef()
                    pass

                elif la_ == 12:
                    self.state = 195
                    self.immutabledef()
                    pass

                elif la_ == 13:
                    self.state = 196
                    self.match(VyperParser.NEWLINE)
                    pass


                self.state = 201
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 202
            self.match(VyperParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportnameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_importname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportname" ):
                listener.enterImportname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportname" ):
                listener.exitImportname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportname" ):
                return visitor.visitImportname(self)
            else:
                return visitor.visitChildren(self)




    def importname(self):

        localctx = VyperParser.ImportnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_importname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.match(VyperParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(VyperParser.IMPORT, 0)

        def importpath(self):
            return self.getTypedRuleContext(VyperParser.ImportpathContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.DOT)
            else:
                return self.getToken(VyperParser.DOT, i)

        def importalias(self):
            return self.getTypedRuleContext(VyperParser.ImportaliasContext,0)


        def importfrom(self):
            return self.getTypedRuleContext(VyperParser.ImportfromContext,0)


        def MUL(self):
            return self.getToken(VyperParser.MUL, 0)

        def importname(self):
            return self.getTypedRuleContext(VyperParser.ImportnameContext,0)


        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def importlist(self):
            return self.getTypedRuleContext(VyperParser.ImportlistContext,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_import_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_" ):
                listener.enterImport_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_" ):
                listener.exitImport_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_" ):
                return visitor.visitImport_(self)
            else:
                return visitor.visitChildren(self)




    def import_(self):

        localctx = VyperParser.Import_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_import_)
        self._la = 0 # Token type
        try:
            self.state = 232
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 206
                self.match(VyperParser.IMPORT)
                self.state = 210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==6:
                    self.state = 207
                    self.match(VyperParser.DOT)
                    self.state = 212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 213
                self.importpath()
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 214
                    self.importalias()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 217
                self.importfrom()
                self.state = 218
                self.match(VyperParser.IMPORT)
                self.state = 224
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [32]:
                    self.state = 219
                    self.match(VyperParser.MUL)
                    pass
                elif token in [67]:
                    self.state = 220
                    self.importname()
                    self.state = 222
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==3:
                        self.state = 221
                        self.importalias()


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 226
                self.importfrom()
                self.state = 227
                self.match(VyperParser.IMPORT)
                self.state = 228
                self.match(VyperParser.LPAREN)
                self.state = 229
                self.importlist()
                self.state = 230
                self.match(VyperParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportpathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ImportnameContext)
            else:
                return self.getTypedRuleContext(VyperParser.ImportnameContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.DOT)
            else:
                return self.getToken(VyperParser.DOT, i)

        def getRuleIndex(self):
            return VyperParser.RULE_importpath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportpath" ):
                listener.enterImportpath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportpath" ):
                listener.exitImportpath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportpath" ):
                return visitor.visitImportpath(self)
            else:
                return visitor.visitChildren(self)




    def importpath(self):

        localctx = VyperParser.ImportpathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_importpath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 234
                    self.importname()
                    self.state = 235
                    self.match(VyperParser.DOT) 
                self.state = 241
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 242
            self.importname()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportaliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(VyperParser.AS, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_importalias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportalias" ):
                listener.enterImportalias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportalias" ):
                listener.exitImportalias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportalias" ):
                return visitor.visitImportalias(self)
            else:
                return visitor.visitChildren(self)




    def importalias(self):

        localctx = VyperParser.ImportaliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_importalias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.match(VyperParser.AS)
            self.state = 245
            self.match(VyperParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importname(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ImportnameContext)
            else:
                return self.getTypedRuleContext(VyperParser.ImportnameContext,i)


        def importalias(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ImportaliasContext)
            else:
                return self.getTypedRuleContext(VyperParser.ImportaliasContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_importlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportlist" ):
                listener.enterImportlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportlist" ):
                listener.exitImportlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportlist" ):
                return visitor.visitImportlist(self)
            else:
                return visitor.visitChildren(self)




    def importlist(self):

        localctx = VyperParser.ImportlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_importlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.importname()
            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 248
                self.importalias()


            self.state = 258
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 251
                    self.match(VyperParser.COMMA)
                    self.state = 252
                    self.importname()
                    self.state = 254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==3:
                        self.state = 253
                        self.importalias()

             
                self.state = 260
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 261
                self.match(VyperParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportfromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(VyperParser.FROM, 0)

        def importpath(self):
            return self.getTypedRuleContext(VyperParser.ImportpathContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.DOT)
            else:
                return self.getToken(VyperParser.DOT, i)

        def getRuleIndex(self):
            return VyperParser.RULE_importfrom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportfrom" ):
                listener.enterImportfrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportfrom" ):
                listener.exitImportfrom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportfrom" ):
                return visitor.visitImportfrom(self)
            else:
                return visitor.visitChildren(self)




    def importfrom(self):

        localctx = VyperParser.ImportfromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_importfrom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.match(VyperParser.FROM)
            self.state = 277
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==6:
                    self.state = 265
                    self.match(VyperParser.DOT)
                    self.state = 270
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 271
                self.importpath()
                pass

            elif la_ == 2:
                self.state = 273 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 272
                    self.match(VyperParser.DOT)
                    self.state = 275 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==6):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def CONSTANT(self):
            return self.getToken(VyperParser.CONSTANT, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def ASSIGN(self):
            return self.getToken(VyperParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def NEWLINE(self):
            return self.getToken(VyperParser.NEWLINE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_constantdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantdef" ):
                listener.enterConstantdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantdef" ):
                listener.exitConstantdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantdef" ):
                return visitor.visitConstantdef(self)
            else:
                return visitor.visitChildren(self)




    def constantdef(self):

        localctx = VyperParser.ConstantdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_constantdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(VyperParser.NAME)
            self.state = 280
            self.match(VyperParser.COLON)
            self.state = 281
            self.match(VyperParser.CONSTANT)
            self.state = 282
            self.match(VyperParser.LPAREN)
            self.state = 283
            self.type_()
            self.state = 284
            self.match(VyperParser.RPAREN)
            self.state = 285
            self.match(VyperParser.ASSIGN)
            self.state = 286
            self.expr()
            self.state = 288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 287
                self.match(VyperParser.NEWLINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImmutabledefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def IMMUTABLE(self):
            return self.getToken(VyperParser.IMMUTABLE, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def NEWLINE(self):
            return self.getToken(VyperParser.NEWLINE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_immutabledef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImmutabledef" ):
                listener.enterImmutabledef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImmutabledef" ):
                listener.exitImmutabledef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImmutabledef" ):
                return visitor.visitImmutabledef(self)
            else:
                return visitor.visitChildren(self)




    def immutabledef(self):

        localctx = VyperParser.ImmutabledefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_immutabledef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(VyperParser.NAME)
            self.state = 291
            self.match(VyperParser.COLON)
            self.state = 292
            self.match(VyperParser.IMMUTABLE)
            self.state = 293
            self.match(VyperParser.LPAREN)
            self.state = 294
            self.type_()
            self.state = 295
            self.match(VyperParser.RPAREN)
            self.state = 297
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 296
                self.match(VyperParser.NEWLINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def getRuleIndex(self):
            return VyperParser.RULE_variable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariable" ):
                listener.enterVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariable" ):
                listener.exitVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariable" ):
                return visitor.visitVariable(self)
            else:
                return visitor.visitChildren(self)




    def variable(self):

        localctx = VyperParser.VariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_variable)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(VyperParser.NAME)
            self.state = 300
            self.match(VyperParser.COLON)
            self.state = 301
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariablewithgetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def PUBLIC(self):
            return self.getToken(VyperParser.PUBLIC, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_variablewithgetter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariablewithgetter" ):
                listener.enterVariablewithgetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariablewithgetter" ):
                listener.exitVariablewithgetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariablewithgetter" ):
                return visitor.visitVariablewithgetter(self)
            else:
                return visitor.visitChildren(self)




    def variablewithgetter(self):

        localctx = VyperParser.VariablewithgetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_variablewithgetter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.match(VyperParser.NAME)
            self.state = 304
            self.match(VyperParser.COLON)
            self.state = 305
            self.match(VyperParser.PUBLIC)
            self.state = 306
            self.match(VyperParser.LPAREN)
            self.state = 307
            self.type_()
            self.state = 308
            self.match(VyperParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariabledefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(VyperParser.VariableContext,0)


        def variablewithgetter(self):
            return self.getTypedRuleContext(VyperParser.VariablewithgetterContext,0)


        def NEWLINE(self):
            return self.getToken(VyperParser.NEWLINE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_variabledef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariabledef" ):
                listener.enterVariabledef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariabledef" ):
                listener.exitVariabledef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariabledef" ):
                return visitor.visitVariabledef(self)
            else:
                return visitor.visitChildren(self)




    def variabledef(self):

        localctx = VyperParser.VariabledefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_variabledef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 310
                self.variable()
                pass

            elif la_ == 2:
                self.state = 311
                self.variablewithgetter()
                pass


            self.state = 315
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 314
                self.match(VyperParser.NEWLINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(VyperParser.AT, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def NEWLINE(self):
            return self.getToken(VyperParser.NEWLINE, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def arguments(self):
            return self.getTypedRuleContext(VyperParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = VyperParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(VyperParser.AT)
            self.state = 318
            self.match(VyperParser.NAME)
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 319
                self.match(VyperParser.LPAREN)
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 27021600985491456) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4015) != 0):
                    self.state = 320
                    self.arguments()


                self.state = 323
                self.match(VyperParser.RPAREN)


            self.state = 326
            self.match(VyperParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(VyperParser.DecoratorContext,i)


        def getRuleIndex(self):
            return VyperParser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = VyperParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 328
                self.decorator()
                self.state = 331 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==10):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def ASSIGN(self):
            return self.getToken(VyperParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = VyperParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(VyperParser.NAME)
            self.state = 334
            self.match(VyperParser.COLON)
            self.state = 335
            self.type_()
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 336
                self.match(VyperParser.ASSIGN)
                self.state = 337
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ParameterContext)
            else:
                return self.getTypedRuleContext(VyperParser.ParameterContext,i)


        def INDENT(self):
            return self.getToken(VyperParser.INDENT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def DEDENT(self):
            return self.getToken(VyperParser.DEDENT, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NEWLINE)
            else:
                return self.getToken(VyperParser.NEWLINE, i)

        def getRuleIndex(self):
            return VyperParser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = VyperParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 340
                self.match(VyperParser.INDENT)


            self.state = 343
            self.parameter()
            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 344
                self.match(VyperParser.COMMA)
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==77:
                    self.state = 345
                    self.match(VyperParser.NEWLINE)


                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 348
                    self.parameter()


                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==2:
                self.state = 356
                self.match(VyperParser.DEDENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Returns_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURNTYPE(self):
            return self.getToken(VyperParser.RETURNTYPE, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def getRuleIndex(self):
            return VyperParser.RULE_returns_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturns_" ):
                listener.enterReturns_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturns_" ):
                listener.exitReturns_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturns_" ):
                return visitor.visitReturns_(self)
            else:
                return visitor.visitChildren(self)




    def returns_(self):

        localctx = VyperParser.Returns_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_returns_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self.match(VyperParser.RETURNTYPE)
            self.state = 360
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionsigContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCDECL(self):
            return self.getToken(VyperParser.FUNCDECL, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def parameters(self):
            return self.getTypedRuleContext(VyperParser.ParametersContext,0)


        def returns_(self):
            return self.getTypedRuleContext(VyperParser.Returns_Context,0)


        def getRuleIndex(self):
            return VyperParser.RULE_functionsig

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionsig" ):
                listener.enterFunctionsig(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionsig" ):
                listener.exitFunctionsig(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionsig" ):
                return visitor.visitFunctionsig(self)
            else:
                return visitor.visitChildren(self)




    def functionsig(self):

        localctx = VyperParser.FunctionsigContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_functionsig)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(VyperParser.FUNCDECL)
            self.state = 363
            self.match(VyperParser.NAME)
            self.state = 364
            self.match(VyperParser.LPAREN)
            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1 or _la==67:
                self.state = 365
                self.parameters()


            self.state = 368
            self.match(VyperParser.RPAREN)
            self.state = 370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==23:
                self.state = 369
                self.returns_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiondefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionsig(self):
            return self.getTypedRuleContext(VyperParser.FunctionsigContext,0)


        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def body(self):
            return self.getTypedRuleContext(VyperParser.BodyContext,0)


        def decorators(self):
            return self.getTypedRuleContext(VyperParser.DecoratorsContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_functiondef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondef" ):
                listener.enterFunctiondef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondef" ):
                listener.exitFunctiondef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiondef" ):
                return visitor.visitFunctiondef(self)
            else:
                return visitor.visitChildren(self)




    def functiondef(self):

        localctx = VyperParser.FunctiondefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_functiondef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 372
                self.decorators()


            self.state = 375
            self.functionsig()
            self.state = 376
            self.match(VyperParser.COLON)
            self.state = 377
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(VyperParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(VyperParser.DEDENT, 0)

        def DOCSTRING(self):
            return self.getToken(VyperParser.DOCSTRING, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.StmtContext)
            else:
                return self.getTypedRuleContext(VyperParser.StmtContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NEWLINE)
            else:
                return self.getToken(VyperParser.NEWLINE, i)

        def getRuleIndex(self):
            return VyperParser.RULE_body

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBody" ):
                listener.enterBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBody" ):
                listener.exitBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBody" ):
                return visitor.visitBody(self)
            else:
                return visitor.visitChildren(self)




    def body(self):

        localctx = VyperParser.BodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_body)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(VyperParser.INDENT)
            self.state = 384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==70:
                self.state = 380
                self.match(VyperParser.DOCSTRING)
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==77:
                    self.state = 381
                    self.match(VyperParser.NEWLINE)




            self.state = 390 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 386
                self.stmt()
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==77:
                    self.state = 387
                    self.match(VyperParser.NEWLINE)


                self.state = 392 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 27654645342054400) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 20399) != 0)):
                    break

            self.state = 394
            self.match(VyperParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventmemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def getRuleIndex(self):
            return VyperParser.RULE_eventmember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventmember" ):
                listener.enterEventmember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventmember" ):
                listener.exitEventmember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventmember" ):
                return visitor.visitEventmember(self)
            else:
                return visitor.visitChildren(self)




    def eventmember(self):

        localctx = VyperParser.EventmemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_eventmember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.match(VyperParser.NAME)
            self.state = 397
            self.match(VyperParser.COLON)
            self.state = 398
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexedeventargContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def INDEXED(self):
            return self.getToken(VyperParser.INDEXED, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_indexedeventarg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexedeventarg" ):
                listener.enterIndexedeventarg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexedeventarg" ):
                listener.exitIndexedeventarg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexedeventarg" ):
                return visitor.visitIndexedeventarg(self)
            else:
                return visitor.visitChildren(self)




    def indexedeventarg(self):

        localctx = VyperParser.IndexedeventargContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_indexedeventarg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(VyperParser.NAME)
            self.state = 401
            self.match(VyperParser.COLON)
            self.state = 402
            self.match(VyperParser.INDEXED)
            self.state = 403
            self.match(VyperParser.LPAREN)
            self.state = 404
            self.type_()
            self.state = 405
            self.match(VyperParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventbodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(VyperParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(VyperParser.DEDENT, 0)

        def eventmember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.EventmemberContext)
            else:
                return self.getTypedRuleContext(VyperParser.EventmemberContext,i)


        def indexedeventarg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.IndexedeventargContext)
            else:
                return self.getTypedRuleContext(VyperParser.IndexedeventargContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NEWLINE)
            else:
                return self.getToken(VyperParser.NEWLINE, i)

        def getRuleIndex(self):
            return VyperParser.RULE_eventbody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventbody" ):
                listener.enterEventbody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventbody" ):
                listener.exitEventbody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventbody" ):
                return visitor.visitEventbody(self)
            else:
                return visitor.visitChildren(self)




    def eventbody(self):

        localctx = VyperParser.EventbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_eventbody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.match(VyperParser.INDENT)
            self.state = 415 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 410
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 408
                    self.eventmember()
                    pass

                elif la_ == 2:
                    self.state = 409
                    self.indexedeventarg()
                    pass


                self.state = 413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==77:
                    self.state = 412
                    self.match(VyperParser.NEWLINE)


                self.state = 417 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==67):
                    break

            self.state = 419
            self.match(VyperParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EventdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENTDECL(self):
            return self.getToken(VyperParser.EVENTDECL, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def eventbody(self):
            return self.getTypedRuleContext(VyperParser.EventbodyContext,0)


        def PASS(self):
            return self.getToken(VyperParser.PASS, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_eventdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEventdef" ):
                listener.enterEventdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEventdef" ):
                listener.exitEventdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEventdef" ):
                return visitor.visitEventdef(self)
            else:
                return visitor.visitChildren(self)




    def eventdef(self):

        localctx = VyperParser.EventdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_eventdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(VyperParser.EVENTDECL)
            self.state = 422
            self.match(VyperParser.NAME)
            self.state = 423
            self.match(VyperParser.COLON)
            self.state = 426
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.state = 424
                self.eventbody()
                pass
            elif token in [38]:
                self.state = 425
                self.match(VyperParser.PASS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnummemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_enummember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnummember" ):
                listener.enterEnummember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnummember" ):
                listener.exitEnummember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnummember" ):
                return visitor.visitEnummember(self)
            else:
                return visitor.visitChildren(self)




    def enummember(self):

        localctx = VyperParser.EnummemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_enummember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(VyperParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumbodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INDENT(self):
            return self.getToken(VyperParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(VyperParser.DEDENT, 0)

        def enummember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.EnummemberContext)
            else:
                return self.getTypedRuleContext(VyperParser.EnummemberContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NEWLINE)
            else:
                return self.getToken(VyperParser.NEWLINE, i)

        def getRuleIndex(self):
            return VyperParser.RULE_enumbody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumbody" ):
                listener.enterEnumbody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumbody" ):
                listener.exitEnumbody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumbody" ):
                return visitor.visitEnumbody(self)
            else:
                return visitor.visitChildren(self)




    def enumbody(self):

        localctx = VyperParser.EnumbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_enumbody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.match(VyperParser.INDENT)
            self.state = 435 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 431
                self.enummember()
                self.state = 433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==77:
                    self.state = 432
                    self.match(VyperParser.NEWLINE)


                self.state = 437 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==67):
                    break

            self.state = 439
            self.match(VyperParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUMDECL(self):
            return self.getToken(VyperParser.ENUMDECL, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def enumbody(self):
            return self.getTypedRuleContext(VyperParser.EnumbodyContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_enumdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumdef" ):
                listener.enterEnumdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumdef" ):
                listener.exitEnumdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumdef" ):
                return visitor.visitEnumdef(self)
            else:
                return visitor.visitChildren(self)




    def enumdef(self):

        localctx = VyperParser.EnumdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_enumdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(VyperParser.ENUMDECL)
            self.state = 442
            self.match(VyperParser.NAME)
            self.state = 443
            self.match(VyperParser.COLON)
            self.state = 444
            self.enumbody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArraydefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def arraydeftail(self):
            return self.getTypedRuleContext(VyperParser.ArraydeftailContext,0)


        def dynarraydef(self):
            return self.getTypedRuleContext(VyperParser.DynarraydefContext,0)


        def arraydef(self):
            return self.getTypedRuleContext(VyperParser.ArraydefContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_arraydef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArraydef" ):
                listener.enterArraydef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArraydef" ):
                listener.exitArraydef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArraydef" ):
                return visitor.visitArraydef(self)
            else:
                return visitor.visitChildren(self)



    def arraydef(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.ArraydefContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_arraydef, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67]:
                self.state = 447
                self.match(VyperParser.NAME)
                self.state = 448
                self.arraydeftail()
                pass
            elif token in [21]:
                self.state = 449
                self.dynarraydef()
                self.state = 450
                self.arraydeftail()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 458
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,42,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = VyperParser.ArraydefContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_arraydef)
                    self.state = 454
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 455
                    self.arraydeftail() 
                self.state = 460
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ArraydeftailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(VyperParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(VyperParser.RSQUARE, 0)

        def DECNUMBER(self):
            return self.getToken(VyperParser.DECNUMBER, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_arraydeftail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArraydeftail" ):
                listener.enterArraydeftail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArraydeftail" ):
                listener.exitArraydeftail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArraydeftail" ):
                return visitor.visitArraydeftail(self)
            else:
                return visitor.visitChildren(self)




    def arraydeftail(self):

        localctx = VyperParser.ArraydeftailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_arraydeftail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461
            self.match(VyperParser.LSQUARE)
            self.state = 462
            _la = self._input.LA(1)
            if not(_la==67 or _la==71):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 463
            self.match(VyperParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynarraydefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DYNARRAY(self):
            return self.getToken(VyperParser.DYNARRAY, 0)

        def LSQUARE(self):
            return self.getToken(VyperParser.LSQUARE, 0)

        def dynarraydefinner(self):
            return self.getTypedRuleContext(VyperParser.DynarraydefinnerContext,0)


        def COMMA(self):
            return self.getToken(VyperParser.COMMA, 0)

        def RSQUARE(self):
            return self.getToken(VyperParser.RSQUARE, 0)

        def DECNUMBER(self):
            return self.getToken(VyperParser.DECNUMBER, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_dynarraydef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynarraydef" ):
                listener.enterDynarraydef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynarraydef" ):
                listener.exitDynarraydef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynarraydef" ):
                return visitor.visitDynarraydef(self)
            else:
                return visitor.visitChildren(self)




    def dynarraydef(self):

        localctx = VyperParser.DynarraydefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dynarraydef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            self.match(VyperParser.DYNARRAY)
            self.state = 466
            self.match(VyperParser.LSQUARE)
            self.state = 467
            self.dynarraydefinner()
            self.state = 468
            self.match(VyperParser.COMMA)
            self.state = 469
            _la = self._input.LA(1)
            if not(_la==67 or _la==71):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 470
            self.match(VyperParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynarraydefinnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def arraydef(self):
            return self.getTypedRuleContext(VyperParser.ArraydefContext,0)


        def dynarraydef(self):
            return self.getTypedRuleContext(VyperParser.DynarraydefContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_dynarraydefinner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynarraydefinner" ):
                listener.enterDynarraydefinner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynarraydefinner" ):
                listener.exitDynarraydefinner(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynarraydefinner" ):
                return visitor.visitDynarraydefinner(self)
            else:
                return visitor.visitChildren(self)




    def dynarraydefinner(self):

        localctx = VyperParser.DynarraydefinnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dynarraydefinner)
        try:
            self.state = 475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 472
                self.match(VyperParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 473
                self.arraydef(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 474
                self.dynarraydef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupledefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def tupledefinner(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TupledefinnerContext)
            else:
                return self.getTypedRuleContext(VyperParser.TupledefinnerContext,i)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_tupledef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupledef" ):
                listener.enterTupledef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupledef" ):
                listener.exitTupledef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupledef" ):
                return visitor.visitTupledef(self)
            else:
                return visitor.visitChildren(self)




    def tupledef(self):

        localctx = VyperParser.TupledefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_tupledef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.match(VyperParser.LPAREN)
            self.state = 478
            self.tupledefinner()
            self.state = 483
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 479
                    self.match(VyperParser.COMMA)
                    self.state = 480
                    self.tupledefinner() 
                self.state = 485
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 486
                self.match(VyperParser.COMMA)


            self.state = 489
            self.match(VyperParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupledefinnerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def arraydef(self):
            return self.getTypedRuleContext(VyperParser.ArraydefContext,0)


        def dynarraydef(self):
            return self.getTypedRuleContext(VyperParser.DynarraydefContext,0)


        def tupledef(self):
            return self.getTypedRuleContext(VyperParser.TupledefContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_tupledefinner

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTupledefinner" ):
                listener.enterTupledefinner(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTupledefinner" ):
                listener.exitTupledefinner(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTupledefinner" ):
                return visitor.visitTupledefinner(self)
            else:
                return visitor.visitChildren(self)




    def tupledefinner(self):

        localctx = VyperParser.TupledefinnerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_tupledefinner)
        try:
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 491
                self.match(VyperParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 492
                self.arraydef(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 493
                self.dynarraydef()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 494
                self.tupledef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAP(self):
            return self.getToken(VyperParser.MAP, 0)

        def LSQUARE(self):
            return self.getToken(VyperParser.LSQUARE, 0)

        def COMMA(self):
            return self.getToken(VyperParser.COMMA, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def RSQUARE(self):
            return self.getToken(VyperParser.RSQUARE, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def arraydef(self):
            return self.getTypedRuleContext(VyperParser.ArraydefContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_mapdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapdef" ):
                listener.enterMapdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapdef" ):
                listener.exitMapdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapdef" ):
                return visitor.visitMapdef(self)
            else:
                return visitor.visitChildren(self)




    def mapdef(self):

        localctx = VyperParser.MapdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_mapdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(VyperParser.MAP)
            self.state = 498
            self.match(VyperParser.LSQUARE)
            self.state = 501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 499
                self.match(VyperParser.NAME)
                pass

            elif la_ == 2:
                self.state = 500
                self.arraydef(0)
                pass


            self.state = 503
            self.match(VyperParser.COMMA)
            self.state = 504
            self.type_()
            self.state = 505
            self.match(VyperParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def arraydef(self):
            return self.getTypedRuleContext(VyperParser.ArraydefContext,0)


        def tupledef(self):
            return self.getTypedRuleContext(VyperParser.TupledefContext,0)


        def mapdef(self):
            return self.getTypedRuleContext(VyperParser.MapdefContext,0)


        def dynarraydef(self):
            return self.getTypedRuleContext(VyperParser.DynarraydefContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_" ):
                return visitor.visitType_(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = VyperParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_type_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.state = 507
                self.match(VyperParser.NAME)
                pass

            elif la_ == 2:
                self.state = 508
                self.arraydef(0)
                pass

            elif la_ == 3:
                self.state = 509
                self.tupledef()
                pass

            elif la_ == 4:
                self.state = 510
                self.mapdef()
                pass

            elif la_ == 5:
                self.state = 511
                self.dynarraydef()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructmemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def getRuleIndex(self):
            return VyperParser.RULE_structmember

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructmember" ):
                listener.enterStructmember(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructmember" ):
                listener.exitStructmember(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructmember" ):
                return visitor.visitStructmember(self)
            else:
                return visitor.visitChildren(self)




    def structmember(self):

        localctx = VyperParser.StructmemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_structmember)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(VyperParser.NAME)
            self.state = 515
            self.match(VyperParser.COLON)
            self.state = 516
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCTDECL(self):
            return self.getToken(VyperParser.STRUCTDECL, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def INDENT(self):
            return self.getToken(VyperParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(VyperParser.DEDENT, 0)

        def structmember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.StructmemberContext)
            else:
                return self.getTypedRuleContext(VyperParser.StructmemberContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NEWLINE)
            else:
                return self.getToken(VyperParser.NEWLINE, i)

        def getRuleIndex(self):
            return VyperParser.RULE_structdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructdef" ):
                listener.enterStructdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructdef" ):
                listener.exitStructdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructdef" ):
                return visitor.visitStructdef(self)
            else:
                return visitor.visitChildren(self)




    def structdef(self):

        localctx = VyperParser.StructdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_structdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.match(VyperParser.STRUCTDECL)
            self.state = 519
            self.match(VyperParser.NAME)
            self.state = 520
            self.match(VyperParser.COLON)
            self.state = 521
            self.match(VyperParser.INDENT)
            self.state = 526 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 522
                self.structmember()
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==77:
                    self.state = 523
                    self.match(VyperParser.NEWLINE)


                self.state = 528 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==67):
                    break

            self.state = 530
            self.match(VyperParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MutabilityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_mutability

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMutability" ):
                listener.enterMutability(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMutability" ):
                listener.exitMutability(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMutability" ):
                return visitor.visitMutability(self)
            else:
                return visitor.visitChildren(self)




    def mutability(self):

        localctx = VyperParser.MutabilityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_mutability)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.match(VyperParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfacefunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionsig(self):
            return self.getTypedRuleContext(VyperParser.FunctionsigContext,0)


        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def mutability(self):
            return self.getTypedRuleContext(VyperParser.MutabilityContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_interfacefunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfacefunction" ):
                listener.enterInterfacefunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfacefunction" ):
                listener.exitInterfacefunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfacefunction" ):
                return visitor.visitInterfacefunction(self)
            else:
                return visitor.visitChildren(self)




    def interfacefunction(self):

        localctx = VyperParser.InterfacefunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_interfacefunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.functionsig()
            self.state = 535
            self.match(VyperParser.COLON)
            self.state = 536
            self.mutability()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfacedefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTERFACEDECL(self):
            return self.getToken(VyperParser.INTERFACEDECL, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def INDENT(self):
            return self.getToken(VyperParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(VyperParser.DEDENT, 0)

        def interfacefunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.InterfacefunctionContext)
            else:
                return self.getTypedRuleContext(VyperParser.InterfacefunctionContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NEWLINE)
            else:
                return self.getToken(VyperParser.NEWLINE, i)

        def getRuleIndex(self):
            return VyperParser.RULE_interfacedef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfacedef" ):
                listener.enterInterfacedef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfacedef" ):
                listener.exitInterfacedef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfacedef" ):
                return visitor.visitInterfacedef(self)
            else:
                return visitor.visitChildren(self)




    def interfacedef(self):

        localctx = VyperParser.InterfacedefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_interfacedef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 538
            self.match(VyperParser.INTERFACEDECL)
            self.state = 539
            self.match(VyperParser.NAME)
            self.state = 540
            self.match(VyperParser.COLON)
            self.state = 541
            self.match(VyperParser.INDENT)
            self.state = 546 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 542
                self.interfacefunction()
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==77:
                    self.state = 543
                    self.match(VyperParser.NEWLINE)


                self.state = 548 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==22):
                    break

            self.state = 550
            self.match(VyperParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifstmt(self):
            return self.getTypedRuleContext(VyperParser.IfstmtContext,0)


        def forstmt(self):
            return self.getTypedRuleContext(VyperParser.ForstmtContext,0)


        def assign(self):
            return self.getTypedRuleContext(VyperParser.AssignContext,0)


        def augassign(self):
            return self.getTypedRuleContext(VyperParser.AugassignContext,0)


        def declaration(self):
            return self.getTypedRuleContext(VyperParser.DeclarationContext,0)


        def returnstmt(self):
            return self.getTypedRuleContext(VyperParser.ReturnstmtContext,0)


        def passstmt(self):
            return self.getTypedRuleContext(VyperParser.PassstmtContext,0)


        def breakstmt(self):
            return self.getTypedRuleContext(VyperParser.BreakstmtContext,0)


        def continuestmt(self):
            return self.getTypedRuleContext(VyperParser.ContinuestmtContext,0)


        def logstmt(self):
            return self.getTypedRuleContext(VyperParser.LogstmtContext,0)


        def raisestmt(self):
            return self.getTypedRuleContext(VyperParser.RaisestmtContext,0)


        def assertstmt(self):
            return self.getTypedRuleContext(VyperParser.AssertstmtContext,0)


        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def COMMENT(self):
            return self.getToken(VyperParser.COMMENT, 0)

        def comment(self):
            return self.getTypedRuleContext(VyperParser.CommentContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = VyperParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_stmt)
        try:
            self.state = 573
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45, 49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 554
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [45]:
                    self.state = 552
                    self.ifstmt()
                    pass
                elif token in [49]:
                    self.state = 553
                    self.forstmt()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [11, 13, 15, 29, 30, 31, 38, 39, 40, 41, 42, 43, 44, 53, 54, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75]:
                self.enterOuterAlt(localctx, 2)
                self.state = 567
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 556
                    self.assign()
                    pass

                elif la_ == 2:
                    self.state = 557
                    self.augassign()
                    pass

                elif la_ == 3:
                    self.state = 558
                    self.declaration()
                    pass

                elif la_ == 4:
                    self.state = 559
                    self.returnstmt()
                    pass

                elif la_ == 5:
                    self.state = 560
                    self.passstmt()
                    pass

                elif la_ == 6:
                    self.state = 561
                    self.breakstmt()
                    pass

                elif la_ == 7:
                    self.state = 562
                    self.continuestmt()
                    pass

                elif la_ == 8:
                    self.state = 563
                    self.logstmt()
                    pass

                elif la_ == 9:
                    self.state = 564
                    self.raisestmt()
                    pass

                elif la_ == 10:
                    self.state = 565
                    self.assertstmt()
                    pass

                elif la_ == 11:
                    self.state = 566
                    self.expr()
                    pass


                self.state = 570
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 569
                    self.match(VyperParser.COMMENT)


                pass
            elif token in [78]:
                self.enterOuterAlt(localctx, 3)
                self.state = 572
                self.comment()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(VyperParser.COMMENT, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComment" ):
                return visitor.visitComment(self)
            else:
                return visitor.visitChildren(self)




    def comment(self):

        localctx = VyperParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_comment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 575
            self.match(VyperParser.COMMENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DocstringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOCSTRING(self):
            return self.getToken(VyperParser.DOCSTRING, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_docstring

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDocstring" ):
                listener.enterDocstring(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDocstring" ):
                listener.exitDocstring(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDocstring" ):
                return visitor.visitDocstring(self)
            else:
                return visitor.visitChildren(self)




    def docstring(self):

        localctx = VyperParser.DocstringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_docstring)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(VyperParser.DOCSTRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variable(self):
            return self.getTypedRuleContext(VyperParser.VariableContext,0)


        def ASSIGN(self):
            return self.getToken(VyperParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = VyperParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 579
            self.variable()
            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==9:
                self.state = 580
                self.match(VyperParser.ASSIGN)
                self.state = 581
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableaccess(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.VariableaccessContext)
            else:
                return self.getTypedRuleContext(VyperParser.VariableaccessContext,i)


        def SKIPASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.SKIPASSIGN)
            else:
                return self.getToken(VyperParser.SKIPASSIGN, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_multipleassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleassign" ):
                listener.enterMultipleassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleassign" ):
                listener.exitMultipleassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultipleassign" ):
                return visitor.visitMultipleassign(self)
            else:
                return visitor.visitChildren(self)




    def multipleassign(self):

        localctx = VyperParser.MultipleassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_multipleassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 67]:
                self.state = 584
                self.variableaccess()
                pass
            elif token in [29]:
                self.state = 585
                self.match(VyperParser.SKIPASSIGN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 593 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 588
                self.match(VyperParser.COMMA)
                self.state = 591
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [11, 67]:
                    self.state = 589
                    self.variableaccess()
                    pass
                elif token in [29]:
                    self.state = 590
                    self.match(VyperParser.SKIPASSIGN)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 595 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==7):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(VyperParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def variableaccess(self):
            return self.getTypedRuleContext(VyperParser.VariableaccessContext,0)


        def multipleassign(self):
            return self.getTypedRuleContext(VyperParser.MultipleassignContext,0)


        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign" ):
                listener.enterAssign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign" ):
                listener.exitAssign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign" ):
                return visitor.visitAssign(self)
            else:
                return visitor.visitChildren(self)




    def assign(self):

        localctx = VyperParser.AssignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.state = 597
                self.variableaccess()
                pass

            elif la_ == 2:
                self.state = 598
                self.multipleassign()
                pass

            elif la_ == 3:
                self.state = 599
                self.match(VyperParser.LPAREN)
                self.state = 600
                self.multipleassign()
                self.state = 601
                self.match(VyperParser.RPAREN)
                pass


            self.state = 605
            self.match(VyperParser.ASSIGN)
            self.state = 606
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugoperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(VyperParser.ADD, 0)

        def SUB(self):
            return self.getToken(VyperParser.SUB, 0)

        def MUL(self):
            return self.getToken(VyperParser.MUL, 0)

        def DIV(self):
            return self.getToken(VyperParser.DIV, 0)

        def MOD(self):
            return self.getToken(VyperParser.MOD, 0)

        def POW(self):
            return self.getToken(VyperParser.POW, 0)

        def SHL(self):
            return self.getToken(VyperParser.SHL, 0)

        def SHR(self):
            return self.getToken(VyperParser.SHR, 0)

        def BITAND(self):
            return self.getToken(VyperParser.BITAND, 0)

        def BITOR(self):
            return self.getToken(VyperParser.BITOR, 0)

        def BITXOR(self):
            return self.getToken(VyperParser.BITXOR, 0)

        def AND(self):
            return self.getToken(VyperParser.AND, 0)

        def OR(self):
            return self.getToken(VyperParser.OR, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_augoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugoperator" ):
                listener.enterAugoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugoperator" ):
                listener.exitAugoperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugoperator" ):
                return visitor.visitAugoperator(self)
            else:
                return visitor.visitChildren(self)




    def augoperator(self):

        localctx = VyperParser.AugoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_augoperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 258957252377968640) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableaccess(self):
            return self.getTypedRuleContext(VyperParser.VariableaccessContext,0)


        def augoperator(self):
            return self.getTypedRuleContext(VyperParser.AugoperatorContext,0)


        def ASSIGN(self):
            return self.getToken(VyperParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = VyperParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_augassign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.variableaccess()
            self.state = 611
            self.augoperator()
            self.state = 612
            self.match(VyperParser.ASSIGN)
            self.state = 613
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PassstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(VyperParser.PASS, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_passstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPassstmt" ):
                listener.enterPassstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPassstmt" ):
                listener.exitPassstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPassstmt" ):
                return visitor.visitPassstmt(self)
            else:
                return visitor.visitChildren(self)




    def passstmt(self):

        localctx = VyperParser.PassstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_passstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(VyperParser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(VyperParser.Break, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_breakstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakstmt" ):
                listener.enterBreakstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakstmt" ):
                listener.exitBreakstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakstmt" ):
                return visitor.visitBreakstmt(self)
            else:
                return visitor.visitChildren(self)




    def breakstmt(self):

        localctx = VyperParser.BreakstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_breakstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self.match(VyperParser.Break)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinuestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(VyperParser.CONTINUE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_continuestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinuestmt" ):
                listener.enterContinuestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinuestmt" ):
                listener.exitContinuestmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinuestmt" ):
                return visitor.visitContinuestmt(self)
            else:
                return visitor.visitChildren(self)




    def continuestmt(self):

        localctx = VyperParser.ContinuestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_continuestmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.match(VyperParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOG(self):
            return self.getToken(VyperParser.LOG, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def arguments(self):
            return self.getTypedRuleContext(VyperParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_logstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogstmt" ):
                listener.enterLogstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogstmt" ):
                listener.exitLogstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogstmt" ):
                return visitor.visitLogstmt(self)
            else:
                return visitor.visitChildren(self)




    def logstmt(self):

        localctx = VyperParser.LogstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_logstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(VyperParser.LOG)
            self.state = 622
            self.match(VyperParser.NAME)
            self.state = 623
            self.match(VyperParser.LPAREN)
            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 27021600985491456) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4015) != 0):
                self.state = 624
                self.arguments()


            self.state = 627
            self.match(VyperParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(VyperParser.RETURN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ExprContext)
            else:
                return self.getTypedRuleContext(VyperParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_returnstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnstmt" ):
                listener.enterReturnstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnstmt" ):
                listener.exitReturnstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnstmt" ):
                return visitor.visitReturnstmt(self)
            else:
                return visitor.visitChildren(self)




    def returnstmt(self):

        localctx = VyperParser.ReturnstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_returnstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(VyperParser.RETURN)
            self.state = 638
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 630
                self.expr()
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==7:
                    self.state = 631
                    self.match(VyperParser.COMMA)
                    self.state = 632
                    self.expr()
                    self.state = 637
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RaisestmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(VyperParser.RAISE, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def UNREACHABLE(self):
            return self.getToken(VyperParser.UNREACHABLE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_raisestmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaisestmt" ):
                listener.enterRaisestmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaisestmt" ):
                listener.exitRaisestmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaisestmt" ):
                return visitor.visitRaisestmt(self)
            else:
                return visitor.visitChildren(self)




    def raisestmt(self):

        localctx = VyperParser.RaisestmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_raisestmt)
        try:
            self.state = 645
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 640
                self.match(VyperParser.RAISE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 641
                self.match(VyperParser.RAISE)
                self.state = 642
                self.expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 643
                self.match(VyperParser.RAISE)
                self.state = 644
                self.match(VyperParser.UNREACHABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(VyperParser.ASSERT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ExprContext)
            else:
                return self.getTypedRuleContext(VyperParser.ExprContext,i)


        def COMMA(self):
            return self.getToken(VyperParser.COMMA, 0)

        def UNREACHABLE(self):
            return self.getToken(VyperParser.UNREACHABLE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_assertstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssertstmt" ):
                listener.enterAssertstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssertstmt" ):
                listener.exitAssertstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssertstmt" ):
                return visitor.visitAssertstmt(self)
            else:
                return visitor.visitChildren(self)




    def assertstmt(self):

        localctx = VyperParser.AssertstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_assertstmt)
        try:
            self.state = 659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 647
                self.match(VyperParser.ASSERT)
                self.state = 648
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 649
                self.match(VyperParser.ASSERT)
                self.state = 650
                self.expr()
                self.state = 651
                self.match(VyperParser.COMMA)
                self.state = 652
                self.expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 654
                self.match(VyperParser.ASSERT)
                self.state = 655
                self.expr()
                self.state = 656
                self.match(VyperParser.COMMA)
                self.state = 657
                self.match(VyperParser.UNREACHABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondexecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def body(self):
            return self.getTypedRuleContext(VyperParser.BodyContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_condexec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondexec" ):
                listener.enterCondexec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondexec" ):
                listener.exitCondexec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondexec" ):
                return visitor.visitCondexec(self)
            else:
                return visitor.visitChildren(self)




    def condexec(self):

        localctx = VyperParser.CondexecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_condexec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.expr()
            self.state = 662
            self.match(VyperParser.COLON)
            self.state = 663
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultexecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def body(self):
            return self.getTypedRuleContext(VyperParser.BodyContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_defaultexec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultexec" ):
                listener.enterDefaultexec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultexec" ):
                listener.exitDefaultexec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefaultexec" ):
                return visitor.visitDefaultexec(self)
            else:
                return visitor.visitChildren(self)




    def defaultexec(self):

        localctx = VyperParser.DefaultexecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_defaultexec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(VyperParser.IF, 0)

        def condexec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.CondexecContext)
            else:
                return self.getTypedRuleContext(VyperParser.CondexecContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.ELIF)
            else:
                return self.getToken(VyperParser.ELIF, i)

        def ELSE(self):
            return self.getToken(VyperParser.ELSE, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def defaultexec(self):
            return self.getTypedRuleContext(VyperParser.DefaultexecContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_ifstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfstmt" ):
                listener.enterIfstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfstmt" ):
                listener.exitIfstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfstmt" ):
                return visitor.visitIfstmt(self)
            else:
                return visitor.visitChildren(self)




    def ifstmt(self):

        localctx = VyperParser.IfstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_ifstmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.match(VyperParser.IF)
            self.state = 668
            self.condexec()
            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==47:
                self.state = 669
                self.match(VyperParser.ELIF)
                self.state = 670
                self.condexec()
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 676
                self.match(VyperParser.ELSE)
                self.state = 677
                self.match(VyperParser.COLON)
                self.state = 678
                self.defaultexec()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopvariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NAME)
            else:
                return self.getToken(VyperParser.NAME, i)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_loopvariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopvariable" ):
                listener.enterLoopvariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopvariable" ):
                listener.exitLoopvariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopvariable" ):
                return visitor.visitLoopvariable(self)
            else:
                return visitor.visitChildren(self)




    def loopvariable(self):

        localctx = VyperParser.LoopvariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_loopvariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(VyperParser.NAME)
            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 682
                self.match(VyperParser.COLON)
                self.state = 683
                self.match(VyperParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopiteratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_loopiterator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopiterator" ):
                listener.enterLoopiterator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopiterator" ):
                listener.exitLoopiterator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopiterator" ):
                return visitor.visitLoopiterator(self)
            else:
                return visitor.visitChildren(self)




    def loopiterator(self):

        localctx = VyperParser.LoopiteratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_loopiterator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForstmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(VyperParser.FOR, 0)

        def loopvariable(self):
            return self.getTypedRuleContext(VyperParser.LoopvariableContext,0)


        def IN(self):
            return self.getToken(VyperParser.IN, 0)

        def loopiterator(self):
            return self.getTypedRuleContext(VyperParser.LoopiteratorContext,0)


        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def body(self):
            return self.getTypedRuleContext(VyperParser.BodyContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_forstmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForstmt" ):
                listener.enterForstmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForstmt" ):
                listener.exitForstmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForstmt" ):
                return visitor.visitForstmt(self)
            else:
                return visitor.visitChildren(self)




    def forstmt(self):

        localctx = VyperParser.ForstmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_forstmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(VyperParser.FOR)
            self.state = 689
            self.loopvariable()
            self.state = 690
            self.match(VyperParser.IN)
            self.state = 691
            self.loopiterator()
            self.state = 692
            self.match(VyperParser.COLON)
            self.state = 693
            self.body()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operation(self):
            return self.getTypedRuleContext(VyperParser.OperationContext,0)


        def dict_(self):
            return self.getTypedRuleContext(VyperParser.DictContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = VyperParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_expr)
        try:
            self.state = 697
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 13, 30, 31, 53, 54, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75]:
                self.enterOuterAlt(localctx, 1)
                self.state = 695
                self.operation()
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 2)
                self.state = 696
                self.dict_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableaccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def variableaccess(self):
            return self.getTypedRuleContext(VyperParser.VariableaccessContext,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def getattr_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.GetattrContext)
            else:
                return self.getTypedRuleContext(VyperParser.GetattrContext,i)


        def getitem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.GetitemContext)
            else:
                return self.getTypedRuleContext(VyperParser.GetitemContext,i)


        def call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.CallContext)
            else:
                return self.getTypedRuleContext(VyperParser.CallContext,i)


        def getRuleIndex(self):
            return VyperParser.RULE_variableaccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableaccess" ):
                listener.enterVariableaccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableaccess" ):
                listener.exitVariableaccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableaccess" ):
                return visitor.visitVariableaccess(self)
            else:
                return visitor.visitChildren(self)




    def variableaccess(self):

        localctx = VyperParser.VariableaccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_variableaccess)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [67]:
                self.state = 699
                self.match(VyperParser.NAME)
                pass
            elif token in [11]:
                self.state = 700
                self.match(VyperParser.LPAREN)
                self.state = 701
                self.variableaccess()
                self.state = 702
                self.match(VyperParser.RPAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 711
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 709
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [6]:
                        self.state = 706
                        self.getattr_()
                        pass
                    elif token in [13]:
                        self.state = 707
                        self.getitem()
                        pass
                    elif token in [11]:
                        self.state = 708
                        self.call()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 713
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetattrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(VyperParser.DOT, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_getattr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetattr" ):
                listener.enterGetattr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetattr" ):
                listener.exitGetattr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetattr" ):
                return visitor.visitGetattr(self)
            else:
                return visitor.visitChildren(self)




    def getattr_(self):

        localctx = VyperParser.GetattrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_getattr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(VyperParser.DOT)
            self.state = 715
            self.match(VyperParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetitemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(VyperParser.LSQUARE, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def RSQUARE(self):
            return self.getToken(VyperParser.RSQUARE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_getitem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetitem" ):
                listener.enterGetitem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetitem" ):
                listener.exitGetitem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetitem" ):
                return visitor.visitGetitem(self)
            else:
                return visitor.visitChildren(self)




    def getitem(self):

        localctx = VyperParser.GetitemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_getitem)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(VyperParser.LSQUARE)
            self.state = 718
            self.expr()
            self.state = 719
            self.match(VyperParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def arguments(self):
            return self.getTypedRuleContext(VyperParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall" ):
                listener.enterCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall" ):
                listener.exitCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCall" ):
                return visitor.visitCall(self)
            else:
                return visitor.visitChildren(self)




    def call(self):

        localctx = VyperParser.CallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.match(VyperParser.LPAREN)

            self.state = 723
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 27021600985491456) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4015) != 0):
                self.state = 722
                self.arguments()


            self.state = 725
            self.match(VyperParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArg" ):
                listener.enterArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArg" ):
                listener.exitArg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArg" ):
                return visitor.visitArg(self)
            else:
                return visitor.visitChildren(self)




    def arg(self):

        localctx = VyperParser.ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_arg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def ASSIGN(self):
            return self.getToken(VyperParser.ASSIGN, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_kwarg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwarg" ):
                listener.enterKwarg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwarg" ):
                listener.exitKwarg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwarg" ):
                return visitor.visitKwarg(self)
            else:
                return visitor.visitChildren(self)




    def kwarg(self):

        localctx = VyperParser.KwargContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_kwarg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(VyperParser.NAME)
            self.state = 730
            self.match(VyperParser.ASSIGN)
            self.state = 731
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg(self):
            return self.getTypedRuleContext(VyperParser.ArgContext,0)


        def kwarg(self):
            return self.getTypedRuleContext(VyperParser.KwargContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = VyperParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_argument)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 733
                self.arg()
                pass

            elif la_ == 2:
                self.state = 734
                self.kwarg()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(VyperParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = VyperParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.argument()
            self.state = 742
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 738
                    self.match(VyperParser.COMMA)
                    self.state = 739
                    self.argument() 
                self.state = 744
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7:
                self.state = 745
                self.match(VyperParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ExprContext)
            else:
                return self.getTypedRuleContext(VyperParser.ExprContext,i)


        def getRuleIndex(self):
            return VyperParser.RULE_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple" ):
                listener.enterTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple" ):
                listener.exitTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple" ):
                return visitor.visitTuple(self)
            else:
                return visitor.visitChildren(self)




    def tuple_(self):

        localctx = VyperParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_tuple)
        self._la = 0 # Token type
        try:
            self.state = 767
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 748
                self.match(VyperParser.LPAREN)
                self.state = 749
                self.match(VyperParser.COMMA)
                self.state = 750
                self.match(VyperParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 751
                self.match(VyperParser.LPAREN)
                self.state = 752
                self.expr()
                self.state = 763
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 755 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 753
                            self.match(VyperParser.COMMA)
                            self.state = 754
                            self.expr()

                        else:
                            raise NoViableAltException(self)
                        self.state = 757 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,78,self._ctx)

                    self.state = 760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==7:
                        self.state = 759
                        self.match(VyperParser.COMMA)


                    pass

                elif la_ == 2:
                    self.state = 762
                    self.match(VyperParser.COMMA)
                    pass


                self.state = 765
                self.match(VyperParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(VyperParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(VyperParser.RSQUARE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ExprContext)
            else:
                return self.getTypedRuleContext(VyperParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList" ):
                listener.enterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList" ):
                listener.exitList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList" ):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)




    def list_(self):

        localctx = VyperParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.state = 785
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 769
                self.match(VyperParser.LSQUARE)
                self.state = 770
                self.match(VyperParser.RSQUARE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.match(VyperParser.LSQUARE)
                self.state = 772
                self.expr()
                self.state = 777
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,82,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 773
                        self.match(VyperParser.COMMA)
                        self.state = 774
                        self.expr() 
                    self.state = 779
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 780
                    self.match(VyperParser.COMMA)


                self.state = 783
                self.match(VyperParser.RSQUARE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURLY(self):
            return self.getToken(VyperParser.LCURLY, 0)

        def RCURLY(self):
            return self.getToken(VyperParser.RCURLY, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NAME)
            else:
                return self.getToken(VyperParser.NAME, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COLON)
            else:
                return self.getToken(VyperParser.COLON, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ExprContext)
            else:
                return self.getTypedRuleContext(VyperParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_dict

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDict" ):
                listener.enterDict(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDict" ):
                listener.exitDict(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDict" ):
                return visitor.visitDict(self)
            else:
                return visitor.visitChildren(self)




    def dict_(self):

        localctx = VyperParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_dict)
        self._la = 0 # Token type
        try:
            self.state = 808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 787
                self.match(VyperParser.LCURLY)
                self.state = 788
                self.match(VyperParser.RCURLY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 789
                self.match(VyperParser.LCURLY)

                self.state = 790
                self.match(VyperParser.NAME)
                self.state = 791
                self.match(VyperParser.COLON)
                self.state = 792
                self.expr()
                self.state = 800
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,85,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 794
                        self.match(VyperParser.COMMA)

                        self.state = 795
                        self.match(VyperParser.NAME)
                        self.state = 796
                        self.match(VyperParser.COLON)
                        self.state = 797
                        self.expr() 
                    self.state = 802
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,85,self._ctx)

                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==7:
                    self.state = 803
                    self.match(VyperParser.COMMA)


                self.state = 806
                self.match(VyperParser.RCURLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolor(self):
            return self.getTypedRuleContext(VyperParser.BoolorContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperation" ):
                listener.enterOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperation" ):
                listener.exitOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperation" ):
                return visitor.visitOperation(self)
            else:
                return visitor.visitChildren(self)




    def operation(self):

        localctx = VyperParser.OperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_operation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 810
            self.boolor(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def booland(self):
            return self.getTypedRuleContext(VyperParser.BoolandContext,0)


        def boolor(self):
            return self.getTypedRuleContext(VyperParser.BoolorContext,0)


        def OR(self):
            return self.getToken(VyperParser.OR, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_boolor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolor" ):
                listener.enterBoolor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolor" ):
                listener.exitBoolor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolor" ):
                return visitor.visitBoolor(self)
            else:
                return visitor.visitChildren(self)



    def boolor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.BoolorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 148
        self.enterRecursionRule(localctx, 148, self.RULE_boolor, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.booland(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 820
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = VyperParser.BoolorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_boolor)
                    self.state = 815
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 816
                    self.match(VyperParser.OR)
                    self.state = 817
                    self.booland(0) 
                self.state = 822
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BoolandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def boolnot(self):
            return self.getTypedRuleContext(VyperParser.BoolnotContext,0)


        def booland(self):
            return self.getTypedRuleContext(VyperParser.BoolandContext,0)


        def AND(self):
            return self.getToken(VyperParser.AND, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_booland

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooland" ):
                listener.enterBooland(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooland" ):
                listener.exitBooland(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooland" ):
                return visitor.visitBooland(self)
            else:
                return visitor.visitChildren(self)



    def booland(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.BoolandContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 150
        self.enterRecursionRule(localctx, 150, self.RULE_booland, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.boolnot()
            self._ctx.stop = self._input.LT(-1)
            self.state = 831
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = VyperParser.BoolandContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_booland)
                    self.state = 826
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 827
                    self.match(VyperParser.AND)
                    self.state = 828
                    self.boolnot() 
                self.state = 833
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BoolnotContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparator(self):
            return self.getTypedRuleContext(VyperParser.ComparatorContext,0)


        def NOT(self):
            return self.getToken(VyperParser.NOT, 0)

        def boolnot(self):
            return self.getTypedRuleContext(VyperParser.BoolnotContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_boolnot

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolnot" ):
                listener.enterBoolnot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolnot" ):
                listener.exitBoolnot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBoolnot" ):
                return visitor.visitBoolnot(self)
            else:
                return visitor.visitChildren(self)




    def boolnot(self):

        localctx = VyperParser.BoolnotContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_boolnot)
        try:
            self.state = 837
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 13, 30, 31, 54, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75]:
                self.enterOuterAlt(localctx, 1)
                self.state = 834
                self.comparator(0)
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 835
                self.match(VyperParser.NOT)
                self.state = 836
                self.boolnot()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseor(self):
            return self.getTypedRuleContext(VyperParser.BitwiseorContext,0)


        def comparator(self):
            return self.getTypedRuleContext(VyperParser.ComparatorContext,0)


        def LT(self):
            return self.getToken(VyperParser.LT, 0)

        def GT(self):
            return self.getToken(VyperParser.GT, 0)

        def EQ(self):
            return self.getToken(VyperParser.EQ, 0)

        def NE(self):
            return self.getToken(VyperParser.NE, 0)

        def LE(self):
            return self.getToken(VyperParser.LE, 0)

        def GE(self):
            return self.getToken(VyperParser.GE, 0)

        def IN(self):
            return self.getToken(VyperParser.IN, 0)

        def NOT(self):
            return self.getToken(VyperParser.NOT, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_comparator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparator" ):
                listener.enterComparator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparator" ):
                listener.exitComparator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparator" ):
                return visitor.visitComparator(self)
            else:
                return visitor.visitChildren(self)



    def comparator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.ComparatorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 154
        self.enterRecursionRule(localctx, 154, self.RULE_comparator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.bitwiseor(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 869
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,92,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 867
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                    if la_ == 1:
                        localctx = VyperParser.ComparatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparator)
                        self.state = 842
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 843
                        self.match(VyperParser.LT)
                        self.state = 844
                        self.bitwiseor(0)
                        pass

                    elif la_ == 2:
                        localctx = VyperParser.ComparatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparator)
                        self.state = 845
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 846
                        self.match(VyperParser.GT)
                        self.state = 847
                        self.bitwiseor(0)
                        pass

                    elif la_ == 3:
                        localctx = VyperParser.ComparatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparator)
                        self.state = 848
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 849
                        self.match(VyperParser.EQ)
                        self.state = 850
                        self.bitwiseor(0)
                        pass

                    elif la_ == 4:
                        localctx = VyperParser.ComparatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparator)
                        self.state = 851
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 852
                        self.match(VyperParser.NE)
                        self.state = 853
                        self.bitwiseor(0)
                        pass

                    elif la_ == 5:
                        localctx = VyperParser.ComparatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparator)
                        self.state = 854
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 855
                        self.match(VyperParser.LE)
                        self.state = 856
                        self.bitwiseor(0)
                        pass

                    elif la_ == 6:
                        localctx = VyperParser.ComparatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparator)
                        self.state = 857
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 858
                        self.match(VyperParser.GE)
                        self.state = 859
                        self.bitwiseor(0)
                        pass

                    elif la_ == 7:
                        localctx = VyperParser.ComparatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparator)
                        self.state = 860
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 861
                        self.match(VyperParser.IN)
                        self.state = 862
                        self.bitwiseor(0)
                        pass

                    elif la_ == 8:
                        localctx = VyperParser.ComparatorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_comparator)
                        self.state = 863
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 864
                        self.match(VyperParser.NOT)
                        self.state = 865
                        self.match(VyperParser.IN)
                        self.state = 866
                        self.bitwiseor(0)
                        pass

             
                self.state = 871
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,92,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitwiseorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwisexor(self):
            return self.getTypedRuleContext(VyperParser.BitwisexorContext,0)


        def bitwiseor(self):
            return self.getTypedRuleContext(VyperParser.BitwiseorContext,0)


        def BITOR(self):
            return self.getToken(VyperParser.BITOR, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_bitwiseor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseor" ):
                listener.enterBitwiseor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseor" ):
                listener.exitBitwiseor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseor" ):
                return visitor.visitBitwiseor(self)
            else:
                return visitor.visitChildren(self)



    def bitwiseor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.BitwiseorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 156
        self.enterRecursionRule(localctx, 156, self.RULE_bitwiseor, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.bitwisexor(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 880
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = VyperParser.BitwiseorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwiseor)
                    self.state = 875
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 876
                    self.match(VyperParser.BITOR)
                    self.state = 877
                    self.bitwisexor(0) 
                self.state = 882
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitwisexorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwiseand(self):
            return self.getTypedRuleContext(VyperParser.BitwiseandContext,0)


        def bitwisexor(self):
            return self.getTypedRuleContext(VyperParser.BitwisexorContext,0)


        def BITXOR(self):
            return self.getToken(VyperParser.BITXOR, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_bitwisexor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwisexor" ):
                listener.enterBitwisexor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwisexor" ):
                listener.exitBitwisexor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwisexor" ):
                return visitor.visitBitwisexor(self)
            else:
                return visitor.visitChildren(self)



    def bitwisexor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.BitwisexorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 158
        self.enterRecursionRule(localctx, 158, self.RULE_bitwisexor, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.bitwiseand(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 891
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = VyperParser.BitwisexorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwisexor)
                    self.state = 886
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 887
                    self.match(VyperParser.BITXOR)
                    self.state = 888
                    self.bitwiseand(0) 
                self.state = 893
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BitwiseandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift(self):
            return self.getTypedRuleContext(VyperParser.ShiftContext,0)


        def bitwiseand(self):
            return self.getTypedRuleContext(VyperParser.BitwiseandContext,0)


        def BITAND(self):
            return self.getToken(VyperParser.BITAND, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_bitwiseand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitwiseand" ):
                listener.enterBitwiseand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitwiseand" ):
                listener.exitBitwiseand(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwiseand" ):
                return visitor.visitBitwiseand(self)
            else:
                return visitor.visitChildren(self)



    def bitwiseand(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.BitwiseandContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 160
        self.enterRecursionRule(localctx, 160, self.RULE_bitwiseand, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 895
            self.shift(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 902
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = VyperParser.BitwiseandContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwiseand)
                    self.state = 897
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 898
                    self.match(VyperParser.BITAND)
                    self.state = 899
                    self.shift(0) 
                self.state = 904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def summation(self):
            return self.getTypedRuleContext(VyperParser.SummationContext,0)


        def shift(self):
            return self.getTypedRuleContext(VyperParser.ShiftContext,0)


        def SHL(self):
            return self.getToken(VyperParser.SHL, 0)

        def SHR(self):
            return self.getToken(VyperParser.SHR, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_shift

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift" ):
                listener.enterShift(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift" ):
                listener.exitShift(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShift" ):
                return visitor.visitShift(self)
            else:
                return visitor.visitChildren(self)



    def shift(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.ShiftContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 162
        self.enterRecursionRule(localctx, 162, self.RULE_shift, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.summation(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 916
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 914
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
                    if la_ == 1:
                        localctx = VyperParser.ShiftContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shift)
                        self.state = 908
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 909
                        self.match(VyperParser.SHL)
                        self.state = 910
                        self.summation(0)
                        pass

                    elif la_ == 2:
                        localctx = VyperParser.ShiftContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shift)
                        self.state = 911
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 912
                        self.match(VyperParser.SHR)
                        self.state = 913
                        self.summation(0)
                        pass

             
                self.state = 918
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SummationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def product(self):
            return self.getTypedRuleContext(VyperParser.ProductContext,0)


        def summation(self):
            return self.getTypedRuleContext(VyperParser.SummationContext,0)


        def ADD(self):
            return self.getToken(VyperParser.ADD, 0)

        def SUB(self):
            return self.getToken(VyperParser.SUB, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_summation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSummation" ):
                listener.enterSummation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSummation" ):
                listener.exitSummation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSummation" ):
                return visitor.visitSummation(self)
            else:
                return visitor.visitChildren(self)



    def summation(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.SummationContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 164
        self.enterRecursionRule(localctx, 164, self.RULE_summation, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.product(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 930
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 928
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                    if la_ == 1:
                        localctx = VyperParser.SummationContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_summation)
                        self.state = 922
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 923
                        self.match(VyperParser.ADD)
                        self.state = 924
                        self.product(0)
                        pass

                    elif la_ == 2:
                        localctx = VyperParser.SummationContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_summation)
                        self.state = 925
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 926
                        self.match(VyperParser.SUB)
                        self.state = 927
                        self.product(0)
                        pass

             
                self.state = 932
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ProductContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(VyperParser.UnaryContext,0)


        def product(self):
            return self.getTypedRuleContext(VyperParser.ProductContext,0)


        def MUL(self):
            return self.getToken(VyperParser.MUL, 0)

        def DIV(self):
            return self.getToken(VyperParser.DIV, 0)

        def MOD(self):
            return self.getToken(VyperParser.MOD, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_product

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct" ):
                listener.enterProduct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct" ):
                listener.exitProduct(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProduct" ):
                return visitor.visitProduct(self)
            else:
                return visitor.visitChildren(self)



    def product(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.ProductContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 166
        self.enterRecursionRule(localctx, 166, self.RULE_product, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.unary()
            self._ctx.stop = self._input.LT(-1)
            self.state = 947
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 945
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                    if la_ == 1:
                        localctx = VyperParser.ProductContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_product)
                        self.state = 936
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 937
                        self.match(VyperParser.MUL)
                        self.state = 938
                        self.unary()
                        pass

                    elif la_ == 2:
                        localctx = VyperParser.ProductContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_product)
                        self.state = 939
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 940
                        self.match(VyperParser.DIV)
                        self.state = 941
                        self.unary()
                        pass

                    elif la_ == 3:
                        localctx = VyperParser.ProductContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_product)
                        self.state = 942
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 943
                        self.match(VyperParser.MOD)
                        self.state = 944
                        self.unary()
                        pass

             
                self.state = 949
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def power(self):
            return self.getTypedRuleContext(VyperParser.PowerContext,0)


        def ADD(self):
            return self.getToken(VyperParser.ADD, 0)

        def SUB(self):
            return self.getToken(VyperParser.SUB, 0)

        def NEG(self):
            return self.getToken(VyperParser.NEG, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_unary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary" ):
                listener.enterUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary" ):
                listener.exitUnary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary" ):
                return visitor.visitUnary(self)
            else:
                return visitor.visitChildren(self)




    def unary(self):

        localctx = VyperParser.UnaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_unary)
        try:
            self.state = 957
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11, 13, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75]:
                self.enterOuterAlt(localctx, 1)
                self.state = 950
                self.power(0)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 2)
                self.state = 951
                self.match(VyperParser.ADD)
                self.state = 952
                self.power(0)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 3)
                self.state = 953
                self.match(VyperParser.SUB)
                self.state = 954
                self.power(0)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 4)
                self.state = 955
                self.match(VyperParser.NEG)
                self.state = 956
                self.power(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(VyperParser.AtomContext,0)


        def power(self):
            return self.getTypedRuleContext(VyperParser.PowerContext,0)


        def POW(self):
            return self.getToken(VyperParser.POW, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPower" ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPower" ):
                listener.exitPower(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPower" ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)



    def power(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = VyperParser.PowerContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 170
        self.enterRecursionRule(localctx, 170, self.RULE_power, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 967
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,103,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = VyperParser.PowerContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_power)
                    self.state = 962
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 963
                    self.match(VyperParser.POW)
                    self.state = 964
                    self.atom() 
                self.state = 969
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,103,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EMPTY(self):
            return self.getToken(VyperParser.EMPTY, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_empty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmpty" ):
                listener.enterEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmpty" ):
                listener.exitEmpty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmpty" ):
                return visitor.visitEmpty(self)
            else:
                return visitor.visitChildren(self)




    def empty(self):

        localctx = VyperParser.EmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_empty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(VyperParser.EMPTY)
            self.state = 971
            self.match(VyperParser.LPAREN)
            self.state = 972
            self.type_()
            self.state = 973
            self.match(VyperParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbidecodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABIDECODE(self):
            return self.getToken(VyperParser.ABIDECODE, 0)

        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def arg(self):
            return self.getTypedRuleContext(VyperParser.ArgContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def type_(self):
            return self.getTypedRuleContext(VyperParser.Type_Context,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def kwarg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.KwargContext)
            else:
                return self.getTypedRuleContext(VyperParser.KwargContext,i)


        def getRuleIndex(self):
            return VyperParser.RULE_abidecode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbidecode" ):
                listener.enterAbidecode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbidecode" ):
                listener.exitAbidecode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbidecode" ):
                return visitor.visitAbidecode(self)
            else:
                return visitor.visitChildren(self)




    def abidecode(self):

        localctx = VyperParser.AbidecodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_abidecode)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(VyperParser.ABIDECODE)
            self.state = 976
            self.match(VyperParser.LPAREN)
            self.state = 977
            self.arg()
            self.state = 978
            self.match(VyperParser.COMMA)
            self.state = 979
            self.type_()
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==7:
                self.state = 980
                self.match(VyperParser.COMMA)
                self.state = 981
                self.kwarg()
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 987
            self.match(VyperParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialbuiltinsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def empty(self):
            return self.getTypedRuleContext(VyperParser.EmptyContext,0)


        def abidecode(self):
            return self.getTypedRuleContext(VyperParser.AbidecodeContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_specialbuiltins

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialbuiltins" ):
                listener.enterSpecialbuiltins(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialbuiltins" ):
                listener.exitSpecialbuiltins(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialbuiltins" ):
                return visitor.visitSpecialbuiltins(self)
            else:
                return visitor.visitChildren(self)




    def specialbuiltins(self):

        localctx = VyperParser.SpecialbuiltinsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_specialbuiltins)
        try:
            self.state = 991
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 989
                self.empty()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 2)
                self.state = 990
                self.abidecode()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableaccess(self):
            return self.getTypedRuleContext(VyperParser.VariableaccessContext,0)


        def literal(self):
            return self.getTypedRuleContext(VyperParser.LiteralContext,0)


        def specialbuiltins(self):
            return self.getTypedRuleContext(VyperParser.SpecialbuiltinsContext,0)


        def tuple_(self):
            return self.getTypedRuleContext(VyperParser.TupleContext,0)


        def list_(self):
            return self.getTypedRuleContext(VyperParser.ListContext,0)


        def LPAREN(self):
            return self.getToken(VyperParser.LPAREN, 0)

        def operation(self):
            return self.getTypedRuleContext(VyperParser.OperationContext,0)


        def RPAREN(self):
            return self.getToken(VyperParser.RPAREN, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = VyperParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_atom)
        try:
            self.state = 1002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 993
                self.variableaccess()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 994
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 995
                self.specialbuiltins()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 996
                self.tuple_()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 997
                self.list_()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 998
                self.match(VyperParser.LPAREN)
                self.state = 999
                self.operation()
                self.state = 1000
                self.match(VyperParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECNUMBER(self):
            return self.getToken(VyperParser.DECNUMBER, 0)

        def HEXNUMBER(self):
            return self.getToken(VyperParser.HEXNUMBER, 0)

        def BINNUMBER(self):
            return self.getToken(VyperParser.BINNUMBER, 0)

        def OCTNUMBER(self):
            return self.getToken(VyperParser.OCTNUMBER, 0)

        def FLOATNUMBER(self):
            return self.getToken(VyperParser.FLOATNUMBER, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = VyperParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 31) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def number(self):
            return self.getTypedRuleContext(VyperParser.NumberContext,0)


        def STRING(self):
            return self.getToken(VyperParser.STRING, 0)

        def BOOL(self):
            return self.getToken(VyperParser.BOOL, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = VyperParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [71, 72, 73, 74, 75]:
                self.state = 1006
                self.number()
                pass
            elif token in [69]:
                self.state = 1007
                self.match(VyperParser.STRING)
                pass
            elif token in [66]:
                self.state = 1008
                self.match(VyperParser.BOOL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[27] = self.arraydef_sempred
        self._predicates[74] = self.boolor_sempred
        self._predicates[75] = self.booland_sempred
        self._predicates[77] = self.comparator_sempred
        self._predicates[78] = self.bitwiseor_sempred
        self._predicates[79] = self.bitwisexor_sempred
        self._predicates[80] = self.bitwiseand_sempred
        self._predicates[81] = self.shift_sempred
        self._predicates[82] = self.summation_sempred
        self._predicates[83] = self.product_sempred
        self._predicates[85] = self.power_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def arraydef_sempred(self, localctx:ArraydefContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def boolor_sempred(self, localctx:BoolorContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def booland_sempred(self, localctx:BoolandContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def comparator_sempred(self, localctx:ComparatorContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

    def bitwiseor_sempred(self, localctx:BitwiseorContext, predIndex:int):
            if predIndex == 11:
                return self.precpred(self._ctx, 1)
         

    def bitwisexor_sempred(self, localctx:BitwisexorContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def bitwiseand_sempred(self, localctx:BitwiseandContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 1)
         

    def shift_sempred(self, localctx:ShiftContext, predIndex:int):
            if predIndex == 14:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 1)
         

    def summation_sempred(self, localctx:SummationContext, predIndex:int):
            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

    def product_sempred(self, localctx:ProductContext, predIndex:int):
            if predIndex == 18:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 1)
         

    def power_sempred(self, localctx:PowerContext, predIndex:int):
            if predIndex == 21:
                return self.precpred(self._ctx, 1)
         




