# Generated from Vyper.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr4.Token import CommonToken
import re
import importlib

# Allow languages to extend the lexer and parser, by loading the parser dinamically
module_path = __name__[:-5]
language_name = __name__.split('.')[-1]
language_name = language_name[:-5]  # Remove Lexer from name
LanguageParser = getattr(importlib.import_module('{}Parser'.format(module_path)), '{}Parser'.format(language_name))


def serializedATN():
    return [
        4,0,92,837,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
        84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,
        91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,
        97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,
        7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
        2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,
        7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,1,0,1,0,1,
        0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,
        1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
        1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,
        1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,
        1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,3,33,
        421,8,33,1,33,1,33,3,33,425,8,33,1,33,3,33,428,8,33,3,33,430,8,33,
        1,33,1,33,1,34,1,34,5,34,436,8,34,10,34,12,34,439,9,34,1,35,3,35,
        442,8,35,1,35,3,35,445,8,35,1,35,1,35,3,35,449,8,35,1,36,1,36,3,
        36,453,8,36,1,36,1,36,3,36,457,8,36,1,37,1,37,5,37,461,8,37,10,37,
        12,37,464,9,37,1,37,4,37,467,8,37,11,37,12,37,468,3,37,471,8,37,
        1,38,1,38,1,38,4,38,476,8,38,11,38,12,38,477,1,39,1,39,1,39,4,39,
        483,8,39,11,39,12,39,484,1,40,1,40,1,40,4,40,490,8,40,11,40,12,40,
        491,1,41,1,41,3,41,496,8,41,1,42,1,42,3,42,500,8,42,1,42,1,42,1,
        43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,
        47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,53,1,
        53,1,53,1,54,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,
        58,1,59,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,
        64,1,64,1,65,1,65,1,66,1,66,1,66,1,67,1,67,1,67,1,68,1,68,1,69,1,
        69,1,70,1,70,1,70,1,71,1,71,1,71,1,72,1,72,1,72,1,73,1,73,1,73,1,
        74,1,74,1,74,1,75,1,75,1,76,1,76,1,76,1,77,1,77,1,77,1,78,1,78,1,
        78,1,79,1,79,1,79,1,80,1,80,1,80,1,81,1,81,1,81,1,82,1,82,1,82,1,
        83,1,83,1,83,1,84,1,84,1,84,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,
        87,1,87,1,87,1,87,1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,1,90,1,
        90,1,90,3,90,636,8,90,1,90,1,90,1,91,1,91,1,92,1,92,1,92,5,92,645,
        8,92,10,92,12,92,648,9,92,1,92,1,92,1,92,1,92,5,92,654,8,92,10,92,
        12,92,657,9,92,1,92,3,92,660,8,92,1,93,1,93,1,93,1,93,1,93,5,93,
        667,8,93,10,93,12,93,670,9,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
        1,93,5,93,680,8,93,10,93,12,93,683,9,93,1,93,1,93,1,93,3,93,688,
        8,93,1,94,1,94,3,94,692,8,94,1,95,1,95,1,96,1,96,1,96,1,97,1,97,
        1,98,1,98,1,99,1,99,1,100,1,100,1,101,1,101,1,102,3,102,710,8,102,
        1,102,1,102,1,102,1,102,3,102,716,8,102,1,103,1,103,3,103,720,8,
        103,1,103,1,103,1,104,4,104,725,8,104,11,104,12,104,726,1,105,1,
        105,4,105,731,8,105,11,105,12,105,732,1,106,1,106,3,106,737,8,106,
        1,106,4,106,740,8,106,11,106,12,106,741,1,107,1,107,1,107,5,107,
        747,8,107,10,107,12,107,750,9,107,1,107,1,107,1,107,1,107,5,107,
        756,8,107,10,107,12,107,759,9,107,1,107,3,107,762,8,107,1,108,1,
        108,1,108,1,108,1,108,5,108,769,8,108,10,108,12,108,772,9,108,1,
        108,1,108,1,108,1,108,1,108,1,108,1,108,1,108,5,108,782,8,108,10,
        108,12,108,785,9,108,1,108,1,108,1,108,3,108,790,8,108,1,109,1,109,
        3,109,794,8,109,1,110,3,110,797,8,110,1,111,3,111,800,8,111,1,112,
        3,112,803,8,112,1,113,1,113,1,113,1,114,4,114,809,8,114,11,114,12,
        114,810,1,115,1,115,5,115,815,8,115,10,115,12,115,818,9,115,1,116,
        1,116,3,116,822,8,116,1,116,3,116,825,8,116,1,116,1,116,3,116,829,
        8,116,1,117,3,117,832,8,117,1,118,1,118,3,118,836,8,118,4,668,681,
        770,783,0,119,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
        23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
        45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
        67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
        89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,
        109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,
        64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,143,72,145,73,
        147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,163,82,165,
        83,167,84,169,85,171,86,173,87,175,88,177,89,179,90,181,91,183,92,
        185,0,187,0,189,0,191,0,193,0,195,0,197,0,199,0,201,0,203,0,205,
        0,207,0,209,0,211,0,213,0,215,0,217,0,219,0,221,0,223,0,225,0,227,
        0,229,0,231,0,233,0,235,0,237,0,1,0,24,2,0,85,85,117,117,2,0,82,
        82,114,114,2,0,66,66,98,98,2,0,79,79,111,111,2,0,88,88,120,120,2,
        0,74,74,106,106,4,0,10,10,13,13,39,39,92,92,4,0,10,10,13,13,34,34,
        92,92,1,0,92,92,1,0,49,57,1,0,48,57,1,0,48,55,3,0,48,57,65,70,97,
        102,1,0,48,49,2,0,69,69,101,101,2,0,43,43,45,45,5,0,0,9,11,12,14,
        38,40,91,93,127,5,0,0,9,11,12,14,33,35,91,93,127,2,0,0,91,93,127,
        1,0,0,127,2,0,9,9,32,32,2,0,10,10,13,13,295,0,65,90,95,95,97,122,
        170,170,181,181,186,186,192,214,216,246,248,577,592,705,710,721,
        736,740,750,750,890,890,902,902,904,906,908,908,910,929,931,974,
        976,1013,1015,1153,1162,1230,1232,1273,1280,1295,1329,1366,1369,
        1369,1377,1415,1488,1514,1520,1522,1569,1594,1600,1610,1646,1647,
        1649,1747,1749,1749,1765,1766,1774,1775,1786,1788,1791,1791,1808,
        1808,1810,1839,1869,1901,1920,1957,1969,1969,2308,2361,2365,2365,
        2384,2384,2392,2401,2429,2429,2437,2444,2447,2448,2451,2472,2474,
        2480,2482,2482,2486,2489,2493,2493,2510,2510,2524,2525,2527,2529,
        2544,2545,2565,2570,2575,2576,2579,2600,2602,2608,2610,2611,2613,
        2614,2616,2617,2649,2652,2654,2654,2674,2676,2693,2701,2703,2705,
        2707,2728,2730,2736,2738,2739,2741,2745,2749,2749,2768,2768,2784,
        2785,2821,2828,2831,2832,2835,2856,2858,2864,2866,2867,2869,2873,
        2877,2877,2908,2909,2911,2913,2929,2929,2947,2947,2949,2954,2958,
        2960,2962,2965,2969,2970,2972,2972,2974,2975,2979,2980,2984,2986,
        2990,3001,3077,3084,3086,3088,3090,3112,3114,3123,3125,3129,3168,
        3169,3205,3212,3214,3216,3218,3240,3242,3251,3253,3257,3261,3261,
        3294,3294,3296,3297,3333,3340,3342,3344,3346,3368,3370,3385,3424,
        3425,3461,3478,3482,3505,3507,3515,3517,3517,3520,3526,3585,3632,
        3634,3635,3648,3654,3713,3714,3716,3716,3719,3720,3722,3722,3725,
        3725,3732,3735,3737,3743,3745,3747,3749,3749,3751,3751,3754,3755,
        3757,3760,3762,3763,3773,3773,3776,3780,3782,3782,3804,3805,3840,
        3840,3904,3911,3913,3946,3976,3979,4096,4129,4131,4135,4137,4138,
        4176,4181,4256,4293,4304,4346,4348,4348,4352,4441,4447,4514,4520,
        4601,4608,4680,4682,4685,4688,4694,4696,4696,4698,4701,4704,4744,
        4746,4749,4752,4784,4786,4789,4792,4798,4800,4800,4802,4805,4808,
        4822,4824,4880,4882,4885,4888,4954,4992,5007,5024,5108,5121,5740,
        5743,5750,5761,5786,5792,5866,5870,5872,5888,5900,5902,5905,5920,
        5937,5952,5969,5984,5996,5998,6000,6016,6067,6103,6103,6108,6108,
        6176,6263,6272,6312,6400,6428,6480,6509,6512,6516,6528,6569,6593,
        6599,6656,6678,7424,7615,7680,7835,7840,7929,7936,7957,7960,7965,
        7968,8005,8008,8013,8016,8023,8025,8025,8027,8027,8029,8029,8031,
        8061,8064,8116,8118,8124,8126,8126,8130,8132,8134,8140,8144,8147,
        8150,8155,8160,8172,8178,8180,8182,8188,8305,8305,8319,8319,8336,
        8340,8450,8450,8455,8455,8458,8467,8469,8469,8472,8477,8484,8484,
        8486,8486,8488,8488,8490,8497,8499,8505,8508,8511,8517,8521,8544,
        8579,11264,11310,11312,11358,11392,11492,11520,11557,11568,11621,
        11631,11631,11648,11670,11680,11686,11688,11694,11696,11702,11704,
        11710,11712,11718,11720,11726,11728,11734,11736,11742,12293,12295,
        12321,12329,12337,12341,12344,12348,12353,12438,12443,12447,12449,
        12538,12540,12543,12549,12588,12593,12686,12704,12727,12784,12799,
        13312,19893,19968,40891,40960,42124,43008,43009,43011,43013,43015,
        43018,43020,43042,44032,55203,63744,64045,64048,64106,64112,64217,
        64256,64262,64275,64279,64285,64285,64287,64296,64298,64310,64312,
        64316,64318,64318,64320,64321,64323,64324,64326,64433,64467,64829,
        64848,64911,64914,64967,65008,65019,65136,65140,65142,65276,65313,
        65338,65345,65370,65382,65470,65474,65479,65482,65487,65490,65495,
        65498,65500,148,0,48,57,768,879,1155,1158,1425,1465,1467,1469,1471,
        1471,1473,1474,1476,1477,1479,1479,1552,1557,1611,1630,1632,1641,
        1648,1648,1750,1756,1759,1764,1767,1768,1770,1773,1776,1785,1809,
        1809,1840,1866,1958,1968,2305,2307,2364,2364,2366,2381,2385,2388,
        2402,2403,2406,2415,2433,2435,2492,2492,2494,2500,2503,2504,2507,
        2509,2519,2519,2530,2531,2534,2543,2561,2563,2620,2620,2622,2626,
        2631,2632,2635,2637,2662,2673,2689,2691,2748,2748,2750,2757,2759,
        2761,2763,2765,2786,2787,2790,2799,2817,2819,2876,2876,2878,2883,
        2887,2888,2891,2893,2902,2903,2918,2927,2946,2946,3006,3010,3014,
        3016,3018,3021,3031,3031,3046,3055,3073,3075,3134,3140,3142,3144,
        3146,3149,3157,3158,3174,3183,3202,3203,3260,3260,3262,3268,3270,
        3272,3274,3277,3285,3286,3302,3311,3330,3331,3390,3395,3398,3400,
        3402,3405,3415,3415,3430,3439,3458,3459,3530,3530,3535,3540,3542,
        3542,3544,3551,3570,3571,3633,3633,3636,3642,3655,3662,3664,3673,
        3761,3761,3764,3769,3771,3772,3784,3789,3792,3801,3864,3865,3872,
        3881,3893,3893,3895,3895,3897,3897,3902,3903,3953,3972,3974,3975,
        3984,3991,3993,4028,4038,4038,4140,4146,4150,4153,4160,4169,4182,
        4185,4959,4959,4969,4977,5906,5908,5938,5940,5970,5971,6002,6003,
        6070,6099,6109,6109,6112,6121,6155,6157,6160,6169,6313,6313,6432,
        6443,6448,6459,6470,6479,6576,6592,6600,6601,6608,6617,6679,6683,
        7616,7619,8255,8256,8276,8276,8400,8412,8417,8417,8421,8427,12330,
        12335,12441,12442,43010,43010,43014,43014,43019,43019,43043,43047,
        64286,64286,65024,65039,65056,65059,65075,65076,65101,65103,65296,
        65305,65343,65343,860,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
        0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
        0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
        0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
        0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
        0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,
        0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,
        0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,
        1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
        0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,
        0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,0,
        135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,
        0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,
        1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,
        0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,
        0,0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,0,0,0,0,179,1,0,0,0,0,
        181,1,0,0,0,0,183,1,0,0,0,1,239,1,0,0,0,3,243,1,0,0,0,5,250,1,0,
        0,0,7,256,1,0,0,0,9,261,1,0,0,0,11,268,1,0,0,0,13,271,1,0,0,0,15,
        278,1,0,0,0,17,287,1,0,0,0,19,294,1,0,0,0,21,297,1,0,0,0,23,302,
        1,0,0,0,25,307,1,0,0,0,27,313,1,0,0,0,29,317,1,0,0,0,31,320,1,0,
        0,0,33,324,1,0,0,0,35,332,1,0,0,0,37,337,1,0,0,0,39,344,1,0,0,0,
        41,351,1,0,0,0,43,354,1,0,0,0,45,358,1,0,0,0,47,362,1,0,0,0,49,365,
        1,0,0,0,51,370,1,0,0,0,53,375,1,0,0,0,55,381,1,0,0,0,57,387,1,0,
        0,0,59,393,1,0,0,0,61,397,1,0,0,0,63,402,1,0,0,0,65,411,1,0,0,0,
        67,429,1,0,0,0,69,433,1,0,0,0,71,441,1,0,0,0,73,450,1,0,0,0,75,470,
        1,0,0,0,77,472,1,0,0,0,79,479,1,0,0,0,81,486,1,0,0,0,83,495,1,0,
        0,0,85,499,1,0,0,0,87,503,1,0,0,0,89,505,1,0,0,0,91,509,1,0,0,0,
        93,511,1,0,0,0,95,514,1,0,0,0,97,517,1,0,0,0,99,519,1,0,0,0,101,
        521,1,0,0,0,103,523,1,0,0,0,105,526,1,0,0,0,107,528,1,0,0,0,109,
        531,1,0,0,0,111,534,1,0,0,0,113,536,1,0,0,0,115,538,1,0,0,0,117,
        540,1,0,0,0,119,543,1,0,0,0,121,546,1,0,0,0,123,548,1,0,0,0,125,
        550,1,0,0,0,127,552,1,0,0,0,129,554,1,0,0,0,131,557,1,0,0,0,133,
        559,1,0,0,0,135,562,1,0,0,0,137,565,1,0,0,0,139,567,1,0,0,0,141,
        569,1,0,0,0,143,572,1,0,0,0,145,575,1,0,0,0,147,578,1,0,0,0,149,
        581,1,0,0,0,151,584,1,0,0,0,153,586,1,0,0,0,155,589,1,0,0,0,157,
        592,1,0,0,0,159,595,1,0,0,0,161,598,1,0,0,0,163,601,1,0,0,0,165,
        604,1,0,0,0,167,607,1,0,0,0,169,610,1,0,0,0,171,613,1,0,0,0,173,
        616,1,0,0,0,175,620,1,0,0,0,177,624,1,0,0,0,179,628,1,0,0,0,181,
        635,1,0,0,0,183,639,1,0,0,0,185,659,1,0,0,0,187,687,1,0,0,0,189,
        691,1,0,0,0,191,693,1,0,0,0,193,695,1,0,0,0,195,698,1,0,0,0,197,
        700,1,0,0,0,199,702,1,0,0,0,201,704,1,0,0,0,203,706,1,0,0,0,205,
        715,1,0,0,0,207,719,1,0,0,0,209,724,1,0,0,0,211,728,1,0,0,0,213,
        734,1,0,0,0,215,761,1,0,0,0,217,789,1,0,0,0,219,793,1,0,0,0,221,
        796,1,0,0,0,223,799,1,0,0,0,225,802,1,0,0,0,227,804,1,0,0,0,229,
        808,1,0,0,0,231,812,1,0,0,0,233,819,1,0,0,0,235,831,1,0,0,0,237,
        835,1,0,0,0,239,240,5,100,0,0,240,241,5,101,0,0,241,242,5,102,0,
        0,242,2,1,0,0,0,243,244,5,114,0,0,244,245,5,101,0,0,245,246,5,116,
        0,0,246,247,5,117,0,0,247,248,5,114,0,0,248,249,5,110,0,0,249,4,
        1,0,0,0,250,251,5,114,0,0,251,252,5,97,0,0,252,253,5,105,0,0,253,
        254,5,115,0,0,254,255,5,101,0,0,255,6,1,0,0,0,256,257,5,102,0,0,
        257,258,5,114,0,0,258,259,5,111,0,0,259,260,5,109,0,0,260,8,1,0,
        0,0,261,262,5,105,0,0,262,263,5,109,0,0,263,264,5,112,0,0,264,265,
        5,111,0,0,265,266,5,114,0,0,266,267,5,116,0,0,267,10,1,0,0,0,268,
        269,5,97,0,0,269,270,5,115,0,0,270,12,1,0,0,0,271,272,5,103,0,0,
        272,273,5,108,0,0,273,274,5,111,0,0,274,275,5,98,0,0,275,276,5,97,
        0,0,276,277,5,108,0,0,277,14,1,0,0,0,278,279,5,110,0,0,279,280,5,
        111,0,0,280,281,5,110,0,0,281,282,5,108,0,0,282,283,5,111,0,0,283,
        284,5,99,0,0,284,285,5,97,0,0,285,286,5,108,0,0,286,16,1,0,0,0,287,
        288,5,97,0,0,288,289,5,115,0,0,289,290,5,115,0,0,290,291,5,101,0,
        0,291,292,5,114,0,0,292,293,5,116,0,0,293,18,1,0,0,0,294,295,5,105,
        0,0,295,296,5,102,0,0,296,20,1,0,0,0,297,298,5,101,0,0,298,299,5,
        108,0,0,299,300,5,105,0,0,300,301,5,102,0,0,301,22,1,0,0,0,302,303,
        5,101,0,0,303,304,5,108,0,0,304,305,5,115,0,0,305,306,5,101,0,0,
        306,24,1,0,0,0,307,308,5,119,0,0,308,309,5,104,0,0,309,310,5,105,
        0,0,310,311,5,108,0,0,311,312,5,101,0,0,312,26,1,0,0,0,313,314,5,
        102,0,0,314,315,5,111,0,0,315,316,5,114,0,0,316,28,1,0,0,0,317,318,
        5,105,0,0,318,319,5,110,0,0,319,30,1,0,0,0,320,321,5,116,0,0,321,
        322,5,114,0,0,322,323,5,121,0,0,323,32,1,0,0,0,324,325,5,102,0,0,
        325,326,5,105,0,0,326,327,5,110,0,0,327,328,5,97,0,0,328,329,5,108,
        0,0,329,330,5,108,0,0,330,331,5,121,0,0,331,34,1,0,0,0,332,333,5,
        119,0,0,333,334,5,105,0,0,334,335,5,116,0,0,335,336,5,104,0,0,336,
        36,1,0,0,0,337,338,5,101,0,0,338,339,5,120,0,0,339,340,5,99,0,0,
        340,341,5,101,0,0,341,342,5,112,0,0,342,343,5,116,0,0,343,38,1,0,
        0,0,344,345,5,108,0,0,345,346,5,97,0,0,346,347,5,109,0,0,347,348,
        5,98,0,0,348,349,5,100,0,0,349,350,5,97,0,0,350,40,1,0,0,0,351,352,
        5,111,0,0,352,353,5,114,0,0,353,42,1,0,0,0,354,355,5,97,0,0,355,
        356,5,110,0,0,356,357,5,100,0,0,357,44,1,0,0,0,358,359,5,110,0,0,
        359,360,5,111,0,0,360,361,5,116,0,0,361,46,1,0,0,0,362,363,5,105,
        0,0,363,364,5,115,0,0,364,48,1,0,0,0,365,366,5,78,0,0,366,367,5,
        111,0,0,367,368,5,110,0,0,368,369,5,101,0,0,369,50,1,0,0,0,370,371,
        5,84,0,0,371,372,5,114,0,0,372,373,5,117,0,0,373,374,5,101,0,0,374,
        52,1,0,0,0,375,376,5,70,0,0,376,377,5,97,0,0,377,378,5,108,0,0,378,
        379,5,115,0,0,379,380,5,101,0,0,380,54,1,0,0,0,381,382,5,99,0,0,
        382,383,5,108,0,0,383,384,5,97,0,0,384,385,5,115,0,0,385,386,5,115,
        0,0,386,56,1,0,0,0,387,388,5,121,0,0,388,389,5,105,0,0,389,390,5,
        101,0,0,390,391,5,108,0,0,391,392,5,100,0,0,392,58,1,0,0,0,393,394,
        5,100,0,0,394,395,5,101,0,0,395,396,5,108,0,0,396,60,1,0,0,0,397,
        398,5,112,0,0,398,399,5,97,0,0,399,400,5,115,0,0,400,401,5,115,0,
        0,401,62,1,0,0,0,402,403,5,99,0,0,403,404,5,111,0,0,404,405,5,110,
        0,0,405,406,5,116,0,0,406,407,5,105,0,0,407,408,5,110,0,0,408,409,
        5,117,0,0,409,410,5,101,0,0,410,64,1,0,0,0,411,412,5,98,0,0,412,
        413,5,114,0,0,413,414,5,101,0,0,414,415,5,97,0,0,415,416,5,107,0,
        0,416,66,1,0,0,0,417,418,4,33,0,0,418,430,3,229,114,0,419,421,5,
        13,0,0,420,419,1,0,0,0,420,421,1,0,0,0,421,422,1,0,0,0,422,425,5,
        10,0,0,423,425,5,13,0,0,424,420,1,0,0,0,424,423,1,0,0,0,425,427,
        1,0,0,0,426,428,3,229,114,0,427,426,1,0,0,0,427,428,1,0,0,0,428,
        430,1,0,0,0,429,417,1,0,0,0,429,424,1,0,0,0,430,431,1,0,0,0,431,
        432,6,33,0,0,432,68,1,0,0,0,433,437,3,235,117,0,434,436,3,237,118,
        0,435,434,1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,
        0,438,70,1,0,0,0,439,437,1,0,0,0,440,442,7,0,0,0,441,440,1,0,0,0,
        441,442,1,0,0,0,442,444,1,0,0,0,443,445,7,1,0,0,444,443,1,0,0,0,
        444,445,1,0,0,0,445,448,1,0,0,0,446,449,3,185,92,0,447,449,3,187,
        93,0,448,446,1,0,0,0,448,447,1,0,0,0,449,72,1,0,0,0,450,452,7,2,
        0,0,451,453,7,1,0,0,452,451,1,0,0,0,452,453,1,0,0,0,453,456,1,0,
        0,0,454,457,3,215,107,0,455,457,3,217,108,0,456,454,1,0,0,0,456,
        455,1,0,0,0,457,74,1,0,0,0,458,462,3,195,97,0,459,461,3,197,98,0,
        460,459,1,0,0,0,461,464,1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,
        463,471,1,0,0,0,464,462,1,0,0,0,465,467,5,48,0,0,466,465,1,0,0,0,
        467,468,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,0,469,471,1,0,0,0,
        470,458,1,0,0,0,470,466,1,0,0,0,471,76,1,0,0,0,472,473,5,48,0,0,
        473,475,7,3,0,0,474,476,3,199,99,0,475,474,1,0,0,0,476,477,1,0,0,
        0,477,475,1,0,0,0,477,478,1,0,0,0,478,78,1,0,0,0,479,480,5,48,0,
        0,480,482,7,4,0,0,481,483,3,201,100,0,482,481,1,0,0,0,483,484,1,
        0,0,0,484,482,1,0,0,0,484,485,1,0,0,0,485,80,1,0,0,0,486,487,5,48,
        0,0,487,489,7,2,0,0,488,490,3,203,101,0,489,488,1,0,0,0,490,491,
        1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,492,82,1,0,0,0,493,496,3,
        205,102,0,494,496,3,207,103,0,495,493,1,0,0,0,495,494,1,0,0,0,496,
        84,1,0,0,0,497,500,3,83,41,0,498,500,3,209,104,0,499,497,1,0,0,0,
        499,498,1,0,0,0,500,501,1,0,0,0,501,502,7,5,0,0,502,86,1,0,0,0,503,
        504,5,46,0,0,504,88,1,0,0,0,505,506,5,46,0,0,506,507,5,46,0,0,507,
        508,5,46,0,0,508,90,1,0,0,0,509,510,5,42,0,0,510,92,1,0,0,0,511,
        512,5,40,0,0,512,513,6,46,1,0,513,94,1,0,0,0,514,515,5,41,0,0,515,
        516,6,47,2,0,516,96,1,0,0,0,517,518,5,44,0,0,518,98,1,0,0,0,519,
        520,5,58,0,0,520,100,1,0,0,0,521,522,5,59,0,0,522,102,1,0,0,0,523,
        524,5,42,0,0,524,525,5,42,0,0,525,104,1,0,0,0,526,527,5,61,0,0,527,
        106,1,0,0,0,528,529,5,91,0,0,529,530,6,53,3,0,530,108,1,0,0,0,531,
        532,5,93,0,0,532,533,6,54,4,0,533,110,1,0,0,0,534,535,5,124,0,0,
        535,112,1,0,0,0,536,537,5,94,0,0,537,114,1,0,0,0,538,539,5,38,0,
        0,539,116,1,0,0,0,540,541,5,60,0,0,541,542,5,60,0,0,542,118,1,0,
        0,0,543,544,5,62,0,0,544,545,5,62,0,0,545,120,1,0,0,0,546,547,5,
        43,0,0,547,122,1,0,0,0,548,549,5,45,0,0,549,124,1,0,0,0,550,551,
        5,47,0,0,551,126,1,0,0,0,552,553,5,37,0,0,553,128,1,0,0,0,554,555,
        5,47,0,0,555,556,5,47,0,0,556,130,1,0,0,0,557,558,5,126,0,0,558,
        132,1,0,0,0,559,560,5,123,0,0,560,561,6,66,5,0,561,134,1,0,0,0,562,
        563,5,125,0,0,563,564,6,67,6,0,564,136,1,0,0,0,565,566,5,60,0,0,
        566,138,1,0,0,0,567,568,5,62,0,0,568,140,1,0,0,0,569,570,5,61,0,
        0,570,571,5,61,0,0,571,142,1,0,0,0,572,573,5,62,0,0,573,574,5,61,
        0,0,574,144,1,0,0,0,575,576,5,60,0,0,576,577,5,61,0,0,577,146,1,
        0,0,0,578,579,5,60,0,0,579,580,5,62,0,0,580,148,1,0,0,0,581,582,
        5,33,0,0,582,583,5,61,0,0,583,150,1,0,0,0,584,585,5,64,0,0,585,152,
        1,0,0,0,586,587,5,45,0,0,587,588,5,62,0,0,588,154,1,0,0,0,589,590,
        5,43,0,0,590,591,5,61,0,0,591,156,1,0,0,0,592,593,5,45,0,0,593,594,
        5,61,0,0,594,158,1,0,0,0,595,596,5,42,0,0,596,597,5,61,0,0,597,160,
        1,0,0,0,598,599,5,64,0,0,599,600,5,61,0,0,600,162,1,0,0,0,601,602,
        5,47,0,0,602,603,5,61,0,0,603,164,1,0,0,0,604,605,5,37,0,0,605,606,
        5,61,0,0,606,166,1,0,0,0,607,608,5,38,0,0,608,609,5,61,0,0,609,168,
        1,0,0,0,610,611,5,124,0,0,611,612,5,61,0,0,612,170,1,0,0,0,613,614,
        5,94,0,0,614,615,5,61,0,0,615,172,1,0,0,0,616,617,5,60,0,0,617,618,
        5,60,0,0,618,619,5,61,0,0,619,174,1,0,0,0,620,621,5,62,0,0,621,622,
        5,62,0,0,622,623,5,61,0,0,623,176,1,0,0,0,624,625,5,42,0,0,625,626,
        5,42,0,0,626,627,5,61,0,0,627,178,1,0,0,0,628,629,5,47,0,0,629,630,
        5,47,0,0,630,631,5,61,0,0,631,180,1,0,0,0,632,636,3,229,114,0,633,
        636,3,231,115,0,634,636,3,233,116,0,635,632,1,0,0,0,635,633,1,0,
        0,0,635,634,1,0,0,0,636,637,1,0,0,0,637,638,6,90,7,0,638,182,1,0,
        0,0,639,640,9,0,0,0,640,184,1,0,0,0,641,646,5,39,0,0,642,645,3,193,
        96,0,643,645,8,6,0,0,644,642,1,0,0,0,644,643,1,0,0,0,645,648,1,0,
        0,0,646,644,1,0,0,0,646,647,1,0,0,0,647,649,1,0,0,0,648,646,1,0,
        0,0,649,660,5,39,0,0,650,655,5,34,0,0,651,654,3,193,96,0,652,654,
        8,7,0,0,653,651,1,0,0,0,653,652,1,0,0,0,654,657,1,0,0,0,655,653,
        1,0,0,0,655,656,1,0,0,0,656,658,1,0,0,0,657,655,1,0,0,0,658,660,
        5,34,0,0,659,641,1,0,0,0,659,650,1,0,0,0,660,186,1,0,0,0,661,662,
        5,39,0,0,662,663,5,39,0,0,663,664,5,39,0,0,664,668,1,0,0,0,665,667,
        3,189,94,0,666,665,1,0,0,0,667,670,1,0,0,0,668,669,1,0,0,0,668,666,
        1,0,0,0,669,671,1,0,0,0,670,668,1,0,0,0,671,672,5,39,0,0,672,673,
        5,39,0,0,673,688,5,39,0,0,674,675,5,34,0,0,675,676,5,34,0,0,676,
        677,5,34,0,0,677,681,1,0,0,0,678,680,3,189,94,0,679,678,1,0,0,0,
        680,683,1,0,0,0,681,682,1,0,0,0,681,679,1,0,0,0,682,684,1,0,0,0,
        683,681,1,0,0,0,684,685,5,34,0,0,685,686,5,34,0,0,686,688,5,34,0,
        0,687,661,1,0,0,0,687,674,1,0,0,0,688,188,1,0,0,0,689,692,3,191,
        95,0,690,692,3,193,96,0,691,689,1,0,0,0,691,690,1,0,0,0,692,190,
        1,0,0,0,693,694,8,8,0,0,694,192,1,0,0,0,695,696,5,92,0,0,696,697,
        9,0,0,0,697,194,1,0,0,0,698,699,7,9,0,0,699,196,1,0,0,0,700,701,
        7,10,0,0,701,198,1,0,0,0,702,703,7,11,0,0,703,200,1,0,0,0,704,705,
        7,12,0,0,705,202,1,0,0,0,706,707,7,13,0,0,707,204,1,0,0,0,708,710,
        3,209,104,0,709,708,1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,
        716,3,211,105,0,712,713,3,209,104,0,713,714,5,46,0,0,714,716,1,0,
        0,0,715,709,1,0,0,0,715,712,1,0,0,0,716,206,1,0,0,0,717,720,3,209,
        104,0,718,720,3,205,102,0,719,717,1,0,0,0,719,718,1,0,0,0,720,721,
        1,0,0,0,721,722,3,213,106,0,722,208,1,0,0,0,723,725,3,197,98,0,724,
        723,1,0,0,0,725,726,1,0,0,0,726,724,1,0,0,0,726,727,1,0,0,0,727,
        210,1,0,0,0,728,730,5,46,0,0,729,731,3,197,98,0,730,729,1,0,0,0,
        731,732,1,0,0,0,732,730,1,0,0,0,732,733,1,0,0,0,733,212,1,0,0,0,
        734,736,7,14,0,0,735,737,7,15,0,0,736,735,1,0,0,0,736,737,1,0,0,
        0,737,739,1,0,0,0,738,740,3,197,98,0,739,738,1,0,0,0,740,741,1,0,
        0,0,741,739,1,0,0,0,741,742,1,0,0,0,742,214,1,0,0,0,743,748,5,39,
        0,0,744,747,3,221,110,0,745,747,3,227,113,0,746,744,1,0,0,0,746,
        745,1,0,0,0,747,750,1,0,0,0,748,746,1,0,0,0,748,749,1,0,0,0,749,
        751,1,0,0,0,750,748,1,0,0,0,751,762,5,39,0,0,752,757,5,34,0,0,753,
        756,3,223,111,0,754,756,3,227,113,0,755,753,1,0,0,0,755,754,1,0,
        0,0,756,759,1,0,0,0,757,755,1,0,0,0,757,758,1,0,0,0,758,760,1,0,
        0,0,759,757,1,0,0,0,760,762,5,34,0,0,761,743,1,0,0,0,761,752,1,0,
        0,0,762,216,1,0,0,0,763,764,5,39,0,0,764,765,5,39,0,0,765,766,5,
        39,0,0,766,770,1,0,0,0,767,769,3,219,109,0,768,767,1,0,0,0,769,772,
        1,0,0,0,770,771,1,0,0,0,770,768,1,0,0,0,771,773,1,0,0,0,772,770,
        1,0,0,0,773,774,5,39,0,0,774,775,5,39,0,0,775,790,5,39,0,0,776,777,
        5,34,0,0,777,778,5,34,0,0,778,779,5,34,0,0,779,783,1,0,0,0,780,782,
        3,219,109,0,781,780,1,0,0,0,782,785,1,0,0,0,783,784,1,0,0,0,783,
        781,1,0,0,0,784,786,1,0,0,0,785,783,1,0,0,0,786,787,5,34,0,0,787,
        788,5,34,0,0,788,790,5,34,0,0,789,763,1,0,0,0,789,776,1,0,0,0,790,
        218,1,0,0,0,791,794,3,225,112,0,792,794,3,227,113,0,793,791,1,0,
        0,0,793,792,1,0,0,0,794,220,1,0,0,0,795,797,7,16,0,0,796,795,1,0,
        0,0,797,222,1,0,0,0,798,800,7,17,0,0,799,798,1,0,0,0,800,224,1,0,
        0,0,801,803,7,18,0,0,802,801,1,0,0,0,803,226,1,0,0,0,804,805,5,92,
        0,0,805,806,7,19,0,0,806,228,1,0,0,0,807,809,7,20,0,0,808,807,1,
        0,0,0,809,810,1,0,0,0,810,808,1,0,0,0,810,811,1,0,0,0,811,230,1,
        0,0,0,812,816,5,35,0,0,813,815,8,21,0,0,814,813,1,0,0,0,815,818,
        1,0,0,0,816,814,1,0,0,0,816,817,1,0,0,0,817,232,1,0,0,0,818,816,
        1,0,0,0,819,821,5,92,0,0,820,822,3,229,114,0,821,820,1,0,0,0,821,
        822,1,0,0,0,822,828,1,0,0,0,823,825,5,13,0,0,824,823,1,0,0,0,824,
        825,1,0,0,0,825,826,1,0,0,0,826,829,5,10,0,0,827,829,5,13,0,0,828,
        824,1,0,0,0,828,827,1,0,0,0,829,234,1,0,0,0,830,832,7,22,0,0,831,
        830,1,0,0,0,832,236,1,0,0,0,833,836,3,235,117,0,834,836,7,23,0,0,
        835,833,1,0,0,0,835,834,1,0,0,0,836,238,1,0,0,0,55,0,420,424,427,
        429,437,441,444,448,452,456,462,468,470,477,484,491,495,499,635,
        644,646,653,655,659,668,681,687,691,709,715,719,726,732,736,741,
        746,748,755,757,761,770,783,789,793,796,799,802,810,816,821,824,
        828,831,835,8,1,33,0,1,46,1,1,47,2,1,53,3,1,54,4,1,66,5,1,67,6,6,
        0,0
    ]

class VyperLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DEF = 1
    RETURN = 2
    RAISE = 3
    FROM = 4
    IMPORT = 5
    AS = 6
    GLOBAL = 7
    NONLOCAL = 8
    ASSERT = 9
    IF = 10
    ELIF = 11
    ELSE = 12
    WHILE = 13
    FOR = 14
    IN = 15
    TRY = 16
    FINALLY = 17
    WITH = 18
    EXCEPT = 19
    LAMBDA = 20
    OR = 21
    AND = 22
    NOT = 23
    IS = 24
    NONE = 25
    TRUE = 26
    FALSE = 27
    CLASS = 28
    YIELD = 29
    DEL = 30
    PASS = 31
    CONTINUE = 32
    BREAK = 33
    NEWLINE = 34
    NAME = 35
    STRING_LITERAL = 36
    BYTES_LITERAL = 37
    DECIMAL_INTEGER = 38
    OCT_INTEGER = 39
    HEX_INTEGER = 40
    BIN_INTEGER = 41
    FLOAT_NUMBER = 42
    IMAG_NUMBER = 43
    DOT = 44
    ELLIPSIS = 45
    STAR = 46
    OPEN_PAREN = 47
    CLOSE_PAREN = 48
    COMMA = 49
    COLON = 50
    SEMI_COLON = 51
    POWER = 52
    ASSIGN = 53
    OPEN_BRACK = 54
    CLOSE_BRACK = 55
    OR_OP = 56
    XOR = 57
    AND_OP = 58
    LEFT_SHIFT = 59
    RIGHT_SHIFT = 60
    ADD = 61
    MINUS = 62
    DIV = 63
    MOD = 64
    IDIV = 65
    NOT_OP = 66
    OPEN_BRACE = 67
    CLOSE_BRACE = 68
    LESS_THAN = 69
    GREATER_THAN = 70
    EQUALS = 71
    GT_EQ = 72
    LT_EQ = 73
    NOT_EQ_1 = 74
    NOT_EQ_2 = 75
    AT = 76
    ARROW = 77
    ADD_ASSIGN = 78
    SUB_ASSIGN = 79
    MULT_ASSIGN = 80
    AT_ASSIGN = 81
    DIV_ASSIGN = 82
    MOD_ASSIGN = 83
    AND_ASSIGN = 84
    OR_ASSIGN = 85
    XOR_ASSIGN = 86
    LEFT_SHIFT_ASSIGN = 87
    RIGHT_SHIFT_ASSIGN = 88
    POWER_ASSIGN = 89
    IDIV_ASSIGN = 90
    SKIP_ = 91
    UNKNOWN_CHAR = 92

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'def'", "'return'", "'raise'", "'from'", "'import'", "'as'", 
            "'global'", "'nonlocal'", "'assert'", "'if'", "'elif'", "'else'", 
            "'while'", "'for'", "'in'", "'try'", "'finally'", "'with'", 
            "'except'", "'lambda'", "'or'", "'and'", "'not'", "'is'", "'None'", 
            "'True'", "'False'", "'class'", "'yield'", "'del'", "'pass'", 
            "'continue'", "'break'", "'.'", "'...'", "'*'", "'('", "')'", 
            "','", "':'", "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", 
            "'&'", "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", "'~'", 
            "'{'", "'}'", "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", 
            "'!='", "'@'", "'->'", "'+='", "'-='", "'*='", "'@='", "'/='", 
            "'%='", "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", "'//='" ]

    symbolicNames = [ "<INVALID>",
            "DEF", "RETURN", "RAISE", "FROM", "IMPORT", "AS", "GLOBAL", 
            "NONLOCAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", "FOR", 
            "IN", "TRY", "FINALLY", "WITH", "EXCEPT", "LAMBDA", "OR", "AND", 
            "NOT", "IS", "NONE", "TRUE", "FALSE", "CLASS", "YIELD", "DEL", 
            "PASS", "CONTINUE", "BREAK", "NEWLINE", "NAME", "STRING_LITERAL", 
            "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", 
            "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", "DOT", "ELLIPSIS", 
            "STAR", "OPEN_PAREN", "CLOSE_PAREN", "COMMA", "COLON", "SEMI_COLON", 
            "POWER", "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", 
            "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", 
            "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", "LESS_THAN", 
            "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", 
            "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", 
            "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
            "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", 
            "SKIP_", "UNKNOWN_CHAR" ]

    ruleNames = [ "DEF", "RETURN", "RAISE", "FROM", "IMPORT", "AS", "GLOBAL", 
                  "NONLOCAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", "FOR", 
                  "IN", "TRY", "FINALLY", "WITH", "EXCEPT", "LAMBDA", "OR", 
                  "AND", "NOT", "IS", "NONE", "TRUE", "FALSE", "CLASS", 
                  "YIELD", "DEL", "PASS", "CONTINUE", "BREAK", "NEWLINE", 
                  "NAME", "STRING_LITERAL", "BYTES_LITERAL", "DECIMAL_INTEGER", 
                  "OCT_INTEGER", "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", 
                  "IMAG_NUMBER", "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", 
                  "CLOSE_PAREN", "COMMA", "COLON", "SEMI_COLON", "POWER", 
                  "ASSIGN", "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", 
                  "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", 
                  "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                  "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                  "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", 
                  "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                  "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", 
                  "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", "SKIP_", 
                  "UNKNOWN_CHAR", "SHORT_STRING", "LONG_STRING", "LONG_STRING_ITEM", 
                  "LONG_STRING_CHAR", "STRING_ESCAPE_SEQ", "NON_ZERO_DIGIT", 
                  "DIGIT", "OCT_DIGIT", "HEX_DIGIT", "BIN_DIGIT", "POINT_FLOAT", 
                  "EXPONENT_FLOAT", "INT_PART", "FRACTION", "EXPONENT", 
                  "SHORT_BYTES", "LONG_BYTES", "LONG_BYTES_ITEM", "SHORT_BYTES_CHAR_NO_SINGLE_QUOTE", 
                  "SHORT_BYTES_CHAR_NO_DOUBLE_QUOTE", "LONG_BYTES_CHAR", 
                  "BYTES_ESCAPE_SEQ", "SPACES", "COMMENT", "LINE_JOINING", 
                  "ID_START", "ID_CONTINUE" ]

    grammarFileName = "Vyper.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    @property
    def tokens(self):
        try:
            return self._tokens
        except AttributeError:
            self._tokens = []
            return self._tokens

    @property
    def indents(self):
        try:
            return self._indents
        except AttributeError:
            self._indents = []
            return self._indents

    @property
    def opened(self):
        try:
            return self._opened
        except AttributeError:
            self._opened = 0
            return self._opened

    @opened.setter
    def opened(self, value):
        self._opened = value

    @property
    def lastToken(self):
        try:
            return self._lastToken
        except AttributeError:
            self._lastToken = None
            return self._lastToken

    @lastToken.setter
    def lastToken(self, value):
        self._lastToken = value

    def reset(self):
        super().reset()
        self.tokens = []
        self.indents = []
        self.opened = 0
        self.lastToken = None

    def emitToken(self, t):
        super().emitToken(t)
        self.tokens.append(t)

    def nextToken(self):
        if self._input.LA(1) == Token.EOF and self.indents:
            for i in range(len(self.tokens)-1,-1,-1):
                if self.tokens[i].type == Token.EOF:
                    self.tokens.pop(i)

            self.emitToken(self.commonToken(LanguageParser.NEWLINE, '\n'))
            while self.indents:
                self.emitToken(self.createDedent())
                self.indents.pop()

            self.emitToken(self.commonToken(LanguageParser.EOF, "<EOF>"))
        next = super().nextToken()
        if next.channel == Token.DEFAULT_CHANNEL:
            self.lastToken = next
        return next if not self.tokens else self.tokens.pop(0)

    def createDedent(self):
        dedent = self.commonToken(LanguageParser.DEDENT, "")
        dedent.line = self.lastToken.line
        return dedent

    def commonToken(self, type, text, indent=0):
        stop = self.getCharIndex()-1-indent
        start = (stop - len(text) + 1) if text else stop
        return CommonToken(self._tokenFactorySourcePair, type, super().DEFAULT_TOKEN_CHANNEL, start, stop)

    @staticmethod
    def getIndentationCount(spaces):
        count = 0
        for ch in spaces:
            if ch == '\t':
                count += 8 - (count % 8)
            else:
                count += 1
        return count

    def atStartOfInput(self):
        return Lexer.column.fget(self) == 0 and Lexer.line.fget(self) == 1


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[33] = self.NEWLINE_action 
            actions[46] = self.OPEN_PAREN_action 
            actions[47] = self.CLOSE_PAREN_action 
            actions[53] = self.OPEN_BRACK_action 
            actions[54] = self.CLOSE_BRACK_action 
            actions[66] = self.OPEN_BRACE_action 
            actions[67] = self.CLOSE_BRACE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

            tempt = Lexer.text.fget(self)
            newLine = re.sub("[^\r\n]+", "", tempt)
            spaces = re.sub("[\r\n]+", "", tempt)
            la_char = ""
            try:
                la = self._input.LA(1)
                la_char = chr(la)       # Python does not compare char to ints directly
            except ValueError:          # End of file
                pass

            if self.opened > 0 or la_char == '\r' or la_char == '\n' or la_char == '#':
                self.skip()
            else:
                indent = self.getIndentationCount(spaces)
                previous = self.indents[-1] if self.indents else 0
                self.emitToken(self.commonToken(self.NEWLINE, newLine, indent=indent))      # NEWLINE is actually the '\n' char
                if indent == previous:
                    self.skip()
                elif indent > previous:
                    self.indents.append(indent)
                    self.emitToken(self.commonToken(LanguageParser.INDENT, spaces))
                else:
                    while self.indents and self.indents[-1] > indent:
                        self.emitToken(self.createDedent())
                        self.indents.pop()
                
     

    def OPEN_PAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.opened += 1
     

    def CLOSE_PAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.opened -= 1
     

    def OPEN_BRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.opened += 1
     

    def CLOSE_BRACK_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            self.opened -= 1
     

    def OPEN_BRACE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
            self.opened += 1
     

    def CLOSE_BRACE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:
            self.opened -= 1
     

    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[33] = self.NEWLINE_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return self.atStartOfInput()
         


