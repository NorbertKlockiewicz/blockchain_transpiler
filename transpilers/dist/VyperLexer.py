# Generated from VyperLexer.g4 by ANTLR 4.13.0
from antlr4 import *
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from antlr_denter.DenterHelper import DenterHelper
from transpilers.dist.VyperParser import VyperParser


def serializedATN():
    return [
        4,0,79,623,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,1,
        0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,
        3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,
        10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
        20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,
        23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,
        31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,
        36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,
        40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,
        42,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,1,
        45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
        46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,
        49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,
        54,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,
        59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,
        63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,
        64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,457,8,64,1,65,1,65,5,65,461,
        8,65,10,65,12,65,464,9,65,1,66,1,66,5,66,468,8,66,10,66,12,66,471,
        9,66,1,67,3,67,474,8,67,1,67,1,67,1,67,5,67,479,8,67,10,67,12,67,
        482,9,67,1,67,1,67,3,67,486,8,67,1,67,1,67,1,67,5,67,491,8,67,10,
        67,12,67,494,9,67,1,67,3,67,497,8,67,1,68,5,68,500,8,68,10,68,12,
        68,503,9,68,1,68,1,68,1,68,1,68,1,68,1,68,5,68,511,8,68,10,68,12,
        68,514,9,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,5,68,525,
        8,68,10,68,12,68,528,9,68,1,68,1,68,1,68,3,68,533,8,68,1,69,1,69,
        1,69,1,69,1,69,1,69,3,69,541,8,69,1,70,4,70,544,8,70,11,70,12,70,
        545,1,71,1,71,1,71,1,71,5,71,552,8,71,10,71,12,71,555,9,71,1,72,
        1,72,1,72,1,72,5,72,561,8,72,10,72,12,72,564,9,72,1,73,1,73,1,73,
        1,73,5,73,570,8,73,10,73,12,73,573,9,73,1,74,3,74,576,8,74,1,74,
        5,74,579,8,74,10,74,12,74,582,9,74,1,74,3,74,585,8,74,1,74,4,74,
        588,8,74,11,74,12,74,589,1,75,4,75,593,8,75,11,75,12,75,594,1,75,
        1,75,1,76,3,76,600,8,76,1,76,1,76,5,76,604,8,76,10,76,12,76,607,
        9,76,1,76,1,76,1,77,5,77,612,8,77,10,77,12,77,615,9,77,1,77,1,77,
        5,77,619,8,77,10,77,12,77,622,9,77,4,480,492,512,526,0,78,1,3,3,
        4,5,5,7,6,9,7,11,8,13,9,15,10,17,11,19,12,21,13,23,14,25,15,27,16,
        29,17,31,18,33,19,35,20,37,21,39,22,41,23,43,24,45,25,47,26,49,27,
        51,28,53,29,55,30,57,31,59,32,61,33,63,34,65,35,67,36,69,37,71,38,
        73,39,75,40,77,41,79,42,81,43,83,44,85,45,87,46,89,47,91,48,93,49,
        95,50,97,51,99,52,101,53,103,54,105,55,107,56,109,57,111,58,113,
        59,115,60,117,61,119,62,121,63,123,64,125,65,127,66,129,67,131,68,
        133,69,135,70,137,71,139,0,141,72,143,73,145,74,147,75,149,76,151,
        77,153,78,155,79,1,0,9,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,48,57,2,0,48,57,97,102,1,0,48,55,1,0,48,49,2,0,43,
        43,45,45,1,0,46,46,2,0,10,10,12,13,652,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
        1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
        1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
        1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
        1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
        1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
        1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
        105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,
        0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,
        1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,
        0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,141,1,0,0,0,0,143,1,
        0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,
        153,1,0,0,0,0,155,1,0,0,0,1,157,1,0,0,0,3,160,1,0,0,0,5,165,1,0,
        0,0,7,172,1,0,0,0,9,174,1,0,0,0,11,176,1,0,0,0,13,178,1,0,0,0,15,
        180,1,0,0,0,17,182,1,0,0,0,19,185,1,0,0,0,21,188,1,0,0,0,23,191,
        1,0,0,0,25,194,1,0,0,0,27,197,1,0,0,0,29,200,1,0,0,0,31,209,1,0,
        0,0,33,219,1,0,0,0,35,226,1,0,0,0,37,234,1,0,0,0,39,245,1,0,0,0,
        41,254,1,0,0,0,43,258,1,0,0,0,45,261,1,0,0,0,47,267,1,0,0,0,49,272,
        1,0,0,0,51,280,1,0,0,0,53,287,1,0,0,0,55,297,1,0,0,0,57,299,1,0,
        0,0,59,301,1,0,0,0,61,303,1,0,0,0,63,305,1,0,0,0,65,307,1,0,0,0,
        67,309,1,0,0,0,69,312,1,0,0,0,71,315,1,0,0,0,73,318,1,0,0,0,75,323,
        1,0,0,0,77,329,1,0,0,0,79,338,1,0,0,0,81,342,1,0,0,0,83,349,1,0,
        0,0,85,355,1,0,0,0,87,362,1,0,0,0,89,365,1,0,0,0,91,370,1,0,0,0,
        93,375,1,0,0,0,95,387,1,0,0,0,97,391,1,0,0,0,99,394,1,0,0,0,101,
        398,1,0,0,0,103,401,1,0,0,0,105,405,1,0,0,0,107,407,1,0,0,0,109,
        409,1,0,0,0,111,411,1,0,0,0,113,413,1,0,0,0,115,416,1,0,0,0,117,
        419,1,0,0,0,119,422,1,0,0,0,121,425,1,0,0,0,123,427,1,0,0,0,125,
        429,1,0,0,0,127,435,1,0,0,0,129,456,1,0,0,0,131,458,1,0,0,0,133,
        465,1,0,0,0,135,496,1,0,0,0,137,501,1,0,0,0,139,540,1,0,0,0,141,
        543,1,0,0,0,143,547,1,0,0,0,145,556,1,0,0,0,147,565,1,0,0,0,149,
        575,1,0,0,0,151,592,1,0,0,0,153,599,1,0,0,0,155,613,1,0,0,0,157,
        158,5,97,0,0,158,159,5,115,0,0,159,2,1,0,0,0,160,161,5,102,0,0,161,
        162,5,114,0,0,162,163,5,111,0,0,163,164,5,109,0,0,164,4,1,0,0,0,
        165,166,5,105,0,0,166,167,5,109,0,0,167,168,5,112,0,0,168,169,5,
        111,0,0,169,170,5,114,0,0,170,171,5,116,0,0,171,6,1,0,0,0,172,173,
        5,46,0,0,173,8,1,0,0,0,174,175,5,44,0,0,175,10,1,0,0,0,176,177,5,
        58,0,0,177,12,1,0,0,0,178,179,5,61,0,0,179,14,1,0,0,0,180,181,5,
        64,0,0,181,16,1,0,0,0,182,183,5,40,0,0,183,184,6,8,0,0,184,18,1,
        0,0,0,185,186,5,41,0,0,186,187,6,9,1,0,187,20,1,0,0,0,188,189,5,
        91,0,0,189,190,6,10,2,0,190,22,1,0,0,0,191,192,5,93,0,0,192,193,
        6,11,3,0,193,24,1,0,0,0,194,195,5,123,0,0,195,196,6,12,4,0,196,26,
        1,0,0,0,197,198,5,125,0,0,198,199,6,13,5,0,199,28,1,0,0,0,200,201,
        5,99,0,0,201,202,5,111,0,0,202,203,5,110,0,0,203,204,5,115,0,0,204,
        205,5,116,0,0,205,206,5,97,0,0,206,207,5,110,0,0,207,208,5,116,0,
        0,208,30,1,0,0,0,209,210,5,105,0,0,210,211,5,109,0,0,211,212,5,109,
        0,0,212,213,5,117,0,0,213,214,5,116,0,0,214,215,5,97,0,0,215,216,
        5,98,0,0,216,217,5,108,0,0,217,218,5,101,0,0,218,32,1,0,0,0,219,
        220,5,112,0,0,220,221,5,117,0,0,221,222,5,98,0,0,222,223,5,108,0,
        0,223,224,5,105,0,0,224,225,5,99,0,0,225,34,1,0,0,0,226,227,5,105,
        0,0,227,228,5,110,0,0,228,229,5,100,0,0,229,230,5,101,0,0,230,231,
        5,120,0,0,231,232,5,101,0,0,232,233,5,100,0,0,233,36,1,0,0,0,234,
        235,5,105,0,0,235,236,5,109,0,0,236,237,5,112,0,0,237,238,5,108,
        0,0,238,239,5,101,0,0,239,240,5,109,0,0,240,241,5,101,0,0,241,242,
        5,110,0,0,242,243,5,116,0,0,243,244,5,115,0,0,244,38,1,0,0,0,245,
        246,5,68,0,0,246,247,5,121,0,0,247,248,5,110,0,0,248,249,5,65,0,
        0,249,250,5,114,0,0,250,251,5,114,0,0,251,252,5,97,0,0,252,253,5,
        121,0,0,253,40,1,0,0,0,254,255,5,100,0,0,255,256,5,101,0,0,256,257,
        5,102,0,0,257,42,1,0,0,0,258,259,5,45,0,0,259,260,5,62,0,0,260,44,
        1,0,0,0,261,262,5,101,0,0,262,263,5,118,0,0,263,264,5,101,0,0,264,
        265,5,110,0,0,265,266,5,116,0,0,266,46,1,0,0,0,267,268,5,101,0,0,
        268,269,5,110,0,0,269,270,5,117,0,0,270,271,5,109,0,0,271,48,1,0,
        0,0,272,273,5,72,0,0,273,274,5,97,0,0,274,275,5,115,0,0,275,276,
        5,104,0,0,276,277,5,77,0,0,277,278,5,97,0,0,278,279,5,112,0,0,279,
        50,1,0,0,0,280,281,5,115,0,0,281,282,5,116,0,0,282,283,5,114,0,0,
        283,284,5,117,0,0,284,285,5,99,0,0,285,286,5,116,0,0,286,52,1,0,
        0,0,287,288,5,105,0,0,288,289,5,110,0,0,289,290,5,116,0,0,290,291,
        5,101,0,0,291,292,5,114,0,0,292,293,5,102,0,0,293,294,5,97,0,0,294,
        295,5,99,0,0,295,296,5,101,0,0,296,54,1,0,0,0,297,298,5,95,0,0,298,
        56,1,0,0,0,299,300,5,43,0,0,300,58,1,0,0,0,301,302,5,45,0,0,302,
        60,1,0,0,0,303,304,5,42,0,0,304,62,1,0,0,0,305,306,5,47,0,0,306,
        64,1,0,0,0,307,308,5,37,0,0,308,66,1,0,0,0,309,310,5,42,0,0,310,
        311,5,42,0,0,311,68,1,0,0,0,312,313,5,60,0,0,313,314,5,60,0,0,314,
        70,1,0,0,0,315,316,5,62,0,0,316,317,5,62,0,0,317,72,1,0,0,0,318,
        319,5,112,0,0,319,320,5,97,0,0,320,321,5,115,0,0,321,322,5,115,0,
        0,322,74,1,0,0,0,323,324,5,98,0,0,324,325,5,114,0,0,325,326,5,101,
        0,0,326,327,5,97,0,0,327,328,5,107,0,0,328,76,1,0,0,0,329,330,5,
        99,0,0,330,331,5,111,0,0,331,332,5,110,0,0,332,333,5,116,0,0,333,
        334,5,105,0,0,334,335,5,110,0,0,335,336,5,117,0,0,336,337,5,101,
        0,0,337,78,1,0,0,0,338,339,5,108,0,0,339,340,5,111,0,0,340,341,5,
        103,0,0,341,80,1,0,0,0,342,343,5,114,0,0,343,344,5,101,0,0,344,345,
        5,116,0,0,345,346,5,117,0,0,346,347,5,114,0,0,347,348,5,110,0,0,
        348,82,1,0,0,0,349,350,5,114,0,0,350,351,5,97,0,0,351,352,5,105,
        0,0,352,353,5,115,0,0,353,354,5,101,0,0,354,84,1,0,0,0,355,356,5,
        97,0,0,356,357,5,115,0,0,357,358,5,115,0,0,358,359,5,101,0,0,359,
        360,5,114,0,0,360,361,5,116,0,0,361,86,1,0,0,0,362,363,5,105,0,0,
        363,364,5,102,0,0,364,88,1,0,0,0,365,366,5,101,0,0,366,367,5,108,
        0,0,367,368,5,115,0,0,368,369,5,101,0,0,369,90,1,0,0,0,370,371,5,
        101,0,0,371,372,5,108,0,0,372,373,5,105,0,0,373,374,5,102,0,0,374,
        92,1,0,0,0,375,376,5,85,0,0,376,377,5,78,0,0,377,378,5,82,0,0,378,
        379,5,69,0,0,379,380,5,65,0,0,380,381,5,67,0,0,381,382,5,72,0,0,
        382,383,5,65,0,0,383,384,5,66,0,0,384,385,5,76,0,0,385,386,5,69,
        0,0,386,94,1,0,0,0,387,388,5,102,0,0,388,389,5,111,0,0,389,390,5,
        114,0,0,390,96,1,0,0,0,391,392,5,105,0,0,392,393,5,110,0,0,393,98,
        1,0,0,0,394,395,5,97,0,0,395,396,5,110,0,0,396,397,5,100,0,0,397,
        100,1,0,0,0,398,399,5,111,0,0,399,400,5,114,0,0,400,102,1,0,0,0,
        401,402,5,110,0,0,402,403,5,111,0,0,403,404,5,116,0,0,404,104,1,
        0,0,0,405,406,5,126,0,0,406,106,1,0,0,0,407,408,5,38,0,0,408,108,
        1,0,0,0,409,410,5,124,0,0,410,110,1,0,0,0,411,412,5,94,0,0,412,112,
        1,0,0,0,413,414,5,61,0,0,414,415,5,61,0,0,415,114,1,0,0,0,416,417,
        5,33,0,0,417,418,5,61,0,0,418,116,1,0,0,0,419,420,5,60,0,0,420,421,
        5,61,0,0,421,118,1,0,0,0,422,423,5,62,0,0,423,424,5,61,0,0,424,120,
        1,0,0,0,425,426,5,60,0,0,426,122,1,0,0,0,427,428,5,62,0,0,428,124,
        1,0,0,0,429,430,5,101,0,0,430,431,5,109,0,0,431,432,5,112,0,0,432,
        433,5,116,0,0,433,434,5,121,0,0,434,126,1,0,0,0,435,436,5,95,0,0,
        436,437,5,97,0,0,437,438,5,98,0,0,438,439,5,105,0,0,439,440,5,95,
        0,0,440,441,5,100,0,0,441,442,5,101,0,0,442,443,5,99,0,0,443,444,
        5,111,0,0,444,445,5,100,0,0,445,446,5,101,0,0,446,128,1,0,0,0,447,
        448,5,84,0,0,448,449,5,114,0,0,449,450,5,117,0,0,450,457,5,101,0,
        0,451,452,5,70,0,0,452,453,5,97,0,0,453,454,5,108,0,0,454,455,5,
        115,0,0,455,457,5,101,0,0,456,447,1,0,0,0,456,451,1,0,0,0,457,130,
        1,0,0,0,458,462,7,0,0,0,459,461,7,1,0,0,460,459,1,0,0,0,461,464,
        1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,132,1,0,0,0,464,462,
        1,0,0,0,465,469,7,0,0,0,466,468,7,1,0,0,467,466,1,0,0,0,468,471,
        1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,134,1,0,0,0,471,469,
        1,0,0,0,472,474,5,98,0,0,473,472,1,0,0,0,473,474,1,0,0,0,474,475,
        1,0,0,0,475,480,5,34,0,0,476,479,3,139,69,0,477,479,9,0,0,0,478,
        476,1,0,0,0,478,477,1,0,0,0,479,482,1,0,0,0,480,481,1,0,0,0,480,
        478,1,0,0,0,481,483,1,0,0,0,482,480,1,0,0,0,483,497,5,34,0,0,484,
        486,5,98,0,0,485,484,1,0,0,0,485,486,1,0,0,0,486,487,1,0,0,0,487,
        492,5,39,0,0,488,491,3,139,69,0,489,491,9,0,0,0,490,488,1,0,0,0,
        490,489,1,0,0,0,491,494,1,0,0,0,492,493,1,0,0,0,492,490,1,0,0,0,
        493,495,1,0,0,0,494,492,1,0,0,0,495,497,5,39,0,0,496,473,1,0,0,0,
        496,485,1,0,0,0,497,136,1,0,0,0,498,500,5,32,0,0,499,498,1,0,0,0,
        500,503,1,0,0,0,501,499,1,0,0,0,501,502,1,0,0,0,502,532,1,0,0,0,
        503,501,1,0,0,0,504,505,5,34,0,0,505,506,5,34,0,0,506,507,5,34,0,
        0,507,512,1,0,0,0,508,511,3,139,69,0,509,511,9,0,0,0,510,508,1,0,
        0,0,510,509,1,0,0,0,511,514,1,0,0,0,512,513,1,0,0,0,512,510,1,0,
        0,0,513,515,1,0,0,0,514,512,1,0,0,0,515,516,5,34,0,0,516,517,5,34,
        0,0,517,533,5,34,0,0,518,519,5,39,0,0,519,520,5,39,0,0,520,521,5,
        39,0,0,521,526,1,0,0,0,522,525,3,139,69,0,523,525,9,0,0,0,524,522,
        1,0,0,0,524,523,1,0,0,0,525,528,1,0,0,0,526,527,1,0,0,0,526,524,
        1,0,0,0,527,529,1,0,0,0,528,526,1,0,0,0,529,530,5,39,0,0,530,531,
        5,39,0,0,531,533,5,39,0,0,532,504,1,0,0,0,532,518,1,0,0,0,533,138,
        1,0,0,0,534,535,5,92,0,0,535,541,5,92,0,0,536,537,5,92,0,0,537,541,
        5,34,0,0,538,539,5,92,0,0,539,541,5,39,0,0,540,534,1,0,0,0,540,536,
        1,0,0,0,540,538,1,0,0,0,541,140,1,0,0,0,542,544,7,2,0,0,543,542,
        1,0,0,0,544,545,1,0,0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,142,
        1,0,0,0,547,548,5,48,0,0,548,549,5,120,0,0,549,553,1,0,0,0,550,552,
        7,3,0,0,551,550,1,0,0,0,552,555,1,0,0,0,553,551,1,0,0,0,553,554,
        1,0,0,0,554,144,1,0,0,0,555,553,1,0,0,0,556,557,5,48,0,0,557,558,
        5,111,0,0,558,562,1,0,0,0,559,561,7,4,0,0,560,559,1,0,0,0,561,564,
        1,0,0,0,562,560,1,0,0,0,562,563,1,0,0,0,563,146,1,0,0,0,564,562,
        1,0,0,0,565,566,5,48,0,0,566,567,5,98,0,0,567,571,1,0,0,0,568,570,
        7,5,0,0,569,568,1,0,0,0,570,573,1,0,0,0,571,569,1,0,0,0,571,572,
        1,0,0,0,572,148,1,0,0,0,573,571,1,0,0,0,574,576,7,6,0,0,575,574,
        1,0,0,0,575,576,1,0,0,0,576,584,1,0,0,0,577,579,7,2,0,0,578,577,
        1,0,0,0,579,582,1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,583,
        1,0,0,0,582,580,1,0,0,0,583,585,7,7,0,0,584,580,1,0,0,0,584,585,
        1,0,0,0,585,587,1,0,0,0,586,588,7,2,0,0,587,586,1,0,0,0,588,589,
        1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,150,1,0,0,0,591,593,
        5,32,0,0,592,591,1,0,0,0,593,594,1,0,0,0,594,592,1,0,0,0,594,595,
        1,0,0,0,595,596,1,0,0,0,596,597,6,75,6,0,597,152,1,0,0,0,598,600,
        5,13,0,0,599,598,1,0,0,0,599,600,1,0,0,0,600,601,1,0,0,0,601,605,
        5,10,0,0,602,604,5,32,0,0,603,602,1,0,0,0,604,607,1,0,0,0,605,603,
        1,0,0,0,605,606,1,0,0,0,606,608,1,0,0,0,607,605,1,0,0,0,608,609,
        6,76,7,0,609,154,1,0,0,0,610,612,5,32,0,0,611,610,1,0,0,0,612,615,
        1,0,0,0,613,611,1,0,0,0,613,614,1,0,0,0,614,616,1,0,0,0,615,613,
        1,0,0,0,616,620,5,35,0,0,617,619,8,8,0,0,618,617,1,0,0,0,619,622,
        1,0,0,0,620,618,1,0,0,0,620,621,1,0,0,0,621,156,1,0,0,0,622,620,
        1,0,0,0,31,0,456,462,469,473,478,480,485,490,492,496,501,510,512,
        524,526,532,540,545,553,562,571,575,580,584,589,594,599,605,613,
        620,8,1,8,0,1,9,1,1,10,2,1,11,3,1,12,4,1,13,5,6,0,0,1,76,6
    ]

class VyperLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INDENT = 1
    DEDENT = 2
    AS = 3
    FROM = 4
    IMPORT = 5
    DOT = 6
    COMMA = 7
    COLON = 8
    ASSIGN = 9
    AT = 10
    LPAREN = 11
    RPAREN = 12
    LSQUARE = 13
    RSQUARE = 14
    LCURLY = 15
    RCURLY = 16
    CONSTANT = 17
    IMMUTABLE = 18
    PUBLIC = 19
    INDEXED = 20
    IMPLEMENTS = 21
    DYNARRAY = 22
    FUNCDECL = 23
    RETURNTYPE = 24
    EVENTDECL = 25
    ENUMDECL = 26
    MAP = 27
    STRUCTDECL = 28
    INTERFACEDECL = 29
    SKIPASSIGN = 30
    ADD = 31
    SUB = 32
    MUL = 33
    DIV = 34
    MOD = 35
    POW = 36
    SHL = 37
    SHR = 38
    PASS = 39
    Break = 40
    CONTINUE = 41
    LOG = 42
    RETURN = 43
    RAISE = 44
    ASSERT = 45
    IF = 46
    ELSE = 47
    ELIF = 48
    UNREACHABLE = 49
    FOR = 50
    IN = 51
    AND = 52
    OR = 53
    NOT = 54
    NEG = 55
    BITAND = 56
    BITOR = 57
    BITXOR = 58
    EQ = 59
    NE = 60
    LE = 61
    GE = 62
    LT = 63
    GT = 64
    EMPTY = 65
    ABIDECODE = 66
    BOOL = 67
    NAME = 68
    TYPE = 69
    STRING = 70
    DOCSTRING = 71
    DECNUMBER = 72
    HEXNUMBER = 73
    OCTNUMBER = 74
    BINNUMBER = 75
    FLOATNUMBER = 76
    SPACES = 77
    NEWLINE = 78
    COMMENT = 79

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'as'", "'from'", "'import'", "'.'", "','", "':'", "'='", "'@'", 
            "'('", "')'", "'['", "']'", "'{'", "'}'", "'constant'", "'immutable'", 
            "'public'", "'indexed'", "'implements'", "'DynArray'", "'def'", 
            "'->'", "'event'", "'enum'", "'HashMap'", "'struct'", "'interface'", 
            "'_'", "'+'", "'-'", "'*'", "'/'", "'%'", "'**'", "'<<'", "'>>'", 
            "'pass'", "'break'", "'continue'", "'log'", "'return'", "'raise'", 
            "'assert'", "'if'", "'else'", "'elif'", "'UNREACHABLE'", "'for'", 
            "'in'", "'and'", "'or'", "'not'", "'~'", "'&'", "'|'", "'^'", 
            "'=='", "'!='", "'<='", "'>='", "'<'", "'>'", "'empty'", "'_abi_decode'" ]

    symbolicNames = [ "<INVALID>",
            "INDENT", "DEDENT", "AS", "FROM", "IMPORT", "DOT", "COMMA", 
            "COLON", "ASSIGN", "AT", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", 
            "LCURLY", "RCURLY", "CONSTANT", "IMMUTABLE", "PUBLIC", "INDEXED", 
            "IMPLEMENTS", "DYNARRAY", "FUNCDECL", "RETURNTYPE", "EVENTDECL", 
            "ENUMDECL", "MAP", "STRUCTDECL", "INTERFACEDECL", "SKIPASSIGN", 
            "ADD", "SUB", "MUL", "DIV", "MOD", "POW", "SHL", "SHR", "PASS", 
            "Break", "CONTINUE", "LOG", "RETURN", "RAISE", "ASSERT", "IF", 
            "ELSE", "ELIF", "UNREACHABLE", "FOR", "IN", "AND", "OR", "NOT", 
            "NEG", "BITAND", "BITOR", "BITXOR", "EQ", "NE", "LE", "GE", 
            "LT", "GT", "EMPTY", "ABIDECODE", "BOOL", "NAME", "TYPE", "STRING", 
            "DOCSTRING", "DECNUMBER", "HEXNUMBER", "OCTNUMBER", "BINNUMBER", 
            "FLOATNUMBER", "SPACES", "NEWLINE", "COMMENT" ]

    ruleNames = [ "AS", "FROM", "IMPORT", "DOT", "COMMA", "COLON", "ASSIGN", 
                  "AT", "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "LCURLY", 
                  "RCURLY", "CONSTANT", "IMMUTABLE", "PUBLIC", "INDEXED", 
                  "IMPLEMENTS", "DYNARRAY", "FUNCDECL", "RETURNTYPE", "EVENTDECL", 
                  "ENUMDECL", "MAP", "STRUCTDECL", "INTERFACEDECL", "SKIPASSIGN", 
                  "ADD", "SUB", "MUL", "DIV", "MOD", "POW", "SHL", "SHR", 
                  "PASS", "Break", "CONTINUE", "LOG", "RETURN", "RAISE", 
                  "ASSERT", "IF", "ELSE", "ELIF", "UNREACHABLE", "FOR", 
                  "IN", "AND", "OR", "NOT", "NEG", "BITAND", "BITOR", "BITXOR", 
                  "EQ", "NE", "LE", "GE", "LT", "GT", "EMPTY", "ABIDECODE", 
                  "BOOL", "NAME", "TYPE", "STRING", "DOCSTRING", "ESC", 
                  "DECNUMBER", "HEXNUMBER", "OCTNUMBER", "BINNUMBER", "FLOATNUMBER", 
                  "SPACES", "NEWLINE", "COMMENT" ]

    grammarFileName = "VyperLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    ignore = False
    bracketCount = 0

    def openBracket(self):
        self.bracketCount += 1
        VyperLexer.ignore=True

    def closeBracket(self):
        self.bracketCount -= 1
        if self.bracketCount == 0:
            VyperLexer.ignore=False

    class MyCoolDenter(DenterHelper):
        def __init__(self, lexer, nl_token, indent_token, dedent_token, ignore_eof):
            super().__init__(nl_token, indent_token, dedent_token, ignore_eof)
            self.lexer: VyperLexer = lexer

        def pull_token(self):
            return super(VyperLexer, self.lexer).nextToken()

    denter = None

    def nextToken(self):
        if not self.denter:
            self.denter = self.MyCoolDenter(self, self.NEWLINE, VyperParser.INDENT, VyperParser.DEDENT, False)
        return self.denter.next_token()


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[8] = self.LPAREN_action 
            actions[9] = self.RPAREN_action 
            actions[10] = self.LSQUARE_action 
            actions[11] = self.RSQUARE_action 
            actions[12] = self.LCURLY_action 
            actions[13] = self.RCURLY_action 
            actions[76] = self.NEWLINE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def LPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.openBracket()
     

    def RPAREN_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.closeBracket()
     

    def LSQUARE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.openBracket()
     

    def RSQUARE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.closeBracket()
     

    def LCURLY_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            self.openBracket()
     

    def RCURLY_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
            self.closeBracket()
     

    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:

                if VyperLexer.ignore:
                    self.skip()

     


