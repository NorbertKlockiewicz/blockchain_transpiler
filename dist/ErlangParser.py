# Generated from Erlang.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,73,1203,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,1,0,4,0,246,8,0,11,0,12,0,247,1,0,1,0,1,1,1,1,
        3,1,254,8,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,
        1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,3,8,286,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,296,8,9,1,10,
        1,10,1,10,1,10,1,10,3,10,303,8,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,3,11,313,8,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,332,8,13,1,14,
        1,14,1,14,1,14,1,15,1,15,1,15,5,15,341,8,15,10,15,12,15,344,9,15,
        1,16,1,16,1,16,3,16,349,8,16,1,17,1,17,1,17,5,17,354,8,17,10,17,
        12,17,357,9,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,
        368,8,18,1,19,1,19,1,19,5,19,373,8,19,10,19,12,19,376,9,19,1,20,
        1,20,1,20,3,20,381,8,20,1,20,1,20,1,21,1,21,1,21,3,21,388,8,21,1,
        22,1,22,1,22,3,22,393,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,5,
        23,402,8,23,10,23,12,23,405,9,23,1,24,1,24,1,24,1,24,1,24,1,24,1,
        24,5,24,414,8,24,10,24,12,24,417,9,24,1,25,3,25,420,8,25,1,25,1,
        25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,500,
        8,26,1,27,1,27,1,27,1,27,1,27,1,27,3,27,508,8,27,1,28,1,28,3,28,
        512,8,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,5,29,521,8,29,10,29,
        12,29,524,9,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,5,31,533,8,31,
        10,31,12,31,536,9,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,558,
        8,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        3,36,585,8,36,1,37,1,37,1,37,5,37,590,8,37,10,37,12,37,593,9,37,
        1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,40,1,40,3,40,604,8,40,1,41,
        1,41,1,41,1,42,1,42,1,42,3,42,612,8,42,1,43,1,43,1,43,5,43,617,8,
        43,10,43,12,43,620,9,43,1,44,1,44,1,44,5,44,625,8,44,10,44,12,44,
        628,9,44,1,45,1,45,1,45,5,45,633,8,45,10,45,12,45,636,9,45,1,46,
        1,46,1,46,1,46,3,46,642,8,46,1,47,1,47,1,47,1,47,5,47,648,8,47,10,
        47,12,47,651,9,47,1,48,1,48,1,48,1,48,5,48,657,8,48,10,48,12,48,
        660,9,48,1,49,1,49,1,49,1,49,5,49,666,8,49,10,49,12,49,669,9,49,
        1,50,1,50,1,50,1,50,3,50,675,8,50,1,51,1,51,3,51,679,8,51,1,52,1,
        52,1,52,3,52,684,8,52,1,53,1,53,1,53,3,53,689,8,53,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,3,54,711,8,54,1,55,1,55,1,55,3,55,716,8,55,1,
        56,1,56,1,56,1,56,3,56,722,8,56,1,57,1,57,1,57,1,57,3,57,728,8,57,
        1,58,1,58,1,58,1,58,1,58,1,58,1,58,5,58,737,8,58,10,58,12,58,740,
        9,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,5,59,749,8,59,10,59,12,59,
        752,9,59,1,60,1,60,1,60,1,60,3,60,758,8,60,1,61,1,61,3,61,762,8,
        61,1,62,1,62,3,62,766,8,62,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,
        64,1,64,1,64,1,64,3,64,779,8,64,1,65,1,65,3,65,783,8,65,1,65,1,65,
        1,65,1,65,1,65,1,65,5,65,791,8,65,10,65,12,65,794,9,65,1,66,1,66,
        1,66,1,66,1,66,3,66,801,8,66,1,67,1,67,1,67,1,67,1,67,1,67,3,67,
        809,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,820,8,
        68,1,69,1,69,1,69,1,69,1,69,1,69,3,69,828,8,69,1,70,1,70,1,70,5,
        70,833,8,70,10,70,12,70,836,9,70,1,71,1,71,1,71,1,71,1,72,3,72,843,
        8,72,1,72,1,72,1,73,1,73,3,73,849,8,73,1,74,1,74,3,74,853,8,74,1,
        75,1,75,1,75,5,75,858,8,75,10,75,12,75,861,9,75,1,76,1,76,1,76,3,
        76,866,8,76,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,
        79,1,79,1,79,1,79,1,80,1,80,1,80,5,80,885,8,80,10,80,12,80,888,9,
        80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,899,8,81,1,
        82,1,82,3,82,903,8,82,1,82,1,82,1,83,1,83,3,83,909,8,83,1,83,1,83,
        1,83,1,83,1,83,1,83,5,83,917,8,83,10,83,12,83,920,9,83,1,84,1,84,
        1,84,1,84,5,84,926,8,84,10,84,12,84,929,9,84,3,84,931,8,84,1,84,
        1,84,1,85,1,85,3,85,937,8,85,1,86,1,86,1,86,1,86,1,87,1,87,1,87,
        1,87,1,88,1,88,1,89,1,89,3,89,951,8,89,1,89,1,89,1,89,1,89,1,89,
        3,89,958,8,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,966,8,89,5,89,968,
        8,89,10,89,12,89,971,9,89,1,90,1,90,3,90,975,8,90,1,90,1,90,1,91,
        1,91,1,91,5,91,982,8,91,10,91,12,91,985,9,91,1,92,1,92,3,92,989,
        8,92,1,92,1,92,1,92,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,95,1,95,
        1,95,5,95,1004,8,95,10,95,12,95,1007,9,95,1,96,1,96,1,96,1,97,1,
        97,1,97,1,97,1,97,1,97,1,98,1,98,1,98,5,98,1021,8,98,10,98,12,98,
        1024,9,98,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,100,
        1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
        3,100,1047,8,100,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,
        1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,3,101,1065,8,101,
        1,102,1,102,3,102,1069,8,102,1,103,1,103,3,103,1073,8,103,1,104,
        1,104,1,104,5,104,1078,8,104,10,104,12,104,1081,9,104,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,1092,8,105,1,106,
        1,106,1,106,1,106,3,106,1098,8,106,1,106,1,106,1,107,1,107,1,107,
        1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,
        3,107,1116,8,107,1,108,1,108,1,108,5,108,1121,8,108,10,108,12,108,
        1124,9,108,1,109,1,109,1,109,1,109,1,109,1,109,1,109,3,109,1133,
        8,109,1,109,1,109,1,109,1,109,1,109,3,109,1140,8,109,1,110,1,110,
        3,110,1144,8,110,1,111,1,111,3,111,1148,8,111,1,111,1,111,1,112,
        1,112,3,112,1154,8,112,1,112,1,112,1,113,1,113,1,113,5,113,1161,
        8,113,10,113,12,113,1164,9,113,1,114,1,114,1,114,5,114,1169,8,114,
        10,114,12,114,1172,9,114,1,115,1,115,1,115,5,115,1177,8,115,10,115,
        12,115,1180,9,115,1,116,1,116,1,116,1,116,1,116,4,116,1187,8,116,
        11,116,12,116,1188,3,116,1191,8,116,1,117,1,117,1,118,1,118,1,119,
        1,119,1,120,1,120,1,121,1,121,1,121,0,7,46,48,116,118,130,166,178,
        122,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,
        156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,
        188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
        220,222,224,226,228,230,232,234,236,238,240,242,0,7,1,0,20,21,1,
        0,26,27,2,0,2,2,42,44,3,0,24,24,32,32,45,48,3,0,2,2,42,42,49,54,
        1,0,55,56,1,0,57,64,1229,0,245,1,0,0,0,2,253,1,0,0,0,4,257,1,0,0,
        0,6,259,1,0,0,0,8,261,1,0,0,0,10,263,1,0,0,0,12,265,1,0,0,0,14,267,
        1,0,0,0,16,285,1,0,0,0,18,295,1,0,0,0,20,302,1,0,0,0,22,312,1,0,
        0,0,24,314,1,0,0,0,26,331,1,0,0,0,28,333,1,0,0,0,30,337,1,0,0,0,
        32,345,1,0,0,0,34,350,1,0,0,0,36,367,1,0,0,0,38,369,1,0,0,0,40,380,
        1,0,0,0,42,384,1,0,0,0,44,389,1,0,0,0,46,394,1,0,0,0,48,406,1,0,
        0,0,50,419,1,0,0,0,52,499,1,0,0,0,54,507,1,0,0,0,56,509,1,0,0,0,
        58,517,1,0,0,0,60,525,1,0,0,0,62,529,1,0,0,0,64,537,1,0,0,0,66,557,
        1,0,0,0,68,559,1,0,0,0,70,563,1,0,0,0,72,584,1,0,0,0,74,586,1,0,
        0,0,76,594,1,0,0,0,78,599,1,0,0,0,80,603,1,0,0,0,82,605,1,0,0,0,
        84,611,1,0,0,0,86,613,1,0,0,0,88,621,1,0,0,0,90,629,1,0,0,0,92,637,
        1,0,0,0,94,643,1,0,0,0,96,652,1,0,0,0,98,661,1,0,0,0,100,674,1,0,
        0,0,102,678,1,0,0,0,104,683,1,0,0,0,106,685,1,0,0,0,108,710,1,0,
        0,0,110,712,1,0,0,0,112,717,1,0,0,0,114,723,1,0,0,0,116,729,1,0,
        0,0,118,741,1,0,0,0,120,757,1,0,0,0,122,761,1,0,0,0,124,765,1,0,
        0,0,126,767,1,0,0,0,128,778,1,0,0,0,130,780,1,0,0,0,132,795,1,0,
        0,0,134,808,1,0,0,0,136,819,1,0,0,0,138,827,1,0,0,0,140,829,1,0,
        0,0,142,837,1,0,0,0,144,842,1,0,0,0,146,848,1,0,0,0,148,852,1,0,
        0,0,150,854,1,0,0,0,152,862,1,0,0,0,154,867,1,0,0,0,156,869,1,0,
        0,0,158,875,1,0,0,0,160,881,1,0,0,0,162,898,1,0,0,0,164,900,1,0,
        0,0,166,906,1,0,0,0,168,921,1,0,0,0,170,936,1,0,0,0,172,938,1,0,
        0,0,174,942,1,0,0,0,176,946,1,0,0,0,178,948,1,0,0,0,180,972,1,0,
        0,0,182,978,1,0,0,0,184,988,1,0,0,0,186,993,1,0,0,0,188,996,1,0,
        0,0,190,1000,1,0,0,0,192,1008,1,0,0,0,194,1011,1,0,0,0,196,1017,
        1,0,0,0,198,1025,1,0,0,0,200,1046,1,0,0,0,202,1064,1,0,0,0,204,1068,
        1,0,0,0,206,1072,1,0,0,0,208,1074,1,0,0,0,210,1091,1,0,0,0,212,1093,
        1,0,0,0,214,1115,1,0,0,0,216,1117,1,0,0,0,218,1139,1,0,0,0,220,1143,
        1,0,0,0,222,1145,1,0,0,0,224,1151,1,0,0,0,226,1157,1,0,0,0,228,1165,
        1,0,0,0,230,1173,1,0,0,0,232,1190,1,0,0,0,234,1192,1,0,0,0,236,1194,
        1,0,0,0,238,1196,1,0,0,0,240,1198,1,0,0,0,242,1200,1,0,0,0,244,246,
        3,2,1,0,245,244,1,0,0,0,246,247,1,0,0,0,247,245,1,0,0,0,247,248,
        1,0,0,0,248,249,1,0,0,0,249,250,5,0,0,1,250,1,1,0,0,0,251,254,3,
        16,8,0,252,254,3,74,37,0,253,251,1,0,0,0,253,252,1,0,0,0,254,255,
        1,0,0,0,255,256,5,1,0,0,256,3,1,0,0,0,257,258,5,65,0,0,258,5,1,0,
        0,0,259,260,5,66,0,0,260,7,1,0,0,0,261,262,5,67,0,0,262,9,1,0,0,
        0,263,264,5,68,0,0,264,11,1,0,0,0,265,266,5,69,0,0,266,13,1,0,0,
        0,267,268,5,70,0,0,268,15,1,0,0,0,269,270,5,2,0,0,270,271,3,4,2,
        0,271,272,3,72,36,0,272,286,1,0,0,0,273,274,5,2,0,0,274,275,3,4,
        2,0,275,276,3,22,11,0,276,286,1,0,0,0,277,278,5,2,0,0,278,279,3,
        4,2,0,279,280,5,3,0,0,280,281,3,22,11,0,281,282,5,4,0,0,282,286,
        1,0,0,0,283,284,5,71,0,0,284,286,3,18,9,0,285,269,1,0,0,0,285,273,
        1,0,0,0,285,277,1,0,0,0,285,283,1,0,0,0,286,17,1,0,0,0,287,288,3,
        20,10,0,288,289,3,30,15,0,289,296,1,0,0,0,290,291,5,3,0,0,291,292,
        3,20,10,0,292,293,3,30,15,0,293,294,5,4,0,0,294,296,1,0,0,0,295,
        287,1,0,0,0,295,290,1,0,0,0,296,19,1,0,0,0,297,303,3,4,2,0,298,299,
        3,4,2,0,299,300,5,5,0,0,300,301,3,4,2,0,301,303,1,0,0,0,302,297,
        1,0,0,0,302,298,1,0,0,0,303,21,1,0,0,0,304,305,3,84,42,0,305,306,
        5,6,0,0,306,307,3,24,12,0,307,313,1,0,0,0,308,309,3,84,42,0,309,
        310,5,7,0,0,310,311,3,40,20,0,311,313,1,0,0,0,312,304,1,0,0,0,312,
        308,1,0,0,0,313,23,1,0,0,0,314,315,5,8,0,0,315,316,3,26,13,0,316,
        317,5,9,0,0,317,25,1,0,0,0,318,332,3,28,14,0,319,320,3,28,14,0,320,
        321,5,6,0,0,321,322,3,26,13,0,322,332,1,0,0,0,323,324,3,84,42,0,
        324,325,5,6,0,0,325,326,3,26,13,0,326,332,1,0,0,0,327,328,3,28,14,
        0,328,329,5,6,0,0,329,330,3,226,113,0,330,332,1,0,0,0,331,318,1,
        0,0,0,331,319,1,0,0,0,331,323,1,0,0,0,331,327,1,0,0,0,332,27,1,0,
        0,0,333,334,3,84,42,0,334,335,5,7,0,0,335,336,3,40,20,0,336,29,1,
        0,0,0,337,342,3,32,16,0,338,339,5,10,0,0,339,341,3,32,16,0,340,338,
        1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,31,1,
        0,0,0,344,342,1,0,0,0,345,348,3,56,28,0,346,347,5,11,0,0,347,349,
        3,34,17,0,348,346,1,0,0,0,348,349,1,0,0,0,349,33,1,0,0,0,350,355,
        3,36,18,0,351,352,5,6,0,0,352,354,3,36,18,0,353,351,1,0,0,0,354,
        357,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,35,1,0,0,0,357,355,
        1,0,0,0,358,359,3,4,2,0,359,360,5,3,0,0,360,361,3,38,19,0,361,362,
        5,4,0,0,362,368,1,0,0,0,363,364,3,6,3,0,364,365,5,7,0,0,365,366,
        3,40,20,0,366,368,1,0,0,0,367,358,1,0,0,0,367,363,1,0,0,0,368,37,
        1,0,0,0,369,374,3,40,20,0,370,371,5,6,0,0,371,373,3,40,20,0,372,
        370,1,0,0,0,373,376,1,0,0,0,374,372,1,0,0,0,374,375,1,0,0,0,375,
        39,1,0,0,0,376,374,1,0,0,0,377,378,3,6,3,0,378,379,5,7,0,0,379,381,
        1,0,0,0,380,377,1,0,0,0,380,381,1,0,0,0,381,382,1,0,0,0,382,383,
        3,42,21,0,383,41,1,0,0,0,384,387,3,44,22,0,385,386,5,12,0,0,386,
        388,3,42,21,0,387,385,1,0,0,0,387,388,1,0,0,0,388,43,1,0,0,0,389,
        392,3,46,23,0,390,391,5,13,0,0,391,393,3,46,23,0,392,390,1,0,0,0,
        392,393,1,0,0,0,393,45,1,0,0,0,394,395,6,23,-1,0,395,396,3,48,24,
        0,396,403,1,0,0,0,397,398,10,2,0,0,398,399,3,238,119,0,399,400,3,
        48,24,0,400,402,1,0,0,0,401,397,1,0,0,0,402,405,1,0,0,0,403,401,
        1,0,0,0,403,404,1,0,0,0,404,47,1,0,0,0,405,403,1,0,0,0,406,407,6,
        24,-1,0,407,408,3,50,25,0,408,415,1,0,0,0,409,410,10,2,0,0,410,411,
        3,236,118,0,411,412,3,50,25,0,412,414,1,0,0,0,413,409,1,0,0,0,414,
        417,1,0,0,0,415,413,1,0,0,0,415,416,1,0,0,0,416,49,1,0,0,0,417,415,
        1,0,0,0,418,420,3,234,117,0,419,418,1,0,0,0,419,420,1,0,0,0,420,
        421,1,0,0,0,421,422,3,52,26,0,422,51,1,0,0,0,423,424,5,3,0,0,424,
        425,3,40,20,0,425,426,5,4,0,0,426,500,1,0,0,0,427,500,3,6,3,0,428,
        500,3,4,2,0,429,430,3,4,2,0,430,431,5,3,0,0,431,432,5,4,0,0,432,
        500,1,0,0,0,433,434,3,4,2,0,434,435,5,3,0,0,435,436,3,38,19,0,436,
        437,5,4,0,0,437,500,1,0,0,0,438,439,3,4,2,0,439,440,5,5,0,0,440,
        441,3,4,2,0,441,442,5,3,0,0,442,443,5,4,0,0,443,500,1,0,0,0,444,
        445,3,4,2,0,445,446,5,5,0,0,446,447,3,4,2,0,447,448,5,3,0,0,448,
        449,3,38,19,0,449,450,5,4,0,0,450,500,1,0,0,0,451,452,5,14,0,0,452,
        500,5,15,0,0,453,454,5,14,0,0,454,455,3,40,20,0,455,456,5,15,0,0,
        456,500,1,0,0,0,457,458,5,14,0,0,458,459,3,40,20,0,459,460,5,6,0,
        0,460,461,5,16,0,0,461,462,5,15,0,0,462,500,1,0,0,0,463,464,5,17,
        0,0,464,465,5,8,0,0,465,500,5,9,0,0,466,467,5,17,0,0,467,468,5,8,
        0,0,468,469,3,58,29,0,469,470,5,9,0,0,470,500,1,0,0,0,471,472,5,
        8,0,0,472,500,5,9,0,0,473,474,5,8,0,0,474,475,3,38,19,0,475,476,
        5,9,0,0,476,500,1,0,0,0,477,478,5,17,0,0,478,479,3,4,2,0,479,480,
        5,8,0,0,480,481,5,9,0,0,481,500,1,0,0,0,482,483,5,17,0,0,483,484,
        3,4,2,0,484,485,5,8,0,0,485,486,3,62,31,0,486,487,5,9,0,0,487,500,
        1,0,0,0,488,500,3,66,33,0,489,500,3,10,5,0,490,500,3,12,6,0,491,
        492,5,18,0,0,492,493,5,3,0,0,493,500,5,4,0,0,494,495,5,18,0,0,495,
        496,5,3,0,0,496,497,3,54,27,0,497,498,5,4,0,0,498,500,1,0,0,0,499,
        423,1,0,0,0,499,427,1,0,0,0,499,428,1,0,0,0,499,429,1,0,0,0,499,
        433,1,0,0,0,499,438,1,0,0,0,499,444,1,0,0,0,499,451,1,0,0,0,499,
        453,1,0,0,0,499,457,1,0,0,0,499,463,1,0,0,0,499,466,1,0,0,0,499,
        471,1,0,0,0,499,473,1,0,0,0,499,477,1,0,0,0,499,482,1,0,0,0,499,
        488,1,0,0,0,499,489,1,0,0,0,499,490,1,0,0,0,499,491,1,0,0,0,499,
        494,1,0,0,0,500,53,1,0,0,0,501,502,5,3,0,0,502,503,5,16,0,0,503,
        504,5,4,0,0,504,505,5,19,0,0,505,508,3,40,20,0,506,508,3,56,28,0,
        507,501,1,0,0,0,507,506,1,0,0,0,508,55,1,0,0,0,509,511,5,3,0,0,510,
        512,3,38,19,0,511,510,1,0,0,0,511,512,1,0,0,0,512,513,1,0,0,0,513,
        514,5,4,0,0,514,515,5,19,0,0,515,516,3,40,20,0,516,57,1,0,0,0,517,
        522,3,60,30,0,518,519,5,6,0,0,519,521,3,60,30,0,520,518,1,0,0,0,
        521,524,1,0,0,0,522,520,1,0,0,0,522,523,1,0,0,0,523,59,1,0,0,0,524,
        522,1,0,0,0,525,526,3,40,20,0,526,527,7,0,0,0,527,528,3,40,20,0,
        528,61,1,0,0,0,529,534,3,64,32,0,530,531,5,6,0,0,531,533,3,64,32,
        0,532,530,1,0,0,0,533,536,1,0,0,0,534,532,1,0,0,0,534,535,1,0,0,
        0,535,63,1,0,0,0,536,534,1,0,0,0,537,538,3,4,2,0,538,539,5,7,0,0,
        539,540,3,40,20,0,540,65,1,0,0,0,541,542,5,22,0,0,542,558,5,23,0,
        0,543,544,5,22,0,0,544,545,3,68,34,0,545,546,5,23,0,0,546,558,1,
        0,0,0,547,548,5,22,0,0,548,549,3,70,35,0,549,550,5,23,0,0,550,558,
        1,0,0,0,551,552,5,22,0,0,552,553,3,68,34,0,553,554,5,6,0,0,554,555,
        3,70,35,0,555,556,5,23,0,0,556,558,1,0,0,0,557,541,1,0,0,0,557,543,
        1,0,0,0,557,547,1,0,0,0,557,551,1,0,0,0,558,67,1,0,0,0,559,560,3,
        6,3,0,560,561,5,5,0,0,561,562,3,52,26,0,562,69,1,0,0,0,563,564,3,
        6,3,0,564,565,5,5,0,0,565,566,3,6,3,0,566,567,5,24,0,0,567,568,3,
        52,26,0,568,71,1,0,0,0,569,585,3,84,42,0,570,571,5,3,0,0,571,572,
        3,84,42,0,572,573,5,4,0,0,573,585,1,0,0,0,574,575,3,84,42,0,575,
        576,5,6,0,0,576,577,3,226,113,0,577,585,1,0,0,0,578,579,5,3,0,0,
        579,580,3,84,42,0,580,581,5,6,0,0,581,582,3,226,113,0,582,583,5,
        4,0,0,583,585,1,0,0,0,584,569,1,0,0,0,584,570,1,0,0,0,584,574,1,
        0,0,0,584,578,1,0,0,0,585,73,1,0,0,0,586,591,3,76,38,0,587,588,5,
        10,0,0,588,590,3,76,38,0,589,587,1,0,0,0,590,593,1,0,0,0,591,589,
        1,0,0,0,591,592,1,0,0,0,592,75,1,0,0,0,593,591,1,0,0,0,594,595,3,
        4,2,0,595,596,3,78,39,0,596,597,3,80,40,0,597,598,3,82,41,0,598,
        77,1,0,0,0,599,600,3,224,112,0,600,79,1,0,0,0,601,602,5,11,0,0,602,
        604,3,230,115,0,603,601,1,0,0,0,603,604,1,0,0,0,604,81,1,0,0,0,605,
        606,5,19,0,0,606,607,3,226,113,0,607,83,1,0,0,0,608,609,5,25,0,0,
        609,612,3,84,42,0,610,612,3,86,43,0,611,608,1,0,0,0,611,610,1,0,
        0,0,612,85,1,0,0,0,613,618,3,88,44,0,614,615,7,1,0,0,615,617,3,88,
        44,0,616,614,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,618,619,1,0,
        0,0,619,87,1,0,0,0,620,618,1,0,0,0,621,626,3,90,45,0,622,623,5,28,
        0,0,623,625,3,90,45,0,624,622,1,0,0,0,625,628,1,0,0,0,626,624,1,
        0,0,0,626,627,1,0,0,0,627,89,1,0,0,0,628,626,1,0,0,0,629,634,3,92,
        46,0,630,631,5,29,0,0,631,633,3,92,46,0,632,630,1,0,0,0,633,636,
        1,0,0,0,634,632,1,0,0,0,634,635,1,0,0,0,635,91,1,0,0,0,636,634,1,
        0,0,0,637,641,3,94,47,0,638,639,3,242,121,0,639,640,3,94,47,0,640,
        642,1,0,0,0,641,638,1,0,0,0,641,642,1,0,0,0,642,93,1,0,0,0,643,649,
        3,96,48,0,644,645,3,240,120,0,645,646,3,96,48,0,646,648,1,0,0,0,
        647,644,1,0,0,0,648,651,1,0,0,0,649,647,1,0,0,0,649,650,1,0,0,0,
        650,95,1,0,0,0,651,649,1,0,0,0,652,658,3,98,49,0,653,654,3,238,119,
        0,654,655,3,98,49,0,655,657,1,0,0,0,656,653,1,0,0,0,657,660,1,0,
        0,0,658,656,1,0,0,0,658,659,1,0,0,0,659,97,1,0,0,0,660,658,1,0,0,
        0,661,667,3,100,50,0,662,663,3,236,118,0,663,664,3,100,50,0,664,
        666,1,0,0,0,665,662,1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,667,
        668,1,0,0,0,668,99,1,0,0,0,669,667,1,0,0,0,670,671,3,234,117,0,671,
        672,3,100,50,0,672,675,1,0,0,0,673,675,3,102,51,0,674,670,1,0,0,
        0,674,673,1,0,0,0,675,101,1,0,0,0,676,679,3,166,83,0,677,679,3,104,
        52,0,678,676,1,0,0,0,678,677,1,0,0,0,679,103,1,0,0,0,680,684,3,186,
        93,0,681,684,3,178,89,0,682,684,3,106,53,0,683,680,1,0,0,0,683,681,
        1,0,0,0,683,682,1,0,0,0,684,105,1,0,0,0,685,688,3,108,54,0,686,687,
        5,5,0,0,687,689,3,108,54,0,688,686,1,0,0,0,688,689,1,0,0,0,689,107,
        1,0,0,0,690,711,3,6,3,0,691,711,3,232,116,0,692,711,3,134,67,0,693,
        711,3,138,69,0,694,711,3,156,78,0,695,711,3,158,79,0,696,711,3,164,
        82,0,697,698,5,3,0,0,698,699,3,84,42,0,699,700,5,4,0,0,700,711,1,
        0,0,0,701,702,5,30,0,0,702,703,3,226,113,0,703,704,5,31,0,0,704,
        711,1,0,0,0,705,711,3,188,94,0,706,711,3,194,97,0,707,711,3,200,
        100,0,708,711,3,202,101,0,709,711,3,212,106,0,710,690,1,0,0,0,710,
        691,1,0,0,0,710,692,1,0,0,0,710,693,1,0,0,0,710,694,1,0,0,0,710,
        695,1,0,0,0,710,696,1,0,0,0,710,697,1,0,0,0,710,701,1,0,0,0,710,
        705,1,0,0,0,710,706,1,0,0,0,710,707,1,0,0,0,710,708,1,0,0,0,710,
        709,1,0,0,0,711,109,1,0,0,0,712,715,3,112,56,0,713,714,5,26,0,0,
        714,716,3,110,55,0,715,713,1,0,0,0,715,716,1,0,0,0,716,111,1,0,0,
        0,717,721,3,114,57,0,718,719,3,242,121,0,719,720,3,114,57,0,720,
        722,1,0,0,0,721,718,1,0,0,0,721,722,1,0,0,0,722,113,1,0,0,0,723,
        727,3,116,58,0,724,725,3,240,120,0,725,726,3,114,57,0,726,728,1,
        0,0,0,727,724,1,0,0,0,727,728,1,0,0,0,728,115,1,0,0,0,729,730,6,
        58,-1,0,730,731,3,118,59,0,731,738,1,0,0,0,732,733,10,2,0,0,733,
        734,3,238,119,0,734,735,3,118,59,0,735,737,1,0,0,0,736,732,1,0,0,
        0,737,740,1,0,0,0,738,736,1,0,0,0,738,739,1,0,0,0,739,117,1,0,0,
        0,740,738,1,0,0,0,741,742,6,59,-1,0,742,743,3,120,60,0,743,750,1,
        0,0,0,744,745,10,2,0,0,745,746,3,236,118,0,746,747,3,120,60,0,747,
        749,1,0,0,0,748,744,1,0,0,0,749,752,1,0,0,0,750,748,1,0,0,0,750,
        751,1,0,0,0,751,119,1,0,0,0,752,750,1,0,0,0,753,754,3,234,117,0,
        754,755,3,120,60,0,755,758,1,0,0,0,756,758,3,122,61,0,757,753,1,
        0,0,0,757,756,1,0,0,0,758,121,1,0,0,0,759,762,3,130,65,0,760,762,
        3,124,62,0,761,759,1,0,0,0,761,760,1,0,0,0,762,123,1,0,0,0,763,766,
        3,132,66,0,764,766,3,126,63,0,765,763,1,0,0,0,765,764,1,0,0,0,766,
        125,1,0,0,0,767,768,3,128,64,0,768,127,1,0,0,0,769,779,3,6,3,0,770,
        779,3,232,116,0,771,779,3,134,67,0,772,779,3,138,69,0,773,779,3,
        164,82,0,774,775,5,3,0,0,775,776,3,110,55,0,776,777,5,4,0,0,777,
        779,1,0,0,0,778,769,1,0,0,0,778,770,1,0,0,0,778,771,1,0,0,0,778,
        772,1,0,0,0,778,773,1,0,0,0,778,774,1,0,0,0,779,129,1,0,0,0,780,
        782,6,65,-1,0,781,783,3,128,64,0,782,781,1,0,0,0,782,783,1,0,0,0,
        783,784,1,0,0,0,784,785,5,17,0,0,785,786,3,168,84,0,786,792,1,0,
        0,0,787,788,10,1,0,0,788,789,5,17,0,0,789,791,3,168,84,0,790,787,
        1,0,0,0,791,794,1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,131,
        1,0,0,0,794,792,1,0,0,0,795,796,5,17,0,0,796,800,3,4,2,0,797,798,
        5,1,0,0,798,801,3,4,2,0,799,801,3,180,90,0,800,797,1,0,0,0,800,799,
        1,0,0,0,801,133,1,0,0,0,802,803,5,14,0,0,803,809,5,15,0,0,804,805,
        5,14,0,0,805,806,3,84,42,0,806,807,3,136,68,0,807,809,1,0,0,0,808,
        802,1,0,0,0,808,804,1,0,0,0,809,135,1,0,0,0,810,820,5,15,0,0,811,
        812,5,12,0,0,812,813,3,84,42,0,813,814,5,15,0,0,814,820,1,0,0,0,
        815,816,5,6,0,0,816,817,3,84,42,0,817,818,3,136,68,0,818,820,1,0,
        0,0,819,810,1,0,0,0,819,811,1,0,0,0,819,815,1,0,0,0,820,137,1,0,
        0,0,821,822,5,22,0,0,822,828,5,23,0,0,823,824,5,22,0,0,824,825,3,
        140,70,0,825,826,5,23,0,0,826,828,1,0,0,0,827,821,1,0,0,0,827,823,
        1,0,0,0,828,139,1,0,0,0,829,834,3,142,71,0,830,831,5,6,0,0,831,833,
        3,142,71,0,832,830,1,0,0,0,833,836,1,0,0,0,834,832,1,0,0,0,834,835,
        1,0,0,0,835,141,1,0,0,0,836,834,1,0,0,0,837,838,3,144,72,0,838,839,
        3,146,73,0,839,840,3,148,74,0,840,143,1,0,0,0,841,843,3,234,117,
        0,842,841,1,0,0,0,842,843,1,0,0,0,843,844,1,0,0,0,844,845,3,108,
        54,0,845,145,1,0,0,0,846,847,5,5,0,0,847,849,3,154,77,0,848,846,
        1,0,0,0,848,849,1,0,0,0,849,147,1,0,0,0,850,851,5,32,0,0,851,853,
        3,150,75,0,852,850,1,0,0,0,852,853,1,0,0,0,853,149,1,0,0,0,854,859,
        3,152,76,0,855,856,5,2,0,0,856,858,3,152,76,0,857,855,1,0,0,0,858,
        861,1,0,0,0,859,857,1,0,0,0,859,860,1,0,0,0,860,151,1,0,0,0,861,
        859,1,0,0,0,862,865,3,4,2,0,863,864,5,5,0,0,864,866,3,10,5,0,865,
        863,1,0,0,0,865,866,1,0,0,0,866,153,1,0,0,0,867,868,3,108,54,0,868,
        155,1,0,0,0,869,870,5,14,0,0,870,871,3,84,42,0,871,872,5,33,0,0,
        872,873,3,160,80,0,873,874,5,15,0,0,874,157,1,0,0,0,875,876,5,22,
        0,0,876,877,3,108,54,0,877,878,5,33,0,0,878,879,3,160,80,0,879,880,
        5,23,0,0,880,159,1,0,0,0,881,886,3,162,81,0,882,883,5,6,0,0,883,
        885,3,162,81,0,884,882,1,0,0,0,885,888,1,0,0,0,886,884,1,0,0,0,886,
        887,1,0,0,0,887,161,1,0,0,0,888,886,1,0,0,0,889,899,3,84,42,0,890,
        891,3,84,42,0,891,892,5,34,0,0,892,893,3,84,42,0,893,899,1,0,0,0,
        894,895,3,138,69,0,895,896,5,35,0,0,896,897,3,84,42,0,897,899,1,
        0,0,0,898,889,1,0,0,0,898,890,1,0,0,0,898,894,1,0,0,0,899,163,1,
        0,0,0,900,902,5,8,0,0,901,903,3,226,113,0,902,901,1,0,0,0,902,903,
        1,0,0,0,903,904,1,0,0,0,904,905,5,9,0,0,905,165,1,0,0,0,906,908,
        6,83,-1,0,907,909,3,108,54,0,908,907,1,0,0,0,908,909,1,0,0,0,909,
        910,1,0,0,0,910,911,5,17,0,0,911,912,3,168,84,0,912,918,1,0,0,0,
        913,914,10,1,0,0,914,915,5,17,0,0,915,917,3,168,84,0,916,913,1,0,
        0,0,917,920,1,0,0,0,918,916,1,0,0,0,918,919,1,0,0,0,919,167,1,0,
        0,0,920,918,1,0,0,0,921,930,5,8,0,0,922,927,3,170,85,0,923,924,5,
        6,0,0,924,926,3,170,85,0,925,923,1,0,0,0,926,929,1,0,0,0,927,925,
        1,0,0,0,927,928,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,930,922,
        1,0,0,0,930,931,1,0,0,0,931,932,1,0,0,0,932,933,5,9,0,0,933,169,
        1,0,0,0,934,937,3,172,86,0,935,937,3,174,87,0,936,934,1,0,0,0,936,
        935,1,0,0,0,937,171,1,0,0,0,938,939,3,176,88,0,939,940,5,20,0,0,
        940,941,3,84,42,0,941,173,1,0,0,0,942,943,3,176,88,0,943,944,5,21,
        0,0,944,945,3,84,42,0,945,175,1,0,0,0,946,947,3,84,42,0,947,177,
        1,0,0,0,948,950,6,89,-1,0,949,951,3,108,54,0,950,949,1,0,0,0,950,
        951,1,0,0,0,951,952,1,0,0,0,952,953,5,17,0,0,953,957,3,4,2,0,954,
        955,5,1,0,0,955,958,3,4,2,0,956,958,3,180,90,0,957,954,1,0,0,0,957,
        956,1,0,0,0,958,969,1,0,0,0,959,960,10,1,0,0,960,961,5,17,0,0,961,
        965,3,4,2,0,962,963,5,1,0,0,963,966,3,4,2,0,964,966,3,180,90,0,965,
        962,1,0,0,0,965,964,1,0,0,0,966,968,1,0,0,0,967,959,1,0,0,0,968,
        971,1,0,0,0,969,967,1,0,0,0,969,970,1,0,0,0,970,179,1,0,0,0,971,
        969,1,0,0,0,972,974,5,8,0,0,973,975,3,182,91,0,974,973,1,0,0,0,974,
        975,1,0,0,0,975,976,1,0,0,0,976,977,5,9,0,0,977,181,1,0,0,0,978,
        983,3,184,92,0,979,980,5,6,0,0,980,982,3,184,92,0,981,979,1,0,0,
        0,982,985,1,0,0,0,983,981,1,0,0,0,983,984,1,0,0,0,984,183,1,0,0,
        0,985,983,1,0,0,0,986,989,3,6,3,0,987,989,3,4,2,0,988,986,1,0,0,
        0,988,987,1,0,0,0,989,990,1,0,0,0,990,991,5,26,0,0,991,992,3,84,
        42,0,992,185,1,0,0,0,993,994,3,106,53,0,994,995,3,222,111,0,995,
        187,1,0,0,0,996,997,5,36,0,0,997,998,3,190,95,0,998,999,5,31,0,0,
        999,189,1,0,0,0,1000,1005,3,192,96,0,1001,1002,5,10,0,0,1002,1004,
        3,192,96,0,1003,1001,1,0,0,0,1004,1007,1,0,0,0,1005,1003,1,0,0,0,
        1005,1006,1,0,0,0,1006,191,1,0,0,0,1007,1005,1,0,0,0,1008,1009,3,
        230,115,0,1009,1010,3,82,41,0,1010,193,1,0,0,0,1011,1012,5,37,0,
        0,1012,1013,3,84,42,0,1013,1014,5,38,0,0,1014,1015,3,196,98,0,1015,
        1016,5,31,0,0,1016,195,1,0,0,0,1017,1022,3,198,99,0,1018,1019,5,
        10,0,0,1019,1021,3,198,99,0,1020,1018,1,0,0,0,1021,1024,1,0,0,0,
        1022,1020,1,0,0,0,1022,1023,1,0,0,0,1023,197,1,0,0,0,1024,1022,1,
        0,0,0,1025,1026,3,84,42,0,1026,1027,3,80,40,0,1027,1028,3,82,41,
        0,1028,199,1,0,0,0,1029,1030,5,39,0,0,1030,1031,3,196,98,0,1031,
        1032,5,31,0,0,1032,1047,1,0,0,0,1033,1034,5,39,0,0,1034,1035,5,40,
        0,0,1035,1036,3,84,42,0,1036,1037,3,82,41,0,1037,1038,5,31,0,0,1038,
        1047,1,0,0,0,1039,1040,5,39,0,0,1040,1041,3,196,98,0,1041,1042,5,
        40,0,0,1042,1043,3,84,42,0,1043,1044,3,82,41,0,1044,1045,5,31,0,
        0,1045,1047,1,0,0,0,1046,1029,1,0,0,0,1046,1033,1,0,0,0,1046,1039,
        1,0,0,0,1047,201,1,0,0,0,1048,1049,5,18,0,0,1049,1050,3,4,2,0,1050,
        1051,5,32,0,0,1051,1052,3,10,5,0,1052,1065,1,0,0,0,1053,1054,5,18,
        0,0,1054,1055,3,204,102,0,1055,1056,5,5,0,0,1056,1057,3,204,102,
        0,1057,1058,5,32,0,0,1058,1059,3,206,103,0,1059,1065,1,0,0,0,1060,
        1061,5,18,0,0,1061,1062,3,208,104,0,1062,1063,5,31,0,0,1063,1065,
        1,0,0,0,1064,1048,1,0,0,0,1064,1053,1,0,0,0,1064,1060,1,0,0,0,1065,
        203,1,0,0,0,1066,1069,3,4,2,0,1067,1069,3,6,3,0,1068,1066,1,0,0,
        0,1068,1067,1,0,0,0,1069,205,1,0,0,0,1070,1073,3,10,5,0,1071,1073,
        3,6,3,0,1072,1070,1,0,0,0,1072,1071,1,0,0,0,1073,207,1,0,0,0,1074,
        1079,3,210,105,0,1075,1076,5,10,0,0,1076,1078,3,210,105,0,1077,1075,
        1,0,0,0,1078,1081,1,0,0,0,1079,1077,1,0,0,0,1079,1080,1,0,0,0,1080,
        209,1,0,0,0,1081,1079,1,0,0,0,1082,1083,3,224,112,0,1083,1084,3,
        80,40,0,1084,1085,3,82,41,0,1085,1092,1,0,0,0,1086,1087,3,6,3,0,
        1087,1088,3,224,112,0,1088,1089,3,80,40,0,1089,1090,3,82,41,0,1090,
        1092,1,0,0,0,1091,1082,1,0,0,0,1091,1086,1,0,0,0,1092,211,1,0,0,
        0,1093,1094,5,41,0,0,1094,1097,3,226,113,0,1095,1096,5,38,0,0,1096,
        1098,3,196,98,0,1097,1095,1,0,0,0,1097,1098,1,0,0,0,1098,1099,1,
        0,0,0,1099,1100,3,214,107,0,1100,213,1,0,0,0,1101,1102,5,25,0,0,
        1102,1103,3,216,108,0,1103,1104,5,31,0,0,1104,1116,1,0,0,0,1105,
        1106,5,25,0,0,1106,1107,3,216,108,0,1107,1108,5,40,0,0,1108,1109,
        3,226,113,0,1109,1110,5,31,0,0,1110,1116,1,0,0,0,1111,1112,5,40,
        0,0,1112,1113,3,226,113,0,1113,1114,5,31,0,0,1114,1116,1,0,0,0,1115,
        1101,1,0,0,0,1115,1105,1,0,0,0,1115,1111,1,0,0,0,1116,215,1,0,0,
        0,1117,1122,3,218,109,0,1118,1119,5,10,0,0,1119,1121,3,218,109,0,
        1120,1118,1,0,0,0,1121,1124,1,0,0,0,1122,1120,1,0,0,0,1122,1123,
        1,0,0,0,1123,217,1,0,0,0,1124,1122,1,0,0,0,1125,1126,3,84,42,0,1126,
        1127,3,80,40,0,1127,1128,3,82,41,0,1128,1140,1,0,0,0,1129,1130,3,
        204,102,0,1130,1131,5,5,0,0,1131,1133,1,0,0,0,1132,1129,1,0,0,0,
        1132,1133,1,0,0,0,1133,1134,1,0,0,0,1134,1135,3,110,55,0,1135,1136,
        3,220,110,0,1136,1137,3,80,40,0,1137,1138,3,82,41,0,1138,1140,1,
        0,0,0,1139,1125,1,0,0,0,1139,1132,1,0,0,0,1140,219,1,0,0,0,1141,
        1142,5,5,0,0,1142,1144,3,6,3,0,1143,1141,1,0,0,0,1143,1144,1,0,0,
        0,1144,221,1,0,0,0,1145,1147,5,3,0,0,1146,1148,3,226,113,0,1147,
        1146,1,0,0,0,1147,1148,1,0,0,0,1148,1149,1,0,0,0,1149,1150,5,4,0,
        0,1150,223,1,0,0,0,1151,1153,5,3,0,0,1152,1154,3,228,114,0,1153,
        1152,1,0,0,0,1153,1154,1,0,0,0,1154,1155,1,0,0,0,1155,1156,5,4,0,
        0,1156,225,1,0,0,0,1157,1162,3,84,42,0,1158,1159,5,6,0,0,1159,1161,
        3,84,42,0,1160,1158,1,0,0,0,1161,1164,1,0,0,0,1162,1160,1,0,0,0,
        1162,1163,1,0,0,0,1163,227,1,0,0,0,1164,1162,1,0,0,0,1165,1170,3,
        110,55,0,1166,1167,5,6,0,0,1167,1169,3,110,55,0,1168,1166,1,0,0,
        0,1169,1172,1,0,0,0,1170,1168,1,0,0,0,1170,1171,1,0,0,0,1171,229,
        1,0,0,0,1172,1170,1,0,0,0,1173,1178,3,226,113,0,1174,1175,5,10,0,
        0,1175,1177,3,226,113,0,1176,1174,1,0,0,0,1177,1180,1,0,0,0,1178,
        1176,1,0,0,0,1178,1179,1,0,0,0,1179,231,1,0,0,0,1180,1178,1,0,0,
        0,1181,1191,3,12,6,0,1182,1191,3,10,5,0,1183,1191,3,8,4,0,1184,1191,
        3,4,2,0,1185,1187,3,14,7,0,1186,1185,1,0,0,0,1187,1188,1,0,0,0,1188,
        1186,1,0,0,0,1188,1189,1,0,0,0,1189,1191,1,0,0,0,1190,1181,1,0,0,
        0,1190,1182,1,0,0,0,1190,1183,1,0,0,0,1190,1184,1,0,0,0,1190,1186,
        1,0,0,0,1191,233,1,0,0,0,1192,1193,7,2,0,0,1193,235,1,0,0,0,1194,
        1195,7,3,0,0,1195,237,1,0,0,0,1196,1197,7,4,0,0,1197,239,1,0,0,0,
        1198,1199,7,5,0,0,1199,241,1,0,0,0,1200,1201,7,6,0,0,1201,243,1,
        0,0,0,97,247,253,285,295,302,312,331,342,348,355,367,374,380,387,
        392,403,415,419,499,507,511,522,534,557,584,591,603,611,618,626,
        634,641,649,658,667,674,678,683,688,710,715,721,727,738,750,757,
        761,765,778,782,792,800,808,819,827,834,842,848,852,859,865,886,
        898,902,908,918,927,930,936,950,957,965,969,974,983,988,1005,1022,
        1046,1064,1068,1072,1079,1091,1097,1115,1122,1132,1139,1143,1147,
        1153,1162,1170,1178,1188,1190
    ]

class ErlangParser ( Parser ):

    grammarFileName = "Erlang.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'-'", "'('", "')'", "':'", "','", 
                     "'::'", "'{'", "'}'", "';'", "'when'", "'|'", "'..'", 
                     "'['", "']'", "'...'", "'#'", "'fun'", "'->'", "'=>'", 
                     "':='", "'<<'", "'>>'", "'*'", "'catch'", "'='", "'!'", 
                     "'orelse'", "'andalso'", "'begin'", "'end'", "'/'", 
                     "'||'", "'<-'", "'<='", "'if'", "'case'", "'of'", "'receive'", 
                     "'after'", "'try'", "'+'", "'bnot'", "'not'", "'div'", 
                     "'rem'", "'band'", "'and'", "'bor'", "'bxor'", "'bsl'", 
                     "'bsr'", "'or'", "'xor'", "'++'", "'--'", "'=='", "'/='", 
                     "'=<'", "'<'", "'>='", "'>'", "'=:='", "'=/='" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "TokAtom", "TokVar", "TokFloat", "TokInteger", 
                      "TokChar", "TokString", "AttrName", "Comment", "WS" ]

    RULE_forms = 0
    RULE_form = 1
    RULE_tokAtom = 2
    RULE_tokVar = 3
    RULE_tokFloat = 4
    RULE_tokInteger = 5
    RULE_tokChar = 6
    RULE_tokString = 7
    RULE_attribute = 8
    RULE_typeSpec = 9
    RULE_specFun = 10
    RULE_typedAttrVal = 11
    RULE_typedRecordFields = 12
    RULE_typedExprs = 13
    RULE_typedExpr = 14
    RULE_typeSigs = 15
    RULE_typeSig = 16
    RULE_typeGuards = 17
    RULE_typeGuard = 18
    RULE_topTypes = 19
    RULE_topType = 20
    RULE_topType100 = 21
    RULE_type200 = 22
    RULE_type300 = 23
    RULE_type400 = 24
    RULE_type500 = 25
    RULE_type_ = 26
    RULE_funType100 = 27
    RULE_funType = 28
    RULE_mapPairTypes = 29
    RULE_mapPairType = 30
    RULE_fieldTypes = 31
    RULE_fieldType = 32
    RULE_binaryType = 33
    RULE_binBaseType = 34
    RULE_binUnitType = 35
    RULE_attrVal = 36
    RULE_function_ = 37
    RULE_functionClause = 38
    RULE_clauseArgs = 39
    RULE_clauseGuard = 40
    RULE_clauseBody = 41
    RULE_expr = 42
    RULE_expr100 = 43
    RULE_expr150 = 44
    RULE_expr160 = 45
    RULE_expr200 = 46
    RULE_expr300 = 47
    RULE_expr400 = 48
    RULE_expr500 = 49
    RULE_expr600 = 50
    RULE_expr650 = 51
    RULE_expr700 = 52
    RULE_expr800 = 53
    RULE_exprMax = 54
    RULE_patExpr = 55
    RULE_patExpr200 = 56
    RULE_patExpr300 = 57
    RULE_patExpr400 = 58
    RULE_patExpr500 = 59
    RULE_patExpr600 = 60
    RULE_patExpr650 = 61
    RULE_patExpr700 = 62
    RULE_patExpr800 = 63
    RULE_patExprMax = 64
    RULE_mapPatExpr = 65
    RULE_recordPatExpr = 66
    RULE_list_ = 67
    RULE_tail = 68
    RULE_binary = 69
    RULE_binElements = 70
    RULE_binElement = 71
    RULE_bitExpr = 72
    RULE_optBitSizeExpr = 73
    RULE_optBitTypeList = 74
    RULE_bitTypeList = 75
    RULE_bitType = 76
    RULE_bitSizeExpr = 77
    RULE_listComprehension = 78
    RULE_binaryComprehension = 79
    RULE_lcExprs = 80
    RULE_lcExpr = 81
    RULE_tuple_ = 82
    RULE_mapExpr = 83
    RULE_mapTuple = 84
    RULE_mapField = 85
    RULE_mapFieldAssoc = 86
    RULE_mapFieldExact = 87
    RULE_mapKey = 88
    RULE_recordExpr = 89
    RULE_recordTuple = 90
    RULE_recordFields = 91
    RULE_recordField = 92
    RULE_functionCall = 93
    RULE_ifExpr = 94
    RULE_ifClauses = 95
    RULE_ifClause = 96
    RULE_caseExpr = 97
    RULE_crClauses = 98
    RULE_crClause = 99
    RULE_receiveExpr = 100
    RULE_funExpr = 101
    RULE_atomOrVar = 102
    RULE_integerOrVar = 103
    RULE_funClauses = 104
    RULE_funClause = 105
    RULE_tryExpr = 106
    RULE_tryCatch = 107
    RULE_tryClauses = 108
    RULE_tryClause = 109
    RULE_tryOptStackTrace = 110
    RULE_argumentList = 111
    RULE_patArgumentList = 112
    RULE_exprs = 113
    RULE_patExprs = 114
    RULE_guard_ = 115
    RULE_atomic = 116
    RULE_prefixOp = 117
    RULE_multOp = 118
    RULE_addOp = 119
    RULE_listOp = 120
    RULE_compOp = 121

    ruleNames =  [ "forms", "form", "tokAtom", "tokVar", "tokFloat", "tokInteger", 
                   "tokChar", "tokString", "attribute", "typeSpec", "specFun", 
                   "typedAttrVal", "typedRecordFields", "typedExprs", "typedExpr", 
                   "typeSigs", "typeSig", "typeGuards", "typeGuard", "topTypes", 
                   "topType", "topType100", "type200", "type300", "type400", 
                   "type500", "type_", "funType100", "funType", "mapPairTypes", 
                   "mapPairType", "fieldTypes", "fieldType", "binaryType", 
                   "binBaseType", "binUnitType", "attrVal", "function_", 
                   "functionClause", "clauseArgs", "clauseGuard", "clauseBody", 
                   "expr", "expr100", "expr150", "expr160", "expr200", "expr300", 
                   "expr400", "expr500", "expr600", "expr650", "expr700", 
                   "expr800", "exprMax", "patExpr", "patExpr200", "patExpr300", 
                   "patExpr400", "patExpr500", "patExpr600", "patExpr650", 
                   "patExpr700", "patExpr800", "patExprMax", "mapPatExpr", 
                   "recordPatExpr", "list_", "tail", "binary", "binElements", 
                   "binElement", "bitExpr", "optBitSizeExpr", "optBitTypeList", 
                   "bitTypeList", "bitType", "bitSizeExpr", "listComprehension", 
                   "binaryComprehension", "lcExprs", "lcExpr", "tuple_", 
                   "mapExpr", "mapTuple", "mapField", "mapFieldAssoc", "mapFieldExact", 
                   "mapKey", "recordExpr", "recordTuple", "recordFields", 
                   "recordField", "functionCall", "ifExpr", "ifClauses", 
                   "ifClause", "caseExpr", "crClauses", "crClause", "receiveExpr", 
                   "funExpr", "atomOrVar", "integerOrVar", "funClauses", 
                   "funClause", "tryExpr", "tryCatch", "tryClauses", "tryClause", 
                   "tryOptStackTrace", "argumentList", "patArgumentList", 
                   "exprs", "patExprs", "guard_", "atomic", "prefixOp", 
                   "multOp", "addOp", "listOp", "compOp" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    TokAtom=65
    TokVar=66
    TokFloat=67
    TokInteger=68
    TokChar=69
    TokString=70
    AttrName=71
    Comment=72
    WS=73

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class FormsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ErlangParser.EOF, 0)

        def form(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.FormContext)
            else:
                return self.getTypedRuleContext(ErlangParser.FormContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_forms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForms" ):
                listener.enterForms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForms" ):
                listener.exitForms(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForms" ):
                return visitor.visitForms(self)
            else:
                return visitor.visitChildren(self)




    def forms(self):

        localctx = ErlangParser.FormsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_forms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 244
                self.form()
                self.state = 247 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==2 or _la==65 or _la==71):
                    break

            self.state = 249
            self.match(ErlangParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self):
            return self.getTypedRuleContext(ErlangParser.AttributeContext,0)


        def function_(self):
            return self.getTypedRuleContext(ErlangParser.Function_Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_form

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForm" ):
                listener.enterForm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForm" ):
                listener.exitForm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForm" ):
                return visitor.visitForm(self)
            else:
                return visitor.visitChildren(self)




    def form(self):

        localctx = ErlangParser.FormContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_form)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 71]:
                self.state = 251
                self.attribute()
                pass
            elif token in [65]:
                self.state = 252
                self.function_()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 255
            self.match(ErlangParser.T__0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TokAtom(self):
            return self.getToken(ErlangParser.TokAtom, 0)

        def getRuleIndex(self):
            return ErlangParser.RULE_tokAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokAtom" ):
                listener.enterTokAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokAtom" ):
                listener.exitTokAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTokAtom" ):
                return visitor.visitTokAtom(self)
            else:
                return visitor.visitChildren(self)




    def tokAtom(self):

        localctx = ErlangParser.TokAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_tokAtom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.match(ErlangParser.TokAtom)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TokVar(self):
            return self.getToken(ErlangParser.TokVar, 0)

        def getRuleIndex(self):
            return ErlangParser.RULE_tokVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokVar" ):
                listener.enterTokVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokVar" ):
                listener.exitTokVar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTokVar" ):
                return visitor.visitTokVar(self)
            else:
                return visitor.visitChildren(self)




    def tokVar(self):

        localctx = ErlangParser.TokVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_tokVar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.match(ErlangParser.TokVar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokFloatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TokFloat(self):
            return self.getToken(ErlangParser.TokFloat, 0)

        def getRuleIndex(self):
            return ErlangParser.RULE_tokFloat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokFloat" ):
                listener.enterTokFloat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokFloat" ):
                listener.exitTokFloat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTokFloat" ):
                return visitor.visitTokFloat(self)
            else:
                return visitor.visitChildren(self)




    def tokFloat(self):

        localctx = ErlangParser.TokFloatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_tokFloat)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.match(ErlangParser.TokFloat)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokIntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TokInteger(self):
            return self.getToken(ErlangParser.TokInteger, 0)

        def getRuleIndex(self):
            return ErlangParser.RULE_tokInteger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokInteger" ):
                listener.enterTokInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokInteger" ):
                listener.exitTokInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTokInteger" ):
                return visitor.visitTokInteger(self)
            else:
                return visitor.visitChildren(self)




    def tokInteger(self):

        localctx = ErlangParser.TokIntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_tokInteger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.match(ErlangParser.TokInteger)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokCharContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TokChar(self):
            return self.getToken(ErlangParser.TokChar, 0)

        def getRuleIndex(self):
            return ErlangParser.RULE_tokChar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokChar" ):
                listener.enterTokChar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokChar" ):
                listener.exitTokChar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTokChar" ):
                return visitor.visitTokChar(self)
            else:
                return visitor.visitChildren(self)




    def tokChar(self):

        localctx = ErlangParser.TokCharContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_tokChar)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(ErlangParser.TokChar)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TokStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TokString(self):
            return self.getToken(ErlangParser.TokString, 0)

        def getRuleIndex(self):
            return ErlangParser.RULE_tokString

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTokString" ):
                listener.enterTokString(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTokString" ):
                listener.exitTokString(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTokString" ):
                return visitor.visitTokString(self)
            else:
                return visitor.visitChildren(self)




    def tokString(self):

        localctx = ErlangParser.TokStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_tokString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(ErlangParser.TokString)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def attrVal(self):
            return self.getTypedRuleContext(ErlangParser.AttrValContext,0)


        def typedAttrVal(self):
            return self.getTypedRuleContext(ErlangParser.TypedAttrValContext,0)


        def AttrName(self):
            return self.getToken(ErlangParser.AttrName, 0)

        def typeSpec(self):
            return self.getTypedRuleContext(ErlangParser.TypeSpecContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = ErlangParser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_attribute)
        try:
            self.state = 285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 269
                self.match(ErlangParser.T__1)
                self.state = 270
                self.tokAtom()
                self.state = 271
                self.attrVal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 273
                self.match(ErlangParser.T__1)
                self.state = 274
                self.tokAtom()
                self.state = 275
                self.typedAttrVal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 277
                self.match(ErlangParser.T__1)
                self.state = 278
                self.tokAtom()
                self.state = 279
                self.match(ErlangParser.T__2)
                self.state = 280
                self.typedAttrVal()
                self.state = 281
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 283
                self.match(ErlangParser.AttrName)
                self.state = 284
                self.typeSpec()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specFun(self):
            return self.getTypedRuleContext(ErlangParser.SpecFunContext,0)


        def typeSigs(self):
            return self.getTypedRuleContext(ErlangParser.TypeSigsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_typeSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpec" ):
                listener.enterTypeSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpec" ):
                listener.exitTypeSpec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSpec" ):
                return visitor.visitTypeSpec(self)
            else:
                return visitor.visitChildren(self)




    def typeSpec(self):

        localctx = ErlangParser.TypeSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_typeSpec)
        try:
            self.state = 295
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 287
                self.specFun()
                self.state = 288
                self.typeSigs()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 290
                self.match(ErlangParser.T__2)
                self.state = 291
                self.specFun()
                self.state = 292
                self.typeSigs()
                self.state = 293
                self.match(ErlangParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecFunContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TokAtomContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TokAtomContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_specFun

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecFun" ):
                listener.enterSpecFun(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecFun" ):
                listener.exitSpecFun(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecFun" ):
                return visitor.visitSpecFun(self)
            else:
                return visitor.visitChildren(self)




    def specFun(self):

        localctx = ErlangParser.SpecFunContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_specFun)
        try:
            self.state = 302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 297
                self.tokAtom()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 298
                self.tokAtom()
                self.state = 299
                self.match(ErlangParser.T__4)
                self.state = 300
                self.tokAtom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedAttrValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def typedRecordFields(self):
            return self.getTypedRuleContext(ErlangParser.TypedRecordFieldsContext,0)


        def topType(self):
            return self.getTypedRuleContext(ErlangParser.TopTypeContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_typedAttrVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedAttrVal" ):
                listener.enterTypedAttrVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedAttrVal" ):
                listener.exitTypedAttrVal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedAttrVal" ):
                return visitor.visitTypedAttrVal(self)
            else:
                return visitor.visitChildren(self)




    def typedAttrVal(self):

        localctx = ErlangParser.TypedAttrValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typedAttrVal)
        try:
            self.state = 312
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 304
                self.expr()
                self.state = 305
                self.match(ErlangParser.T__5)
                self.state = 306
                self.typedRecordFields()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 308
                self.expr()
                self.state = 309
                self.match(ErlangParser.T__6)
                self.state = 310
                self.topType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedRecordFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedExprs(self):
            return self.getTypedRuleContext(ErlangParser.TypedExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_typedRecordFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedRecordFields" ):
                listener.enterTypedRecordFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedRecordFields" ):
                listener.exitTypedRecordFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedRecordFields" ):
                return visitor.visitTypedRecordFields(self)
            else:
                return visitor.visitChildren(self)




    def typedRecordFields(self):

        localctx = ErlangParser.TypedRecordFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_typedRecordFields)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self.match(ErlangParser.T__7)
            self.state = 315
            self.typedExprs()
            self.state = 316
            self.match(ErlangParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedExprsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typedExpr(self):
            return self.getTypedRuleContext(ErlangParser.TypedExprContext,0)


        def typedExprs(self):
            return self.getTypedRuleContext(ErlangParser.TypedExprsContext,0)


        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def exprs(self):
            return self.getTypedRuleContext(ErlangParser.ExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_typedExprs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedExprs" ):
                listener.enterTypedExprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedExprs" ):
                listener.exitTypedExprs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedExprs" ):
                return visitor.visitTypedExprs(self)
            else:
                return visitor.visitChildren(self)




    def typedExprs(self):

        localctx = ErlangParser.TypedExprsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_typedExprs)
        try:
            self.state = 331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 318
                self.typedExpr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 319
                self.typedExpr()
                self.state = 320
                self.match(ErlangParser.T__5)
                self.state = 321
                self.typedExprs()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 323
                self.expr()
                self.state = 324
                self.match(ErlangParser.T__5)
                self.state = 325
                self.typedExprs()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 327
                self.typedExpr()
                self.state = 328
                self.match(ErlangParser.T__5)
                self.state = 329
                self.exprs()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def topType(self):
            return self.getTypedRuleContext(ErlangParser.TopTypeContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_typedExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedExpr" ):
                listener.enterTypedExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedExpr" ):
                listener.exitTypedExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedExpr" ):
                return visitor.visitTypedExpr(self)
            else:
                return visitor.visitChildren(self)




    def typedExpr(self):

        localctx = ErlangParser.TypedExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_typedExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.expr()
            self.state = 334
            self.match(ErlangParser.T__6)
            self.state = 335
            self.topType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSigsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSig(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TypeSigContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TypeSigContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_typeSigs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSigs" ):
                listener.enterTypeSigs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSigs" ):
                listener.exitTypeSigs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSigs" ):
                return visitor.visitTypeSigs(self)
            else:
                return visitor.visitChildren(self)




    def typeSigs(self):

        localctx = ErlangParser.TypeSigsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_typeSigs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.typeSig()
            self.state = 342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==10:
                self.state = 338
                self.match(ErlangParser.T__9)
                self.state = 339
                self.typeSig()
                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSigContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funType(self):
            return self.getTypedRuleContext(ErlangParser.FunTypeContext,0)


        def typeGuards(self):
            return self.getTypedRuleContext(ErlangParser.TypeGuardsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_typeSig

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSig" ):
                listener.enterTypeSig(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSig" ):
                listener.exitTypeSig(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSig" ):
                return visitor.visitTypeSig(self)
            else:
                return visitor.visitChildren(self)




    def typeSig(self):

        localctx = ErlangParser.TypeSigContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeSig)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.funType()
            self.state = 348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 346
                self.match(ErlangParser.T__10)
                self.state = 347
                self.typeGuards()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeGuardsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeGuard(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TypeGuardContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TypeGuardContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_typeGuards

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeGuards" ):
                listener.enterTypeGuards(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeGuards" ):
                listener.exitTypeGuards(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeGuards" ):
                return visitor.visitTypeGuards(self)
            else:
                return visitor.visitChildren(self)




    def typeGuards(self):

        localctx = ErlangParser.TypeGuardsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeGuards)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.typeGuard()
            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 351
                self.match(ErlangParser.T__5)
                self.state = 352
                self.typeGuard()
                self.state = 357
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeGuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def topTypes(self):
            return self.getTypedRuleContext(ErlangParser.TopTypesContext,0)


        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def topType(self):
            return self.getTypedRuleContext(ErlangParser.TopTypeContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_typeGuard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeGuard" ):
                listener.enterTypeGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeGuard" ):
                listener.exitTypeGuard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeGuard" ):
                return visitor.visitTypeGuard(self)
            else:
                return visitor.visitChildren(self)




    def typeGuard(self):

        localctx = ErlangParser.TypeGuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_typeGuard)
        try:
            self.state = 367
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 358
                self.tokAtom()
                self.state = 359
                self.match(ErlangParser.T__2)
                self.state = 360
                self.topTypes()
                self.state = 361
                self.match(ErlangParser.T__3)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 363
                self.tokVar()
                self.state = 364
                self.match(ErlangParser.T__6)
                self.state = 365
                self.topType()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TopTypeContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TopTypeContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_topTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopTypes" ):
                listener.enterTopTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopTypes" ):
                listener.exitTopTypes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopTypes" ):
                return visitor.visitTopTypes(self)
            else:
                return visitor.visitChildren(self)




    def topTypes(self):

        localctx = ErlangParser.TopTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_topTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.topType()
            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 370
                self.match(ErlangParser.T__5)
                self.state = 371
                self.topType()
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topType100(self):
            return self.getTypedRuleContext(ErlangParser.TopType100Context,0)


        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_topType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopType" ):
                listener.enterTopType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopType" ):
                listener.exitTopType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopType" ):
                return visitor.visitTopType(self)
            else:
                return visitor.visitChildren(self)




    def topType(self):

        localctx = ErlangParser.TopTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_topType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 377
                self.tokVar()
                self.state = 378
                self.match(ErlangParser.T__6)


            self.state = 382
            self.topType100()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopType100Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type200(self):
            return self.getTypedRuleContext(ErlangParser.Type200Context,0)


        def topType100(self):
            return self.getTypedRuleContext(ErlangParser.TopType100Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_topType100

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopType100" ):
                listener.enterTopType100(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopType100" ):
                listener.exitTopType100(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopType100" ):
                return visitor.visitTopType100(self)
            else:
                return visitor.visitChildren(self)




    def topType100(self):

        localctx = ErlangParser.TopType100Context(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_topType100)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.type200()
            self.state = 387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 385
                self.match(ErlangParser.T__11)
                self.state = 386
                self.topType100()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type200Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type300(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.Type300Context)
            else:
                return self.getTypedRuleContext(ErlangParser.Type300Context,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_type200

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType200" ):
                listener.enterType200(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType200" ):
                listener.exitType200(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType200" ):
                return visitor.visitType200(self)
            else:
                return visitor.visitChildren(self)




    def type200(self):

        localctx = ErlangParser.Type200Context(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_type200)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.type300(0)
            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13:
                self.state = 390
                self.match(ErlangParser.T__12)
                self.state = 391
                self.type300(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type300Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type400(self):
            return self.getTypedRuleContext(ErlangParser.Type400Context,0)


        def type300(self):
            return self.getTypedRuleContext(ErlangParser.Type300Context,0)


        def addOp(self):
            return self.getTypedRuleContext(ErlangParser.AddOpContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_type300

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType300" ):
                listener.enterType300(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType300" ):
                listener.exitType300(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType300" ):
                return visitor.visitType300(self)
            else:
                return visitor.visitChildren(self)



    def type300(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ErlangParser.Type300Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 46
        self.enterRecursionRule(localctx, 46, self.RULE_type300, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.type400(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 403
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ErlangParser.Type300Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_type300)
                    self.state = 397
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 398
                    self.addOp()
                    self.state = 399
                    self.type400(0) 
                self.state = 405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Type400Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type500(self):
            return self.getTypedRuleContext(ErlangParser.Type500Context,0)


        def type400(self):
            return self.getTypedRuleContext(ErlangParser.Type400Context,0)


        def multOp(self):
            return self.getTypedRuleContext(ErlangParser.MultOpContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_type400

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType400" ):
                listener.enterType400(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType400" ):
                listener.exitType400(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType400" ):
                return visitor.visitType400(self)
            else:
                return visitor.visitChildren(self)



    def type400(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ErlangParser.Type400Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 48
        self.enterRecursionRule(localctx, 48, self.RULE_type400, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.type500()
            self._ctx.stop = self._input.LT(-1)
            self.state = 415
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ErlangParser.Type400Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_type400)
                    self.state = 409
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 410
                    self.multOp()
                    self.state = 411
                    self.type500() 
                self.state = 417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Type500Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_(self):
            return self.getTypedRuleContext(ErlangParser.Type_Context,0)


        def prefixOp(self):
            return self.getTypedRuleContext(ErlangParser.PrefixOpContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_type500

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType500" ):
                listener.enterType500(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType500" ):
                listener.exitType500(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType500" ):
                return visitor.visitType500(self)
            else:
                return visitor.visitChildren(self)




    def type500(self):

        localctx = ErlangParser.Type500Context(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_type500)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 30786325577732) != 0):
                self.state = 418
                self.prefixOp()


            self.state = 421
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topType(self):
            return self.getTypedRuleContext(ErlangParser.TopTypeContext,0)


        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def tokAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TokAtomContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TokAtomContext,i)


        def topTypes(self):
            return self.getTypedRuleContext(ErlangParser.TopTypesContext,0)


        def mapPairTypes(self):
            return self.getTypedRuleContext(ErlangParser.MapPairTypesContext,0)


        def fieldTypes(self):
            return self.getTypedRuleContext(ErlangParser.FieldTypesContext,0)


        def binaryType(self):
            return self.getTypedRuleContext(ErlangParser.BinaryTypeContext,0)


        def tokInteger(self):
            return self.getTypedRuleContext(ErlangParser.TokIntegerContext,0)


        def tokChar(self):
            return self.getTypedRuleContext(ErlangParser.TokCharContext,0)


        def funType100(self):
            return self.getTypedRuleContext(ErlangParser.FunType100Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_type_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_" ):
                listener.enterType_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_" ):
                listener.exitType_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_" ):
                return visitor.visitType_(self)
            else:
                return visitor.visitChildren(self)




    def type_(self):

        localctx = ErlangParser.Type_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_type_)
        try:
            self.state = 499
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 423
                self.match(ErlangParser.T__2)
                self.state = 424
                self.topType()
                self.state = 425
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 427
                self.tokVar()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 428
                self.tokAtom()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 429
                self.tokAtom()
                self.state = 430
                self.match(ErlangParser.T__2)
                self.state = 431
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 433
                self.tokAtom()
                self.state = 434
                self.match(ErlangParser.T__2)
                self.state = 435
                self.topTypes()
                self.state = 436
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 438
                self.tokAtom()
                self.state = 439
                self.match(ErlangParser.T__4)
                self.state = 440
                self.tokAtom()
                self.state = 441
                self.match(ErlangParser.T__2)
                self.state = 442
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 444
                self.tokAtom()
                self.state = 445
                self.match(ErlangParser.T__4)
                self.state = 446
                self.tokAtom()
                self.state = 447
                self.match(ErlangParser.T__2)
                self.state = 448
                self.topTypes()
                self.state = 449
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 451
                self.match(ErlangParser.T__13)
                self.state = 452
                self.match(ErlangParser.T__14)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 453
                self.match(ErlangParser.T__13)
                self.state = 454
                self.topType()
                self.state = 455
                self.match(ErlangParser.T__14)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 457
                self.match(ErlangParser.T__13)
                self.state = 458
                self.topType()
                self.state = 459
                self.match(ErlangParser.T__5)
                self.state = 460
                self.match(ErlangParser.T__15)
                self.state = 461
                self.match(ErlangParser.T__14)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 463
                self.match(ErlangParser.T__16)
                self.state = 464
                self.match(ErlangParser.T__7)
                self.state = 465
                self.match(ErlangParser.T__8)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 466
                self.match(ErlangParser.T__16)
                self.state = 467
                self.match(ErlangParser.T__7)
                self.state = 468
                self.mapPairTypes()
                self.state = 469
                self.match(ErlangParser.T__8)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 471
                self.match(ErlangParser.T__7)
                self.state = 472
                self.match(ErlangParser.T__8)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 473
                self.match(ErlangParser.T__7)
                self.state = 474
                self.topTypes()
                self.state = 475
                self.match(ErlangParser.T__8)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 477
                self.match(ErlangParser.T__16)
                self.state = 478
                self.tokAtom()
                self.state = 479
                self.match(ErlangParser.T__7)
                self.state = 480
                self.match(ErlangParser.T__8)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 482
                self.match(ErlangParser.T__16)
                self.state = 483
                self.tokAtom()
                self.state = 484
                self.match(ErlangParser.T__7)
                self.state = 485
                self.fieldTypes()
                self.state = 486
                self.match(ErlangParser.T__8)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 488
                self.binaryType()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 489
                self.tokInteger()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 490
                self.tokChar()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 491
                self.match(ErlangParser.T__17)
                self.state = 492
                self.match(ErlangParser.T__2)
                self.state = 493
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 494
                self.match(ErlangParser.T__17)
                self.state = 495
                self.match(ErlangParser.T__2)
                self.state = 496
                self.funType100()
                self.state = 497
                self.match(ErlangParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunType100Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topType(self):
            return self.getTypedRuleContext(ErlangParser.TopTypeContext,0)


        def funType(self):
            return self.getTypedRuleContext(ErlangParser.FunTypeContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_funType100

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunType100" ):
                listener.enterFunType100(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunType100" ):
                listener.exitFunType100(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunType100" ):
                return visitor.visitFunType100(self)
            else:
                return visitor.visitChildren(self)




    def funType100(self):

        localctx = ErlangParser.FunType100Context(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_funType100)
        try:
            self.state = 507
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self.match(ErlangParser.T__2)
                self.state = 502
                self.match(ErlangParser.T__15)
                self.state = 503
                self.match(ErlangParser.T__3)
                self.state = 504
                self.match(ErlangParser.T__18)
                self.state = 505
                self.topType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 506
                self.funType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topType(self):
            return self.getTypedRuleContext(ErlangParser.TopTypeContext,0)


        def topTypes(self):
            return self.getTypedRuleContext(ErlangParser.TopTypesContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_funType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunType" ):
                listener.enterFunType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunType" ):
                listener.exitFunType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunType" ):
                return visitor.visitFunType(self)
            else:
                return visitor.visitChildren(self)




    def funType(self):

        localctx = ErlangParser.FunTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_funType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.match(ErlangParser.T__2)
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 30786330181900) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 27) != 0):
                self.state = 510
                self.topTypes()


            self.state = 513
            self.match(ErlangParser.T__3)
            self.state = 514
            self.match(ErlangParser.T__18)
            self.state = 515
            self.topType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapPairTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapPairType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.MapPairTypeContext)
            else:
                return self.getTypedRuleContext(ErlangParser.MapPairTypeContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapPairTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapPairTypes" ):
                listener.enterMapPairTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapPairTypes" ):
                listener.exitMapPairTypes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapPairTypes" ):
                return visitor.visitMapPairTypes(self)
            else:
                return visitor.visitChildren(self)




    def mapPairTypes(self):

        localctx = ErlangParser.MapPairTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_mapPairTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.mapPairType()
            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 518
                self.match(ErlangParser.T__5)
                self.state = 519
                self.mapPairType()
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapPairTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def topType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TopTypeContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TopTypeContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapPairType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapPairType" ):
                listener.enterMapPairType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapPairType" ):
                listener.exitMapPairType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapPairType" ):
                return visitor.visitMapPairType(self)
            else:
                return visitor.visitChildren(self)




    def mapPairType(self):

        localctx = ErlangParser.MapPairTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_mapPairType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.topType()
            self.state = 526
            _la = self._input.LA(1)
            if not(_la==20 or _la==21):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 527
            self.topType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.FieldTypeContext)
            else:
                return self.getTypedRuleContext(ErlangParser.FieldTypeContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_fieldTypes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldTypes" ):
                listener.enterFieldTypes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldTypes" ):
                listener.exitFieldTypes(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldTypes" ):
                return visitor.visitFieldTypes(self)
            else:
                return visitor.visitChildren(self)




    def fieldTypes(self):

        localctx = ErlangParser.FieldTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_fieldTypes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 529
            self.fieldType()
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 530
                self.match(ErlangParser.T__5)
                self.state = 531
                self.fieldType()
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def topType(self):
            return self.getTypedRuleContext(ErlangParser.TopTypeContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_fieldType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldType" ):
                listener.enterFieldType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldType" ):
                listener.exitFieldType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldType" ):
                return visitor.visitFieldType(self)
            else:
                return visitor.visitChildren(self)




    def fieldType(self):

        localctx = ErlangParser.FieldTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_fieldType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.tokAtom()
            self.state = 538
            self.match(ErlangParser.T__6)
            self.state = 539
            self.topType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binBaseType(self):
            return self.getTypedRuleContext(ErlangParser.BinBaseTypeContext,0)


        def binUnitType(self):
            return self.getTypedRuleContext(ErlangParser.BinUnitTypeContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_binaryType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryType" ):
                listener.enterBinaryType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryType" ):
                listener.exitBinaryType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryType" ):
                return visitor.visitBinaryType(self)
            else:
                return visitor.visitChildren(self)




    def binaryType(self):

        localctx = ErlangParser.BinaryTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_binaryType)
        try:
            self.state = 557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 541
                self.match(ErlangParser.T__21)
                self.state = 542
                self.match(ErlangParser.T__22)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 543
                self.match(ErlangParser.T__21)
                self.state = 544
                self.binBaseType()
                self.state = 545
                self.match(ErlangParser.T__22)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 547
                self.match(ErlangParser.T__21)
                self.state = 548
                self.binUnitType()
                self.state = 549
                self.match(ErlangParser.T__22)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 551
                self.match(ErlangParser.T__21)
                self.state = 552
                self.binBaseType()
                self.state = 553
                self.match(ErlangParser.T__5)
                self.state = 554
                self.binUnitType()
                self.state = 555
                self.match(ErlangParser.T__22)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinBaseTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def type_(self):
            return self.getTypedRuleContext(ErlangParser.Type_Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_binBaseType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinBaseType" ):
                listener.enterBinBaseType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinBaseType" ):
                listener.exitBinBaseType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinBaseType" ):
                return visitor.visitBinBaseType(self)
            else:
                return visitor.visitChildren(self)




    def binBaseType(self):

        localctx = ErlangParser.BinBaseTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_binBaseType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.tokVar()
            self.state = 560
            self.match(ErlangParser.T__4)
            self.state = 561
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinUnitTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TokVarContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TokVarContext,i)


        def type_(self):
            return self.getTypedRuleContext(ErlangParser.Type_Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_binUnitType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinUnitType" ):
                listener.enterBinUnitType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinUnitType" ):
                listener.exitBinUnitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinUnitType" ):
                return visitor.visitBinUnitType(self)
            else:
                return visitor.visitChildren(self)




    def binUnitType(self):

        localctx = ErlangParser.BinUnitTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_binUnitType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.tokVar()
            self.state = 564
            self.match(ErlangParser.T__4)
            self.state = 565
            self.tokVar()
            self.state = 566
            self.match(ErlangParser.T__23)
            self.state = 567
            self.type_()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrValContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def exprs(self):
            return self.getTypedRuleContext(ErlangParser.ExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_attrVal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttrVal" ):
                listener.enterAttrVal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttrVal" ):
                listener.exitAttrVal(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttrVal" ):
                return visitor.visitAttrVal(self)
            else:
                return visitor.visitChildren(self)




    def attrVal(self):

        localctx = ErlangParser.AttrValContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_attrVal)
        try:
            self.state = 584
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 569
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 570
                self.match(ErlangParser.T__2)
                self.state = 571
                self.expr()
                self.state = 572
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 574
                self.expr()
                self.state = 575
                self.match(ErlangParser.T__5)
                self.state = 576
                self.exprs()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 578
                self.match(ErlangParser.T__2)
                self.state = 579
                self.expr()
                self.state = 580
                self.match(ErlangParser.T__5)
                self.state = 581
                self.exprs()
                self.state = 582
                self.match(ErlangParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.FunctionClauseContext)
            else:
                return self.getTypedRuleContext(ErlangParser.FunctionClauseContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_function_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_" ):
                listener.enterFunction_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_" ):
                listener.exitFunction_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_" ):
                return visitor.visitFunction_(self)
            else:
                return visitor.visitChildren(self)




    def function_(self):

        localctx = ErlangParser.Function_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_function_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.functionClause()
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==10:
                self.state = 587
                self.match(ErlangParser.T__9)
                self.state = 588
                self.functionClause()
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def clauseArgs(self):
            return self.getTypedRuleContext(ErlangParser.ClauseArgsContext,0)


        def clauseGuard(self):
            return self.getTypedRuleContext(ErlangParser.ClauseGuardContext,0)


        def clauseBody(self):
            return self.getTypedRuleContext(ErlangParser.ClauseBodyContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_functionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionClause" ):
                listener.enterFunctionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionClause" ):
                listener.exitFunctionClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionClause" ):
                return visitor.visitFunctionClause(self)
            else:
                return visitor.visitChildren(self)




    def functionClause(self):

        localctx = ErlangParser.FunctionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_functionClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 594
            self.tokAtom()
            self.state = 595
            self.clauseArgs()
            self.state = 596
            self.clauseGuard()
            self.state = 597
            self.clauseBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClauseArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patArgumentList(self):
            return self.getTypedRuleContext(ErlangParser.PatArgumentListContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_clauseArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClauseArgs" ):
                listener.enterClauseArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClauseArgs" ):
                listener.exitClauseArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClauseArgs" ):
                return visitor.visitClauseArgs(self)
            else:
                return visitor.visitChildren(self)




    def clauseArgs(self):

        localctx = ErlangParser.ClauseArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_clauseArgs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.patArgumentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClauseGuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def guard_(self):
            return self.getTypedRuleContext(ErlangParser.Guard_Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_clauseGuard

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClauseGuard" ):
                listener.enterClauseGuard(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClauseGuard" ):
                listener.exitClauseGuard(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClauseGuard" ):
                return visitor.visitClauseGuard(self)
            else:
                return visitor.visitChildren(self)




    def clauseGuard(self):

        localctx = ErlangParser.ClauseGuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_clauseGuard)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 601
                self.match(ErlangParser.T__10)
                self.state = 602
                self.guard_()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClauseBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprs(self):
            return self.getTypedRuleContext(ErlangParser.ExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_clauseBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClauseBody" ):
                listener.enterClauseBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClauseBody" ):
                listener.exitClauseBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClauseBody" ):
                return visitor.visitClauseBody(self)
            else:
                return visitor.visitChildren(self)




    def clauseBody(self):

        localctx = ErlangParser.ClauseBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_clauseBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(ErlangParser.T__18)
            self.state = 606
            self.exprs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def expr100(self):
            return self.getTypedRuleContext(ErlangParser.Expr100Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = ErlangParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_expr)
        try:
            self.state = 611
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 608
                self.match(ErlangParser.T__24)
                self.state = 609
                self.expr()
                pass
            elif token in [2, 3, 8, 14, 17, 18, 22, 30, 36, 37, 39, 41, 42, 43, 44, 65, 66, 67, 68, 69, 70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 610
                self.expr100()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr100Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr150(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.Expr150Context)
            else:
                return self.getTypedRuleContext(ErlangParser.Expr150Context,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr100

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr100" ):
                listener.enterExpr100(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr100" ):
                listener.exitExpr100(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr100" ):
                return visitor.visitExpr100(self)
            else:
                return visitor.visitChildren(self)




    def expr100(self):

        localctx = ErlangParser.Expr100Context(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_expr100)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.expr150()
            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==26 or _la==27:
                self.state = 614
                _la = self._input.LA(1)
                if not(_la==26 or _la==27):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 615
                self.expr150()
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr150Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr160(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.Expr160Context)
            else:
                return self.getTypedRuleContext(ErlangParser.Expr160Context,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr150

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr150" ):
                listener.enterExpr150(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr150" ):
                listener.exitExpr150(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr150" ):
                return visitor.visitExpr150(self)
            else:
                return visitor.visitChildren(self)




    def expr150(self):

        localctx = ErlangParser.Expr150Context(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_expr150)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.expr160()
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==28:
                self.state = 622
                self.match(ErlangParser.T__27)
                self.state = 623
                self.expr160()
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr160Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr200(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.Expr200Context)
            else:
                return self.getTypedRuleContext(ErlangParser.Expr200Context,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr160

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr160" ):
                listener.enterExpr160(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr160" ):
                listener.exitExpr160(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr160" ):
                return visitor.visitExpr160(self)
            else:
                return visitor.visitChildren(self)




    def expr160(self):

        localctx = ErlangParser.Expr160Context(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_expr160)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.expr200()
            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==29:
                self.state = 630
                self.match(ErlangParser.T__28)
                self.state = 631
                self.expr200()
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr200Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr300(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.Expr300Context)
            else:
                return self.getTypedRuleContext(ErlangParser.Expr300Context,i)


        def compOp(self):
            return self.getTypedRuleContext(ErlangParser.CompOpContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr200

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr200" ):
                listener.enterExpr200(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr200" ):
                listener.exitExpr200(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr200" ):
                return visitor.visitExpr200(self)
            else:
                return visitor.visitChildren(self)




    def expr200(self):

        localctx = ErlangParser.Expr200Context(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_expr200)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 637
            self.expr300()
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 255) != 0):
                self.state = 638
                self.compOp()
                self.state = 639
                self.expr300()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr300Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr400(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.Expr400Context)
            else:
                return self.getTypedRuleContext(ErlangParser.Expr400Context,i)


        def listOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.ListOpContext)
            else:
                return self.getTypedRuleContext(ErlangParser.ListOpContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr300

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr300" ):
                listener.enterExpr300(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr300" ):
                listener.exitExpr300(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr300" ):
                return visitor.visitExpr300(self)
            else:
                return visitor.visitChildren(self)




    def expr300(self):

        localctx = ErlangParser.Expr300Context(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_expr300)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.expr400()
            self.state = 649
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==55 or _la==56:
                self.state = 644
                self.listOp()
                self.state = 645
                self.expr400()
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr400Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr500(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.Expr500Context)
            else:
                return self.getTypedRuleContext(ErlangParser.Expr500Context,i)


        def addOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.AddOpContext)
            else:
                return self.getTypedRuleContext(ErlangParser.AddOpContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr400

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr400" ):
                listener.enterExpr400(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr400" ):
                listener.exitExpr400(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr400" ):
                return visitor.visitExpr400(self)
            else:
                return visitor.visitChildren(self)




    def expr400(self):

        localctx = ErlangParser.Expr400Context(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_expr400)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.expr500()
            self.state = 658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 35470245112053764) != 0):
                self.state = 653
                self.addOp()
                self.state = 654
                self.expr500()
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr500Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr600(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.Expr600Context)
            else:
                return self.getTypedRuleContext(ErlangParser.Expr600Context,i)


        def multOp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.MultOpContext)
            else:
                return self.getTypedRuleContext(ErlangParser.MultOpContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr500

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr500" ):
                listener.enterExpr500(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr500" ):
                listener.exitExpr500(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr500" ):
                return visitor.visitExpr500(self)
            else:
                return visitor.visitChildren(self)




    def expr500(self):

        localctx = ErlangParser.Expr500Context(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_expr500)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.expr600()
            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 527769893076992) != 0):
                self.state = 662
                self.multOp()
                self.state = 663
                self.expr600()
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr600Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixOp(self):
            return self.getTypedRuleContext(ErlangParser.PrefixOpContext,0)


        def expr600(self):
            return self.getTypedRuleContext(ErlangParser.Expr600Context,0)


        def expr650(self):
            return self.getTypedRuleContext(ErlangParser.Expr650Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr600

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr600" ):
                listener.enterExpr600(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr600" ):
                listener.exitExpr600(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr600" ):
                return visitor.visitExpr600(self)
            else:
                return visitor.visitChildren(self)




    def expr600(self):

        localctx = ErlangParser.Expr600Context(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_expr600)
        try:
            self.state = 674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 42, 43, 44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 670
                self.prefixOp()
                self.state = 671
                self.expr600()
                pass
            elif token in [3, 8, 14, 17, 18, 22, 30, 36, 37, 39, 41, 65, 66, 67, 68, 69, 70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 673
                self.expr650()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr650Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapExpr(self):
            return self.getTypedRuleContext(ErlangParser.MapExprContext,0)


        def expr700(self):
            return self.getTypedRuleContext(ErlangParser.Expr700Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr650

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr650" ):
                listener.enterExpr650(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr650" ):
                listener.exitExpr650(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr650" ):
                return visitor.visitExpr650(self)
            else:
                return visitor.visitChildren(self)




    def expr650(self):

        localctx = ErlangParser.Expr650Context(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_expr650)
        try:
            self.state = 678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 676
                self.mapExpr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 677
                self.expr700()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr700Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionCall(self):
            return self.getTypedRuleContext(ErlangParser.FunctionCallContext,0)


        def recordExpr(self):
            return self.getTypedRuleContext(ErlangParser.RecordExprContext,0)


        def expr800(self):
            return self.getTypedRuleContext(ErlangParser.Expr800Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr700

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr700" ):
                listener.enterExpr700(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr700" ):
                listener.exitExpr700(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr700" ):
                return visitor.visitExpr700(self)
            else:
                return visitor.visitChildren(self)




    def expr700(self):

        localctx = ErlangParser.Expr700Context(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_expr700)
        try:
            self.state = 683
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 680
                self.functionCall()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 681
                self.recordExpr(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 682
                self.expr800()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr800Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprMax(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.ExprMaxContext)
            else:
                return self.getTypedRuleContext(ErlangParser.ExprMaxContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_expr800

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr800" ):
                listener.enterExpr800(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr800" ):
                listener.exitExpr800(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr800" ):
                return visitor.visitExpr800(self)
            else:
                return visitor.visitChildren(self)




    def expr800(self):

        localctx = ErlangParser.Expr800Context(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_expr800)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.exprMax()
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 686
                self.match(ErlangParser.T__4)
                self.state = 687
                self.exprMax()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprMaxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def atomic(self):
            return self.getTypedRuleContext(ErlangParser.AtomicContext,0)


        def list_(self):
            return self.getTypedRuleContext(ErlangParser.List_Context,0)


        def binary(self):
            return self.getTypedRuleContext(ErlangParser.BinaryContext,0)


        def listComprehension(self):
            return self.getTypedRuleContext(ErlangParser.ListComprehensionContext,0)


        def binaryComprehension(self):
            return self.getTypedRuleContext(ErlangParser.BinaryComprehensionContext,0)


        def tuple_(self):
            return self.getTypedRuleContext(ErlangParser.Tuple_Context,0)


        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def exprs(self):
            return self.getTypedRuleContext(ErlangParser.ExprsContext,0)


        def ifExpr(self):
            return self.getTypedRuleContext(ErlangParser.IfExprContext,0)


        def caseExpr(self):
            return self.getTypedRuleContext(ErlangParser.CaseExprContext,0)


        def receiveExpr(self):
            return self.getTypedRuleContext(ErlangParser.ReceiveExprContext,0)


        def funExpr(self):
            return self.getTypedRuleContext(ErlangParser.FunExprContext,0)


        def tryExpr(self):
            return self.getTypedRuleContext(ErlangParser.TryExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_exprMax

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprMax" ):
                listener.enterExprMax(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprMax" ):
                listener.exitExprMax(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprMax" ):
                return visitor.visitExprMax(self)
            else:
                return visitor.visitChildren(self)




    def exprMax(self):

        localctx = ErlangParser.ExprMaxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_exprMax)
        try:
            self.state = 710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 690
                self.tokVar()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 691
                self.atomic()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 692
                self.list_()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 693
                self.binary()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 694
                self.listComprehension()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 695
                self.binaryComprehension()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 696
                self.tuple_()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 697
                self.match(ErlangParser.T__2)
                self.state = 698
                self.expr()
                self.state = 699
                self.match(ErlangParser.T__3)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 701
                self.match(ErlangParser.T__29)
                self.state = 702
                self.exprs()
                self.state = 703
                self.match(ErlangParser.T__30)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 705
                self.ifExpr()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 706
                self.caseExpr()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 707
                self.receiveExpr()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 708
                self.funExpr()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 709
                self.tryExpr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patExpr200(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr200Context,0)


        def patExpr(self):
            return self.getTypedRuleContext(ErlangParser.PatExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr" ):
                listener.enterPatExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr" ):
                listener.exitPatExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatExpr" ):
                return visitor.visitPatExpr(self)
            else:
                return visitor.visitChildren(self)




    def patExpr(self):

        localctx = ErlangParser.PatExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_patExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.patExpr200()
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==26:
                self.state = 713
                self.match(ErlangParser.T__25)
                self.state = 714
                self.patExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExpr200Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patExpr300(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.PatExpr300Context)
            else:
                return self.getTypedRuleContext(ErlangParser.PatExpr300Context,i)


        def compOp(self):
            return self.getTypedRuleContext(ErlangParser.CompOpContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr200

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr200" ):
                listener.enterPatExpr200(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr200" ):
                listener.exitPatExpr200(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatExpr200" ):
                return visitor.visitPatExpr200(self)
            else:
                return visitor.visitChildren(self)




    def patExpr200(self):

        localctx = ErlangParser.PatExpr200Context(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_patExpr200)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.patExpr300()
            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 255) != 0):
                self.state = 718
                self.compOp()
                self.state = 719
                self.patExpr300()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExpr300Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patExpr400(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr400Context,0)


        def listOp(self):
            return self.getTypedRuleContext(ErlangParser.ListOpContext,0)


        def patExpr300(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr300Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr300

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr300" ):
                listener.enterPatExpr300(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr300" ):
                listener.exitPatExpr300(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatExpr300" ):
                return visitor.visitPatExpr300(self)
            else:
                return visitor.visitChildren(self)




    def patExpr300(self):

        localctx = ErlangParser.PatExpr300Context(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_patExpr300)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.patExpr400(0)
            self.state = 727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55 or _la==56:
                self.state = 724
                self.listOp()
                self.state = 725
                self.patExpr300()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExpr400Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patExpr500(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr500Context,0)


        def patExpr400(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr400Context,0)


        def addOp(self):
            return self.getTypedRuleContext(ErlangParser.AddOpContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr400

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr400" ):
                listener.enterPatExpr400(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr400" ):
                listener.exitPatExpr400(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatExpr400" ):
                return visitor.visitPatExpr400(self)
            else:
                return visitor.visitChildren(self)



    def patExpr400(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ErlangParser.PatExpr400Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_patExpr400, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.patExpr500(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 738
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ErlangParser.PatExpr400Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_patExpr400)
                    self.state = 732
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 733
                    self.addOp()
                    self.state = 734
                    self.patExpr500(0) 
                self.state = 740
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PatExpr500Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patExpr600(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr600Context,0)


        def patExpr500(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr500Context,0)


        def multOp(self):
            return self.getTypedRuleContext(ErlangParser.MultOpContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr500

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr500" ):
                listener.enterPatExpr500(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr500" ):
                listener.exitPatExpr500(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatExpr500" ):
                return visitor.visitPatExpr500(self)
            else:
                return visitor.visitChildren(self)



    def patExpr500(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ErlangParser.PatExpr500Context(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 118
        self.enterRecursionRule(localctx, 118, self.RULE_patExpr500, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.patExpr600()
            self._ctx.stop = self._input.LT(-1)
            self.state = 750
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ErlangParser.PatExpr500Context(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_patExpr500)
                    self.state = 744
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 745
                    self.multOp()
                    self.state = 746
                    self.patExpr600() 
                self.state = 752
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PatExpr600Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixOp(self):
            return self.getTypedRuleContext(ErlangParser.PrefixOpContext,0)


        def patExpr600(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr600Context,0)


        def patExpr650(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr650Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr600

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr600" ):
                listener.enterPatExpr600(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr600" ):
                listener.exitPatExpr600(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatExpr600" ):
                return visitor.visitPatExpr600(self)
            else:
                return visitor.visitChildren(self)




    def patExpr600(self):

        localctx = ErlangParser.PatExpr600Context(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_patExpr600)
        try:
            self.state = 757
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 42, 43, 44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 753
                self.prefixOp()
                self.state = 754
                self.patExpr600()
                pass
            elif token in [3, 8, 14, 17, 22, 65, 66, 67, 68, 69, 70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 756
                self.patExpr650()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExpr650Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapPatExpr(self):
            return self.getTypedRuleContext(ErlangParser.MapPatExprContext,0)


        def patExpr700(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr700Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr650

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr650" ):
                listener.enterPatExpr650(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr650" ):
                listener.exitPatExpr650(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatExpr650" ):
                return visitor.visitPatExpr650(self)
            else:
                return visitor.visitChildren(self)




    def patExpr650(self):

        localctx = ErlangParser.PatExpr650Context(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_patExpr650)
        try:
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 759
                self.mapPatExpr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 760
                self.patExpr700()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExpr700Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordPatExpr(self):
            return self.getTypedRuleContext(ErlangParser.RecordPatExprContext,0)


        def patExpr800(self):
            return self.getTypedRuleContext(ErlangParser.PatExpr800Context,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr700

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr700" ):
                listener.enterPatExpr700(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr700" ):
                listener.exitPatExpr700(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatExpr700" ):
                return visitor.visitPatExpr700(self)
            else:
                return visitor.visitChildren(self)




    def patExpr700(self):

        localctx = ErlangParser.PatExpr700Context(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_patExpr700)
        try:
            self.state = 765
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 763
                self.recordPatExpr()
                pass
            elif token in [3, 8, 14, 22, 65, 66, 67, 68, 69, 70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 764
                self.patExpr800()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExpr800Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patExprMax(self):
            return self.getTypedRuleContext(ErlangParser.PatExprMaxContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExpr800

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExpr800" ):
                listener.enterPatExpr800(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExpr800" ):
                listener.exitPatExpr800(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatExpr800" ):
                return visitor.visitPatExpr800(self)
            else:
                return visitor.visitChildren(self)




    def patExpr800(self):

        localctx = ErlangParser.PatExpr800Context(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_patExpr800)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.patExprMax()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExprMaxContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def atomic(self):
            return self.getTypedRuleContext(ErlangParser.AtomicContext,0)


        def list_(self):
            return self.getTypedRuleContext(ErlangParser.List_Context,0)


        def binary(self):
            return self.getTypedRuleContext(ErlangParser.BinaryContext,0)


        def tuple_(self):
            return self.getTypedRuleContext(ErlangParser.Tuple_Context,0)


        def patExpr(self):
            return self.getTypedRuleContext(ErlangParser.PatExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExprMax

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExprMax" ):
                listener.enterPatExprMax(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExprMax" ):
                listener.exitPatExprMax(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatExprMax" ):
                return visitor.visitPatExprMax(self)
            else:
                return visitor.visitChildren(self)




    def patExprMax(self):

        localctx = ErlangParser.PatExprMaxContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_patExprMax)
        try:
            self.state = 778
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66]:
                self.enterOuterAlt(localctx, 1)
                self.state = 769
                self.tokVar()
                pass
            elif token in [65, 67, 68, 69, 70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 770
                self.atomic()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 3)
                self.state = 771
                self.list_()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 4)
                self.state = 772
                self.binary()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 5)
                self.state = 773
                self.tuple_()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 6)
                self.state = 774
                self.match(ErlangParser.T__2)
                self.state = 775
                self.patExpr()
                self.state = 776
                self.match(ErlangParser.T__3)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapPatExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapTuple(self):
            return self.getTypedRuleContext(ErlangParser.MapTupleContext,0)


        def patExprMax(self):
            return self.getTypedRuleContext(ErlangParser.PatExprMaxContext,0)


        def mapPatExpr(self):
            return self.getTypedRuleContext(ErlangParser.MapPatExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapPatExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapPatExpr" ):
                listener.enterMapPatExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapPatExpr" ):
                listener.exitMapPatExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapPatExpr" ):
                return visitor.visitMapPatExpr(self)
            else:
                return visitor.visitChildren(self)



    def mapPatExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ErlangParser.MapPatExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 130
        self.enterRecursionRule(localctx, 130, self.RULE_mapPatExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4210952) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 63) != 0):
                self.state = 781
                self.patExprMax()


            self.state = 784
            self.match(ErlangParser.T__16)
            self.state = 785
            self.mapTuple()
            self._ctx.stop = self._input.LT(-1)
            self.state = 792
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ErlangParser.MapPatExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mapPatExpr)
                    self.state = 787
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 788
                    self.match(ErlangParser.T__16)
                    self.state = 789
                    self.mapTuple() 
                self.state = 794
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RecordPatExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TokAtomContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TokAtomContext,i)


        def recordTuple(self):
            return self.getTypedRuleContext(ErlangParser.RecordTupleContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_recordPatExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordPatExpr" ):
                listener.enterRecordPatExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordPatExpr" ):
                listener.exitRecordPatExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordPatExpr" ):
                return visitor.visitRecordPatExpr(self)
            else:
                return visitor.visitChildren(self)




    def recordPatExpr(self):

        localctx = ErlangParser.RecordPatExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_recordPatExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(ErlangParser.T__16)
            self.state = 796
            self.tokAtom()
            self.state = 800
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.state = 797
                self.match(ErlangParser.T__0)
                self.state = 798
                self.tokAtom()
                pass
            elif token in [8]:
                self.state = 799
                self.recordTuple()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class List_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def tail(self):
            return self.getTypedRuleContext(ErlangParser.TailContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_list_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterList_" ):
                listener.enterList_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitList_" ):
                listener.exitList_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList_" ):
                return visitor.visitList_(self)
            else:
                return visitor.visitChildren(self)




    def list_(self):

        localctx = ErlangParser.List_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_list_)
        try:
            self.state = 808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                self.match(ErlangParser.T__13)
                self.state = 803
                self.match(ErlangParser.T__14)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 804
                self.match(ErlangParser.T__13)
                self.state = 805
                self.expr()
                self.state = 806
                self.tail()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TailContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def tail(self):
            return self.getTypedRuleContext(ErlangParser.TailContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_tail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTail" ):
                listener.enterTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTail" ):
                listener.exitTail(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTail" ):
                return visitor.visitTail(self)
            else:
                return visitor.visitChildren(self)




    def tail(self):

        localctx = ErlangParser.TailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_tail)
        try:
            self.state = 819
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 810
                self.match(ErlangParser.T__14)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 811
                self.match(ErlangParser.T__11)
                self.state = 812
                self.expr()
                self.state = 813
                self.match(ErlangParser.T__14)
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 3)
                self.state = 815
                self.match(ErlangParser.T__5)
                self.state = 816
                self.expr()
                self.state = 817
                self.tail()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binElements(self):
            return self.getTypedRuleContext(ErlangParser.BinElementsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_binary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary" ):
                listener.enterBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary" ):
                listener.exitBinary(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinary" ):
                return visitor.visitBinary(self)
            else:
                return visitor.visitChildren(self)




    def binary(self):

        localctx = ErlangParser.BinaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_binary)
        try:
            self.state = 827
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 821
                self.match(ErlangParser.T__21)
                self.state = 822
                self.match(ErlangParser.T__22)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self.match(ErlangParser.T__21)
                self.state = 824
                self.binElements()
                self.state = 825
                self.match(ErlangParser.T__22)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinElementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.BinElementContext)
            else:
                return self.getTypedRuleContext(ErlangParser.BinElementContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_binElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinElements" ):
                listener.enterBinElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinElements" ):
                listener.exitBinElements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinElements" ):
                return visitor.visitBinElements(self)
            else:
                return visitor.visitChildren(self)




    def binElements(self):

        localctx = ErlangParser.BinElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_binElements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.binElement()
            self.state = 834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 830
                self.match(ErlangParser.T__5)
                self.state = 831
                self.binElement()
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitExpr(self):
            return self.getTypedRuleContext(ErlangParser.BitExprContext,0)


        def optBitSizeExpr(self):
            return self.getTypedRuleContext(ErlangParser.OptBitSizeExprContext,0)


        def optBitTypeList(self):
            return self.getTypedRuleContext(ErlangParser.OptBitTypeListContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_binElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinElement" ):
                listener.enterBinElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinElement" ):
                listener.exitBinElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinElement" ):
                return visitor.visitBinElement(self)
            else:
                return visitor.visitChildren(self)




    def binElement(self):

        localctx = ErlangParser.BinElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_binElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 837
            self.bitExpr()
            self.state = 838
            self.optBitSizeExpr()
            self.state = 839
            self.optBitTypeList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprMax(self):
            return self.getTypedRuleContext(ErlangParser.ExprMaxContext,0)


        def prefixOp(self):
            return self.getTypedRuleContext(ErlangParser.PrefixOpContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_bitExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitExpr" ):
                listener.enterBitExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitExpr" ):
                listener.exitBitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitExpr" ):
                return visitor.visitBitExpr(self)
            else:
                return visitor.visitChildren(self)




    def bitExpr(self):

        localctx = ErlangParser.BitExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_bitExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 30786325577732) != 0):
                self.state = 841
                self.prefixOp()


            self.state = 844
            self.exprMax()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptBitSizeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitSizeExpr(self):
            return self.getTypedRuleContext(ErlangParser.BitSizeExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_optBitSizeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptBitSizeExpr" ):
                listener.enterOptBitSizeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptBitSizeExpr" ):
                listener.exitOptBitSizeExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptBitSizeExpr" ):
                return visitor.visitOptBitSizeExpr(self)
            else:
                return visitor.visitChildren(self)




    def optBitSizeExpr(self):

        localctx = ErlangParser.OptBitSizeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_optBitSizeExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 846
                self.match(ErlangParser.T__4)
                self.state = 847
                self.bitSizeExpr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptBitTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitTypeList(self):
            return self.getTypedRuleContext(ErlangParser.BitTypeListContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_optBitTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptBitTypeList" ):
                listener.enterOptBitTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptBitTypeList" ):
                listener.exitOptBitTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptBitTypeList" ):
                return visitor.visitOptBitTypeList(self)
            else:
                return visitor.visitChildren(self)




    def optBitTypeList(self):

        localctx = ErlangParser.OptBitTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_optBitTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 850
                self.match(ErlangParser.T__31)
                self.state = 851
                self.bitTypeList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.BitTypeContext)
            else:
                return self.getTypedRuleContext(ErlangParser.BitTypeContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_bitTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitTypeList" ):
                listener.enterBitTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitTypeList" ):
                listener.exitBitTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitTypeList" ):
                return visitor.visitBitTypeList(self)
            else:
                return visitor.visitChildren(self)




    def bitTypeList(self):

        localctx = ErlangParser.BitTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_bitTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.bitType()
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==2:
                self.state = 855
                self.match(ErlangParser.T__1)
                self.state = 856
                self.bitType()
                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def tokInteger(self):
            return self.getTypedRuleContext(ErlangParser.TokIntegerContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_bitType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitType" ):
                listener.enterBitType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitType" ):
                listener.exitBitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitType" ):
                return visitor.visitBitType(self)
            else:
                return visitor.visitChildren(self)




    def bitType(self):

        localctx = ErlangParser.BitTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_bitType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.tokAtom()
            self.state = 865
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 863
                self.match(ErlangParser.T__4)
                self.state = 864
                self.tokInteger()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitSizeExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprMax(self):
            return self.getTypedRuleContext(ErlangParser.ExprMaxContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_bitSizeExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitSizeExpr" ):
                listener.enterBitSizeExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitSizeExpr" ):
                listener.exitBitSizeExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitSizeExpr" ):
                return visitor.visitBitSizeExpr(self)
            else:
                return visitor.visitChildren(self)




    def bitSizeExpr(self):

        localctx = ErlangParser.BitSizeExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_bitSizeExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.exprMax()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def lcExprs(self):
            return self.getTypedRuleContext(ErlangParser.LcExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_listComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListComprehension" ):
                listener.enterListComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListComprehension" ):
                listener.exitListComprehension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListComprehension" ):
                return visitor.visitListComprehension(self)
            else:
                return visitor.visitChildren(self)




    def listComprehension(self):

        localctx = ErlangParser.ListComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_listComprehension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.match(ErlangParser.T__13)
            self.state = 870
            self.expr()
            self.state = 871
            self.match(ErlangParser.T__32)
            self.state = 872
            self.lcExprs()
            self.state = 873
            self.match(ErlangParser.T__14)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryComprehensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprMax(self):
            return self.getTypedRuleContext(ErlangParser.ExprMaxContext,0)


        def lcExprs(self):
            return self.getTypedRuleContext(ErlangParser.LcExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_binaryComprehension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComprehension" ):
                listener.enterBinaryComprehension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComprehension" ):
                listener.exitBinaryComprehension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBinaryComprehension" ):
                return visitor.visitBinaryComprehension(self)
            else:
                return visitor.visitChildren(self)




    def binaryComprehension(self):

        localctx = ErlangParser.BinaryComprehensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_binaryComprehension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 875
            self.match(ErlangParser.T__21)
            self.state = 876
            self.exprMax()
            self.state = 877
            self.match(ErlangParser.T__32)
            self.state = 878
            self.lcExprs()
            self.state = 879
            self.match(ErlangParser.T__22)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LcExprsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lcExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.LcExprContext)
            else:
                return self.getTypedRuleContext(ErlangParser.LcExprContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_lcExprs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLcExprs" ):
                listener.enterLcExprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLcExprs" ):
                listener.exitLcExprs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLcExprs" ):
                return visitor.visitLcExprs(self)
            else:
                return visitor.visitChildren(self)




    def lcExprs(self):

        localctx = ErlangParser.LcExprsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_lcExprs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.lcExpr()
            self.state = 886
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 882
                self.match(ErlangParser.T__5)
                self.state = 883
                self.lcExpr()
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LcExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.ExprContext)
            else:
                return self.getTypedRuleContext(ErlangParser.ExprContext,i)


        def binary(self):
            return self.getTypedRuleContext(ErlangParser.BinaryContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_lcExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLcExpr" ):
                listener.enterLcExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLcExpr" ):
                listener.exitLcExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLcExpr" ):
                return visitor.visitLcExpr(self)
            else:
                return visitor.visitChildren(self)




    def lcExpr(self):

        localctx = ErlangParser.LcExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_lcExpr)
        try:
            self.state = 898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 889
                self.expr()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 890
                self.expr()
                self.state = 891
                self.match(ErlangParser.T__33)
                self.state = 892
                self.expr()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 894
                self.binary()
                self.state = 895
                self.match(ErlangParser.T__34)
                self.state = 896
                self.expr()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tuple_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprs(self):
            return self.getTypedRuleContext(ErlangParser.ExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_tuple_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple_" ):
                listener.enterTuple_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple_" ):
                listener.exitTuple_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple_" ):
                return visitor.visitTuple_(self)
            else:
                return visitor.visitChildren(self)




    def tuple_(self):

        localctx = ErlangParser.Tuple_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_tuple_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(ErlangParser.T__7)
            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 33742374977804) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 63) != 0):
                self.state = 901
                self.exprs()


            self.state = 904
            self.match(ErlangParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapTuple(self):
            return self.getTypedRuleContext(ErlangParser.MapTupleContext,0)


        def exprMax(self):
            return self.getTypedRuleContext(ErlangParser.ExprMaxContext,0)


        def mapExpr(self):
            return self.getTypedRuleContext(ErlangParser.MapExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapExpr" ):
                listener.enterMapExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapExpr" ):
                listener.exitMapExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapExpr" ):
                return visitor.visitMapExpr(self)
            else:
                return visitor.visitChildren(self)



    def mapExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ErlangParser.MapExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 166
        self.enterRecursionRule(localctx, 166, self.RULE_mapExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2956015714568) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 63) != 0):
                self.state = 907
                self.exprMax()


            self.state = 910
            self.match(ErlangParser.T__16)
            self.state = 911
            self.mapTuple()
            self._ctx.stop = self._input.LT(-1)
            self.state = 918
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ErlangParser.MapExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_mapExpr)
                    self.state = 913
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 914
                    self.match(ErlangParser.T__16)
                    self.state = 915
                    self.mapTuple() 
                self.state = 920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MapTupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.MapFieldContext)
            else:
                return self.getTypedRuleContext(ErlangParser.MapFieldContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapTuple" ):
                listener.enterMapTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapTuple" ):
                listener.exitMapTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapTuple" ):
                return visitor.visitMapTuple(self)
            else:
                return visitor.visitChildren(self)




    def mapTuple(self):

        localctx = ErlangParser.MapTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_mapTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 921
            self.match(ErlangParser.T__7)
            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 33742374977804) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 63) != 0):
                self.state = 922
                self.mapField()
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==6:
                    self.state = 923
                    self.match(ErlangParser.T__5)
                    self.state = 924
                    self.mapField()
                    self.state = 929
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 932
            self.match(ErlangParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapFieldAssoc(self):
            return self.getTypedRuleContext(ErlangParser.MapFieldAssocContext,0)


        def mapFieldExact(self):
            return self.getTypedRuleContext(ErlangParser.MapFieldExactContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapField" ):
                listener.enterMapField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapField" ):
                listener.exitMapField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapField" ):
                return visitor.visitMapField(self)
            else:
                return visitor.visitChildren(self)




    def mapField(self):

        localctx = ErlangParser.MapFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_mapField)
        try:
            self.state = 936
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 934
                self.mapFieldAssoc()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 935
                self.mapFieldExact()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapFieldAssocContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapKey(self):
            return self.getTypedRuleContext(ErlangParser.MapKeyContext,0)


        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapFieldAssoc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapFieldAssoc" ):
                listener.enterMapFieldAssoc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapFieldAssoc" ):
                listener.exitMapFieldAssoc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapFieldAssoc" ):
                return visitor.visitMapFieldAssoc(self)
            else:
                return visitor.visitChildren(self)




    def mapFieldAssoc(self):

        localctx = ErlangParser.MapFieldAssocContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_mapFieldAssoc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.mapKey()
            self.state = 939
            self.match(ErlangParser.T__19)
            self.state = 940
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapFieldExactContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapKey(self):
            return self.getTypedRuleContext(ErlangParser.MapKeyContext,0)


        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapFieldExact

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapFieldExact" ):
                listener.enterMapFieldExact(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapFieldExact" ):
                listener.exitMapFieldExact(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapFieldExact" ):
                return visitor.visitMapFieldExact(self)
            else:
                return visitor.visitChildren(self)




    def mapFieldExact(self):

        localctx = ErlangParser.MapFieldExactContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_mapFieldExact)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 942
            self.mapKey()
            self.state = 943
            self.match(ErlangParser.T__20)
            self.state = 944
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapKeyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_mapKey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapKey" ):
                listener.enterMapKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapKey" ):
                listener.exitMapKey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapKey" ):
                return visitor.visitMapKey(self)
            else:
                return visitor.visitChildren(self)




    def mapKey(self):

        localctx = ErlangParser.MapKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_mapKey)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TokAtomContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TokAtomContext,i)


        def recordTuple(self):
            return self.getTypedRuleContext(ErlangParser.RecordTupleContext,0)


        def exprMax(self):
            return self.getTypedRuleContext(ErlangParser.ExprMaxContext,0)


        def recordExpr(self):
            return self.getTypedRuleContext(ErlangParser.RecordExprContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_recordExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordExpr" ):
                listener.enterRecordExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordExpr" ):
                listener.exitRecordExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordExpr" ):
                return visitor.visitRecordExpr(self)
            else:
                return visitor.visitChildren(self)



    def recordExpr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = ErlangParser.RecordExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 178
        self.enterRecursionRule(localctx, 178, self.RULE_recordExpr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2956015714568) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 63) != 0):
                self.state = 949
                self.exprMax()


            self.state = 952
            self.match(ErlangParser.T__16)
            self.state = 953
            self.tokAtom()
            self.state = 957
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.state = 954
                self.match(ErlangParser.T__0)
                self.state = 955
                self.tokAtom()
                pass
            elif token in [8]:
                self.state = 956
                self.recordTuple()
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 969
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = ErlangParser.RecordExprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_recordExpr)
                    self.state = 959
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 960
                    self.match(ErlangParser.T__16)
                    self.state = 961
                    self.tokAtom()
                    self.state = 965
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [1]:
                        self.state = 962
                        self.match(ErlangParser.T__0)
                        self.state = 963
                        self.tokAtom()
                        pass
                    elif token in [8]:
                        self.state = 964
                        self.recordTuple()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 971
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RecordTupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordFields(self):
            return self.getTypedRuleContext(ErlangParser.RecordFieldsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_recordTuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordTuple" ):
                listener.enterRecordTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordTuple" ):
                listener.exitRecordTuple(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordTuple" ):
                return visitor.visitRecordTuple(self)
            else:
                return visitor.visitChildren(self)




    def recordTuple(self):

        localctx = ErlangParser.RecordTupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_recordTuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.match(ErlangParser.T__7)
            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==65 or _la==66:
                self.state = 973
                self.recordFields()


            self.state = 976
            self.match(ErlangParser.T__8)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordFieldsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def recordField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.RecordFieldContext)
            else:
                return self.getTypedRuleContext(ErlangParser.RecordFieldContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_recordFields

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordFields" ):
                listener.enterRecordFields(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordFields" ):
                listener.exitRecordFields(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordFields" ):
                return visitor.visitRecordFields(self)
            else:
                return visitor.visitChildren(self)




    def recordFields(self):

        localctx = ErlangParser.RecordFieldsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_recordFields)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.recordField()
            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 979
                self.match(ErlangParser.T__5)
                self.state = 980
                self.recordField()
                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_recordField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordField" ):
                listener.enterRecordField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordField" ):
                listener.exitRecordField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordField" ):
                return visitor.visitRecordField(self)
            else:
                return visitor.visitChildren(self)




    def recordField(self):

        localctx = ErlangParser.RecordFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_recordField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66]:
                self.state = 986
                self.tokVar()
                pass
            elif token in [65]:
                self.state = 987
                self.tokAtom()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 990
            self.match(ErlangParser.T__25)
            self.state = 991
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr800(self):
            return self.getTypedRuleContext(ErlangParser.Expr800Context,0)


        def argumentList(self):
            return self.getTypedRuleContext(ErlangParser.ArgumentListContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_functionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCall" ):
                listener.enterFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCall" ):
                listener.exitFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCall" ):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = ErlangParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_functionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.expr800()
            self.state = 994
            self.argumentList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifClauses(self):
            return self.getTypedRuleContext(ErlangParser.IfClausesContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_ifExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpr" ):
                listener.enterIfExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpr" ):
                listener.exitIfExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExpr" ):
                return visitor.visitIfExpr(self)
            else:
                return visitor.visitChildren(self)




    def ifExpr(self):

        localctx = ErlangParser.IfExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_ifExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 996
            self.match(ErlangParser.T__35)
            self.state = 997
            self.ifClauses()
            self.state = 998
            self.match(ErlangParser.T__30)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.IfClauseContext)
            else:
                return self.getTypedRuleContext(ErlangParser.IfClauseContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_ifClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfClauses" ):
                listener.enterIfClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfClauses" ):
                listener.exitIfClauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfClauses" ):
                return visitor.visitIfClauses(self)
            else:
                return visitor.visitChildren(self)




    def ifClauses(self):

        localctx = ErlangParser.IfClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_ifClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.ifClause()
            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==10:
                self.state = 1001
                self.match(ErlangParser.T__9)
                self.state = 1002
                self.ifClause()
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def guard_(self):
            return self.getTypedRuleContext(ErlangParser.Guard_Context,0)


        def clauseBody(self):
            return self.getTypedRuleContext(ErlangParser.ClauseBodyContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_ifClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfClause" ):
                listener.enterIfClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfClause" ):
                listener.exitIfClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfClause" ):
                return visitor.visitIfClause(self)
            else:
                return visitor.visitChildren(self)




    def ifClause(self):

        localctx = ErlangParser.IfClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_ifClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1008
            self.guard_()
            self.state = 1009
            self.clauseBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def crClauses(self):
            return self.getTypedRuleContext(ErlangParser.CrClausesContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_caseExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpr" ):
                listener.enterCaseExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpr" ):
                listener.exitCaseExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCaseExpr" ):
                return visitor.visitCaseExpr(self)
            else:
                return visitor.visitChildren(self)




    def caseExpr(self):

        localctx = ErlangParser.CaseExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_caseExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1011
            self.match(ErlangParser.T__36)
            self.state = 1012
            self.expr()
            self.state = 1013
            self.match(ErlangParser.T__37)
            self.state = 1014
            self.crClauses()
            self.state = 1015
            self.match(ErlangParser.T__30)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def crClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.CrClauseContext)
            else:
                return self.getTypedRuleContext(ErlangParser.CrClauseContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_crClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCrClauses" ):
                listener.enterCrClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCrClauses" ):
                listener.exitCrClauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCrClauses" ):
                return visitor.visitCrClauses(self)
            else:
                return visitor.visitChildren(self)




    def crClauses(self):

        localctx = ErlangParser.CrClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_crClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1017
            self.crClause()
            self.state = 1022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==10:
                self.state = 1018
                self.match(ErlangParser.T__9)
                self.state = 1019
                self.crClause()
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CrClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def clauseGuard(self):
            return self.getTypedRuleContext(ErlangParser.ClauseGuardContext,0)


        def clauseBody(self):
            return self.getTypedRuleContext(ErlangParser.ClauseBodyContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_crClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCrClause" ):
                listener.enterCrClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCrClause" ):
                listener.exitCrClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCrClause" ):
                return visitor.visitCrClause(self)
            else:
                return visitor.visitChildren(self)




    def crClause(self):

        localctx = ErlangParser.CrClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_crClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.expr()
            self.state = 1026
            self.clauseGuard()
            self.state = 1027
            self.clauseBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReceiveExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def crClauses(self):
            return self.getTypedRuleContext(ErlangParser.CrClausesContext,0)


        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def clauseBody(self):
            return self.getTypedRuleContext(ErlangParser.ClauseBodyContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_receiveExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReceiveExpr" ):
                listener.enterReceiveExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReceiveExpr" ):
                listener.exitReceiveExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReceiveExpr" ):
                return visitor.visitReceiveExpr(self)
            else:
                return visitor.visitChildren(self)




    def receiveExpr(self):

        localctx = ErlangParser.ReceiveExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_receiveExpr)
        try:
            self.state = 1046
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1029
                self.match(ErlangParser.T__38)
                self.state = 1030
                self.crClauses()
                self.state = 1031
                self.match(ErlangParser.T__30)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1033
                self.match(ErlangParser.T__38)
                self.state = 1034
                self.match(ErlangParser.T__39)
                self.state = 1035
                self.expr()
                self.state = 1036
                self.clauseBody()
                self.state = 1037
                self.match(ErlangParser.T__30)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1039
                self.match(ErlangParser.T__38)
                self.state = 1040
                self.crClauses()
                self.state = 1041
                self.match(ErlangParser.T__39)
                self.state = 1042
                self.expr()
                self.state = 1043
                self.clauseBody()
                self.state = 1044
                self.match(ErlangParser.T__30)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def tokInteger(self):
            return self.getTypedRuleContext(ErlangParser.TokIntegerContext,0)


        def atomOrVar(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.AtomOrVarContext)
            else:
                return self.getTypedRuleContext(ErlangParser.AtomOrVarContext,i)


        def integerOrVar(self):
            return self.getTypedRuleContext(ErlangParser.IntegerOrVarContext,0)


        def funClauses(self):
            return self.getTypedRuleContext(ErlangParser.FunClausesContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_funExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunExpr" ):
                listener.enterFunExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunExpr" ):
                listener.exitFunExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunExpr" ):
                return visitor.visitFunExpr(self)
            else:
                return visitor.visitChildren(self)




    def funExpr(self):

        localctx = ErlangParser.FunExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_funExpr)
        try:
            self.state = 1064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.match(ErlangParser.T__17)
                self.state = 1049
                self.tokAtom()
                self.state = 1050
                self.match(ErlangParser.T__31)
                self.state = 1051
                self.tokInteger()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1053
                self.match(ErlangParser.T__17)
                self.state = 1054
                self.atomOrVar()
                self.state = 1055
                self.match(ErlangParser.T__4)
                self.state = 1056
                self.atomOrVar()
                self.state = 1057
                self.match(ErlangParser.T__31)
                self.state = 1058
                self.integerOrVar()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1060
                self.match(ErlangParser.T__17)
                self.state = 1061
                self.funClauses()
                self.state = 1062
                self.match(ErlangParser.T__30)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomOrVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_atomOrVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomOrVar" ):
                listener.enterAtomOrVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomOrVar" ):
                listener.exitAtomOrVar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomOrVar" ):
                return visitor.visitAtomOrVar(self)
            else:
                return visitor.visitChildren(self)




    def atomOrVar(self):

        localctx = ErlangParser.AtomOrVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_atomOrVar)
        try:
            self.state = 1068
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1066
                self.tokAtom()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1067
                self.tokVar()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerOrVarContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokInteger(self):
            return self.getTypedRuleContext(ErlangParser.TokIntegerContext,0)


        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_integerOrVar

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntegerOrVar" ):
                listener.enterIntegerOrVar(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntegerOrVar" ):
                listener.exitIntegerOrVar(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntegerOrVar" ):
                return visitor.visitIntegerOrVar(self)
            else:
                return visitor.visitChildren(self)




    def integerOrVar(self):

        localctx = ErlangParser.IntegerOrVarContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_integerOrVar)
        try:
            self.state = 1072
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [68]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1070
                self.tokInteger()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1071
                self.tokVar()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def funClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.FunClauseContext)
            else:
                return self.getTypedRuleContext(ErlangParser.FunClauseContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_funClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunClauses" ):
                listener.enterFunClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunClauses" ):
                listener.exitFunClauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunClauses" ):
                return visitor.visitFunClauses(self)
            else:
                return visitor.visitChildren(self)




    def funClauses(self):

        localctx = ErlangParser.FunClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_funClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.funClause()
            self.state = 1079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==10:
                self.state = 1075
                self.match(ErlangParser.T__9)
                self.state = 1076
                self.funClause()
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patArgumentList(self):
            return self.getTypedRuleContext(ErlangParser.PatArgumentListContext,0)


        def clauseGuard(self):
            return self.getTypedRuleContext(ErlangParser.ClauseGuardContext,0)


        def clauseBody(self):
            return self.getTypedRuleContext(ErlangParser.ClauseBodyContext,0)


        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_funClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunClause" ):
                listener.enterFunClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunClause" ):
                listener.exitFunClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunClause" ):
                return visitor.visitFunClause(self)
            else:
                return visitor.visitChildren(self)




    def funClause(self):

        localctx = ErlangParser.FunClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_funClause)
        try:
            self.state = 1091
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1082
                self.patArgumentList()
                self.state = 1083
                self.clauseGuard()
                self.state = 1084
                self.clauseBody()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1086
                self.tokVar()
                self.state = 1087
                self.patArgumentList()
                self.state = 1088
                self.clauseGuard()
                self.state = 1089
                self.clauseBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprs(self):
            return self.getTypedRuleContext(ErlangParser.ExprsContext,0)


        def tryCatch(self):
            return self.getTypedRuleContext(ErlangParser.TryCatchContext,0)


        def crClauses(self):
            return self.getTypedRuleContext(ErlangParser.CrClausesContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_tryExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExpr" ):
                listener.enterTryExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExpr" ):
                listener.exitTryExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryExpr" ):
                return visitor.visitTryExpr(self)
            else:
                return visitor.visitChildren(self)




    def tryExpr(self):

        localctx = ErlangParser.TryExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_tryExpr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1093
            self.match(ErlangParser.T__40)
            self.state = 1094
            self.exprs()
            self.state = 1097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==38:
                self.state = 1095
                self.match(ErlangParser.T__37)
                self.state = 1096
                self.crClauses()


            self.state = 1099
            self.tryCatch()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryCatchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tryClauses(self):
            return self.getTypedRuleContext(ErlangParser.TryClausesContext,0)


        def exprs(self):
            return self.getTypedRuleContext(ErlangParser.ExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_tryCatch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryCatch" ):
                listener.enterTryCatch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryCatch" ):
                listener.exitTryCatch(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryCatch" ):
                return visitor.visitTryCatch(self)
            else:
                return visitor.visitChildren(self)




    def tryCatch(self):

        localctx = ErlangParser.TryCatchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_tryCatch)
        try:
            self.state = 1115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1101
                self.match(ErlangParser.T__24)
                self.state = 1102
                self.tryClauses()
                self.state = 1103
                self.match(ErlangParser.T__30)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1105
                self.match(ErlangParser.T__24)
                self.state = 1106
                self.tryClauses()
                self.state = 1107
                self.match(ErlangParser.T__39)
                self.state = 1108
                self.exprs()
                self.state = 1109
                self.match(ErlangParser.T__30)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1111
                self.match(ErlangParser.T__39)
                self.state = 1112
                self.exprs()
                self.state = 1113
                self.match(ErlangParser.T__30)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tryClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TryClauseContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TryClauseContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_tryClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryClauses" ):
                listener.enterTryClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryClauses" ):
                listener.exitTryClauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryClauses" ):
                return visitor.visitTryClauses(self)
            else:
                return visitor.visitChildren(self)




    def tryClauses(self):

        localctx = ErlangParser.TryClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_tryClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1117
            self.tryClause()
            self.state = 1122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==10:
                self.state = 1118
                self.match(ErlangParser.T__9)
                self.state = 1119
                self.tryClause()
                self.state = 1124
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(ErlangParser.ExprContext,0)


        def clauseGuard(self):
            return self.getTypedRuleContext(ErlangParser.ClauseGuardContext,0)


        def clauseBody(self):
            return self.getTypedRuleContext(ErlangParser.ClauseBodyContext,0)


        def patExpr(self):
            return self.getTypedRuleContext(ErlangParser.PatExprContext,0)


        def tryOptStackTrace(self):
            return self.getTypedRuleContext(ErlangParser.TryOptStackTraceContext,0)


        def atomOrVar(self):
            return self.getTypedRuleContext(ErlangParser.AtomOrVarContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_tryClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryClause" ):
                listener.enterTryClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryClause" ):
                listener.exitTryClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryClause" ):
                return visitor.visitTryClause(self)
            else:
                return visitor.visitChildren(self)




    def tryClause(self):

        localctx = ErlangParser.TryClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_tryClause)
        try:
            self.state = 1139
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1125
                self.expr()
                self.state = 1126
                self.clauseGuard()
                self.state = 1127
                self.clauseBody()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1132
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 1129
                    self.atomOrVar()
                    self.state = 1130
                    self.match(ErlangParser.T__4)


                self.state = 1134
                self.patExpr()
                self.state = 1135
                self.tryOptStackTrace()
                self.state = 1136
                self.clauseGuard()
                self.state = 1137
                self.clauseBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryOptStackTraceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokVar(self):
            return self.getTypedRuleContext(ErlangParser.TokVarContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_tryOptStackTrace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryOptStackTrace" ):
                listener.enterTryOptStackTrace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryOptStackTrace" ):
                listener.exitTryOptStackTrace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryOptStackTrace" ):
                return visitor.visitTryOptStackTrace(self)
            else:
                return visitor.visitChildren(self)




    def tryOptStackTrace(self):

        localctx = ErlangParser.TryOptStackTraceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_tryOptStackTrace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 1141
                self.match(ErlangParser.T__4)
                self.state = 1142
                self.tokVar()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprs(self):
            return self.getTypedRuleContext(ErlangParser.ExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_argumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentList" ):
                listener.enterArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentList" ):
                listener.exitArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentList" ):
                return visitor.visitArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def argumentList(self):

        localctx = ErlangParser.ArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_argumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.match(ErlangParser.T__2)
            self.state = 1147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 33742374977804) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 63) != 0):
                self.state = 1146
                self.exprs()


            self.state = 1149
            self.match(ErlangParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatArgumentListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patExprs(self):
            return self.getTypedRuleContext(ErlangParser.PatExprsContext,0)


        def getRuleIndex(self):
            return ErlangParser.RULE_patArgumentList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatArgumentList" ):
                listener.enterPatArgumentList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatArgumentList" ):
                listener.exitPatArgumentList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatArgumentList" ):
                return visitor.visitPatArgumentList(self)
            else:
                return visitor.visitChildren(self)




    def patArgumentList(self):

        localctx = ErlangParser.PatArgumentListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_patArgumentList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(ErlangParser.T__2)
            self.state = 1153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 30786329919756) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & 63) != 0):
                self.state = 1152
                self.patExprs()


            self.state = 1155
            self.match(ErlangParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.ExprContext)
            else:
                return self.getTypedRuleContext(ErlangParser.ExprContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_exprs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprs" ):
                listener.enterExprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprs" ):
                listener.exitExprs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprs" ):
                return visitor.visitExprs(self)
            else:
                return visitor.visitChildren(self)




    def exprs(self):

        localctx = ErlangParser.ExprsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_exprs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.expr()
            self.state = 1162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 1158
                self.match(ErlangParser.T__5)
                self.state = 1159
                self.expr()
                self.state = 1164
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatExprsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def patExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.PatExprContext)
            else:
                return self.getTypedRuleContext(ErlangParser.PatExprContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_patExprs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatExprs" ):
                listener.enterPatExprs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatExprs" ):
                listener.exitPatExprs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatExprs" ):
                return visitor.visitPatExprs(self)
            else:
                return visitor.visitChildren(self)




    def patExprs(self):

        localctx = ErlangParser.PatExprsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_patExprs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self.patExpr()
            self.state = 1170
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==6:
                self.state = 1166
                self.match(ErlangParser.T__5)
                self.state = 1167
                self.patExpr()
                self.state = 1172
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Guard_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exprs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.ExprsContext)
            else:
                return self.getTypedRuleContext(ErlangParser.ExprsContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_guard_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGuard_" ):
                listener.enterGuard_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGuard_" ):
                listener.exitGuard_(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuard_" ):
                return visitor.visitGuard_(self)
            else:
                return visitor.visitChildren(self)




    def guard_(self):

        localctx = ErlangParser.Guard_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_guard_)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1173
            self.exprs()
            self.state = 1178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==10:
                self.state = 1174
                self.match(ErlangParser.T__9)
                self.state = 1175
                self.exprs()
                self.state = 1180
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tokChar(self):
            return self.getTypedRuleContext(ErlangParser.TokCharContext,0)


        def tokInteger(self):
            return self.getTypedRuleContext(ErlangParser.TokIntegerContext,0)


        def tokFloat(self):
            return self.getTypedRuleContext(ErlangParser.TokFloatContext,0)


        def tokAtom(self):
            return self.getTypedRuleContext(ErlangParser.TokAtomContext,0)


        def tokString(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ErlangParser.TokStringContext)
            else:
                return self.getTypedRuleContext(ErlangParser.TokStringContext,i)


        def getRuleIndex(self):
            return ErlangParser.RULE_atomic

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomic" ):
                listener.enterAtomic(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomic" ):
                listener.exitAtomic(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomic" ):
                return visitor.visitAtomic(self)
            else:
                return visitor.visitChildren(self)




    def atomic(self):

        localctx = ErlangParser.AtomicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_atomic)
        try:
            self.state = 1190
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [69]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1181
                self.tokChar()
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1182
                self.tokInteger()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1183
                self.tokFloat()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1184
                self.tokAtom()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1186 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1185
                        self.tokString()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1188 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ErlangParser.RULE_prefixOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixOp" ):
                listener.enterPrefixOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixOp" ):
                listener.exitPrefixOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixOp" ):
                return visitor.visitPrefixOp(self)
            else:
                return visitor.visitChildren(self)




    def prefixOp(self):

        localctx = ErlangParser.PrefixOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_prefixOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 30786325577732) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ErlangParser.RULE_multOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultOp" ):
                listener.enterMultOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultOp" ):
                listener.exitMultOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultOp" ):
                return visitor.visitMultOp(self)
            else:
                return visitor.visitChildren(self)




    def multOp(self):

        localctx = ErlangParser.MultOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_multOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1194
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 527769893076992) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AddOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ErlangParser.RULE_addOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddOp" ):
                listener.enterAddOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddOp" ):
                listener.exitAddOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddOp" ):
                return visitor.visitAddOp(self)
            else:
                return visitor.visitChildren(self)




    def addOp(self):

        localctx = ErlangParser.AddOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_addOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 35470245112053764) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ErlangParser.RULE_listOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListOp" ):
                listener.enterListOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListOp" ):
                listener.exitListOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListOp" ):
                return visitor.visitListOp(self)
            else:
                return visitor.visitChildren(self)




    def listOp(self):

        localctx = ErlangParser.ListOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_listOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1198
            _la = self._input.LA(1)
            if not(_la==55 or _la==56):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompOpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return ErlangParser.RULE_compOp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompOp" ):
                listener.enterCompOp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompOp" ):
                listener.exitCompOp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompOp" ):
                return visitor.visitCompOp(self)
            else:
                return visitor.visitChildren(self)




    def compOp(self):

        localctx = ErlangParser.CompOpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_compOp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            _la = self._input.LA(1)
            if not(((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 255) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[23] = self.type300_sempred
        self._predicates[24] = self.type400_sempred
        self._predicates[58] = self.patExpr400_sempred
        self._predicates[59] = self.patExpr500_sempred
        self._predicates[65] = self.mapPatExpr_sempred
        self._predicates[83] = self.mapExpr_sempred
        self._predicates[89] = self.recordExpr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def type300_sempred(self, localctx:Type300Context, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def type400_sempred(self, localctx:Type400Context, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def patExpr400_sempred(self, localctx:PatExpr400Context, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def patExpr500_sempred(self, localctx:PatExpr500Context, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def mapPatExpr_sempred(self, localctx:MapPatExprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 1)
         

    def mapExpr_sempred(self, localctx:MapExprContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 1)
         

    def recordExpr_sempred(self, localctx:RecordExprContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 1)
         




