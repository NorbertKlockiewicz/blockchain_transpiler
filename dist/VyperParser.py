# Generated from Vyper.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,94,1063,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,1,
        0,1,0,1,0,1,0,1,0,3,0,176,8,0,1,1,1,1,5,1,180,8,1,10,1,12,1,183,
        9,1,1,1,1,1,1,2,1,2,5,2,189,8,2,10,2,12,2,192,9,2,1,2,1,2,1,3,1,
        3,1,3,1,3,3,3,200,8,3,1,3,3,3,203,8,3,1,3,1,3,1,4,4,4,208,8,4,11,
        4,12,4,209,1,5,1,5,1,5,3,5,215,8,5,1,6,1,6,1,6,1,6,1,6,3,6,222,8,
        6,1,6,1,6,1,6,1,7,1,7,3,7,229,8,7,1,7,1,7,1,8,1,8,1,8,3,8,236,8,
        8,1,8,1,8,1,8,1,8,3,8,242,8,8,5,8,244,8,8,10,8,12,8,247,9,8,1,8,
        1,8,1,8,3,8,252,8,8,1,8,1,8,1,8,1,8,3,8,258,8,8,5,8,260,8,8,10,8,
        12,8,263,9,8,1,8,1,8,1,8,3,8,268,8,8,1,8,1,8,3,8,272,8,8,3,8,274,
        8,8,1,8,1,8,3,8,278,8,8,1,8,1,8,1,8,1,8,3,8,284,8,8,5,8,286,8,8,
        10,8,12,8,289,9,8,1,8,1,8,1,8,3,8,294,8,8,1,8,1,8,3,8,298,8,8,1,
        9,1,9,1,9,3,9,303,8,9,1,10,1,10,1,10,3,10,308,8,10,1,10,1,10,1,10,
        1,10,3,10,314,8,10,5,10,316,8,10,10,10,12,10,319,9,10,1,10,1,10,
        1,10,3,10,324,8,10,1,10,1,10,1,10,1,10,3,10,330,8,10,5,10,332,8,
        10,10,10,12,10,335,9,10,1,10,1,10,1,10,3,10,340,8,10,1,10,1,10,3,
        10,344,8,10,3,10,346,8,10,1,10,1,10,3,10,350,8,10,1,10,1,10,1,10,
        1,10,3,10,356,8,10,5,10,358,8,10,10,10,12,10,361,9,10,1,10,1,10,
        1,10,3,10,366,8,10,1,10,1,10,3,10,370,8,10,1,11,1,11,1,12,1,12,3,
        12,376,8,12,1,13,1,13,1,13,5,13,381,8,13,10,13,12,13,384,9,13,1,
        13,3,13,387,8,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
        14,1,14,3,14,400,8,14,1,15,1,15,1,15,1,15,3,15,406,8,15,1,15,1,15,
        1,15,3,15,411,8,15,5,15,413,8,15,10,15,12,15,416,9,15,3,15,418,8,
        15,1,16,1,16,3,16,422,8,16,1,16,1,16,1,16,3,16,427,8,16,5,16,429,
        8,16,10,16,12,16,432,9,16,1,16,3,16,435,8,16,1,17,1,17,1,18,1,18,
        1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,3,20,449,8,20,1,21,1,21,
        1,22,1,22,1,23,1,23,3,23,457,8,23,1,24,1,24,1,25,1,25,1,25,1,25,
        3,25,465,8,25,3,25,467,8,25,1,26,1,26,3,26,471,8,26,1,27,1,27,1,
        27,1,28,1,28,5,28,478,8,28,10,28,12,28,481,9,28,1,28,1,28,4,28,485,
        8,28,11,28,12,28,486,3,28,489,8,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,3,28,498,8,28,1,29,1,29,1,29,3,29,503,8,29,1,30,1,30,1,30,3,
        30,508,8,30,1,31,1,31,1,31,5,31,513,8,31,10,31,12,31,516,9,31,1,
        31,3,31,519,8,31,1,32,1,32,1,32,5,32,524,8,32,10,32,12,32,527,9,
        32,1,33,1,33,1,33,5,33,532,8,33,10,33,12,33,535,9,33,1,34,1,34,1,
        34,1,34,5,34,541,8,34,10,34,12,34,544,9,34,1,35,1,35,1,35,1,35,1,
        36,1,36,1,36,1,36,5,36,554,8,36,10,36,12,36,557,9,36,1,37,1,37,1,
        37,1,37,3,37,563,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,
        38,573,8,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,584,
        8,39,10,39,12,39,587,9,39,1,39,1,39,1,39,3,39,592,8,39,1,40,1,40,
        1,40,1,40,1,40,1,40,1,40,3,40,601,8,40,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,3,41,612,8,41,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,4,42,621,8,42,11,42,12,42,622,1,42,1,42,1,42,3,42,628,8,42,
        1,42,1,42,1,42,3,42,633,8,42,1,42,1,42,1,42,3,42,638,8,42,1,43,1,
        43,1,43,1,43,5,43,644,8,43,10,43,12,43,647,9,43,1,43,1,43,1,43,1,
        44,1,44,1,44,3,44,655,8,44,1,45,1,45,1,45,1,45,3,45,661,8,45,3,45,
        663,8,45,1,46,1,46,1,46,1,46,4,46,669,8,46,11,46,12,46,670,1,46,
        1,46,3,46,675,8,46,1,47,1,47,1,47,1,47,1,47,1,47,3,47,683,8,47,1,
        47,3,47,686,8,47,1,48,1,48,3,48,690,8,48,1,49,1,49,3,49,694,8,49,
        1,49,1,49,1,49,1,50,1,50,3,50,701,8,50,1,50,1,50,1,50,1,51,1,51,
        1,51,5,51,709,8,51,10,51,12,51,712,9,51,1,52,1,52,1,52,5,52,717,
        8,52,10,52,12,52,720,9,52,1,53,1,53,1,53,3,53,725,8,53,1,54,1,54,
        1,54,1,54,5,54,731,8,54,10,54,12,54,734,9,54,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,749,8,55,1,56,
        3,56,752,8,56,1,56,1,56,1,57,1,57,1,57,5,57,759,8,57,10,57,12,57,
        762,9,57,1,58,1,58,1,58,5,58,767,8,58,10,58,12,58,770,9,58,1,59,
        1,59,1,59,5,59,775,8,59,10,59,12,59,778,9,59,1,60,1,60,1,60,1,60,
        1,60,5,60,785,8,60,10,60,12,60,788,9,60,1,61,1,61,1,61,1,61,1,61,
        5,61,795,8,61,10,61,12,61,798,9,61,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,5,62,811,8,62,10,62,12,62,814,9,62,1,63,
        1,63,1,63,1,63,1,63,1,63,1,63,3,63,823,8,63,1,64,1,64,5,64,827,8,
        64,10,64,12,64,830,9,64,1,64,1,64,3,64,834,8,64,1,65,1,65,1,65,3,
        65,839,8,65,1,65,1,65,1,65,3,65,844,8,65,1,65,1,65,1,65,3,65,849,
        8,65,1,65,1,65,1,65,1,65,4,65,855,8,65,11,65,12,65,856,1,65,1,65,
        1,65,1,65,3,65,863,8,65,1,66,1,66,1,66,1,66,5,66,869,8,66,10,66,
        12,66,872,9,66,1,66,3,66,875,8,66,3,66,877,8,66,1,67,1,67,3,67,881,
        8,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,890,8,67,1,68,1,68,
        1,68,5,68,895,8,68,10,68,12,68,898,9,68,1,68,3,68,901,8,68,1,69,
        1,69,3,69,905,8,69,1,69,1,69,3,69,909,8,69,1,69,3,69,912,8,69,3,
        69,914,8,69,1,70,1,70,3,70,918,8,70,1,71,1,71,1,71,5,71,923,8,71,
        10,71,12,71,926,9,71,1,71,3,71,929,8,71,1,72,1,72,1,72,5,72,934,
        8,72,10,72,12,72,937,9,72,1,72,3,72,940,8,72,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,5,73,951,8,73,10,73,12,73,954,9,73,1,73,
        3,73,957,8,73,3,73,959,8,73,1,73,1,73,1,73,1,73,5,73,965,8,73,10,
        73,12,73,968,9,73,1,73,3,73,971,8,73,3,73,973,8,73,3,73,975,8,73,
        1,74,1,74,1,74,1,74,3,74,981,8,74,1,74,3,74,984,8,74,1,74,1,74,1,
        74,1,75,1,75,1,75,5,75,992,8,75,10,75,12,75,995,9,75,1,75,1,75,3,
        75,999,8,75,1,75,1,75,1,75,1,75,5,75,1005,8,75,10,75,12,75,1008,
        9,75,1,75,1,75,1,75,3,75,1013,8,75,1,75,1,75,3,75,1017,8,75,1,76,
        1,76,3,76,1021,8,76,1,76,1,76,1,76,1,76,3,76,1027,8,76,1,77,1,77,
        3,77,1031,8,77,1,78,1,78,1,78,1,78,1,78,3,78,1038,8,78,1,79,1,79,
        1,79,3,79,1043,8,79,1,80,1,80,3,80,1047,8,80,1,81,1,81,1,81,3,81,
        1052,8,81,1,82,1,82,1,83,1,83,1,83,3,83,1059,8,83,1,84,1,84,1,84,
        0,0,85,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,0,4,1,0,78,90,1,0,44,45,1,0,36,37,
        1,0,38,41,1175,0,175,1,0,0,0,2,181,1,0,0,0,4,186,1,0,0,0,6,195,1,
        0,0,0,8,207,1,0,0,0,10,211,1,0,0,0,12,216,1,0,0,0,14,226,1,0,0,0,
        16,297,1,0,0,0,18,299,1,0,0,0,20,369,1,0,0,0,22,371,1,0,0,0,24,375,
        1,0,0,0,26,377,1,0,0,0,28,399,1,0,0,0,30,401,1,0,0,0,32,421,1,0,
        0,0,34,436,1,0,0,0,36,438,1,0,0,0,38,441,1,0,0,0,40,448,1,0,0,0,
        42,450,1,0,0,0,44,452,1,0,0,0,46,454,1,0,0,0,48,458,1,0,0,0,50,460,
        1,0,0,0,52,470,1,0,0,0,54,472,1,0,0,0,56,475,1,0,0,0,58,499,1,0,
        0,0,60,504,1,0,0,0,62,509,1,0,0,0,64,520,1,0,0,0,66,528,1,0,0,0,
        68,536,1,0,0,0,70,545,1,0,0,0,72,549,1,0,0,0,74,558,1,0,0,0,76,572,
        1,0,0,0,78,574,1,0,0,0,80,593,1,0,0,0,82,602,1,0,0,0,84,613,1,0,
        0,0,86,639,1,0,0,0,88,651,1,0,0,0,90,656,1,0,0,0,92,674,1,0,0,0,
        94,685,1,0,0,0,96,689,1,0,0,0,98,691,1,0,0,0,100,698,1,0,0,0,102,
        705,1,0,0,0,104,713,1,0,0,0,106,724,1,0,0,0,108,726,1,0,0,0,110,
        748,1,0,0,0,112,751,1,0,0,0,114,755,1,0,0,0,116,763,1,0,0,0,118,
        771,1,0,0,0,120,779,1,0,0,0,122,789,1,0,0,0,124,799,1,0,0,0,126,
        822,1,0,0,0,128,824,1,0,0,0,130,862,1,0,0,0,132,864,1,0,0,0,134,
        889,1,0,0,0,136,891,1,0,0,0,138,913,1,0,0,0,140,915,1,0,0,0,142,
        919,1,0,0,0,144,930,1,0,0,0,146,974,1,0,0,0,148,976,1,0,0,0,150,
        993,1,0,0,0,152,1026,1,0,0,0,154,1030,1,0,0,0,156,1032,1,0,0,0,158,
        1039,1,0,0,0,160,1044,1,0,0,0,162,1051,1,0,0,0,164,1053,1,0,0,0,
        166,1058,1,0,0,0,168,1060,1,0,0,0,170,176,5,34,0,0,171,176,3,26,
        13,0,172,173,3,76,38,0,173,174,5,34,0,0,174,176,1,0,0,0,175,170,
        1,0,0,0,175,171,1,0,0,0,175,172,1,0,0,0,176,1,1,0,0,0,177,180,5,
        34,0,0,178,180,3,24,12,0,179,177,1,0,0,0,179,178,1,0,0,0,180,183,
        1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,184,1,0,0,0,183,181,
        1,0,0,0,184,185,5,0,0,1,185,3,1,0,0,0,186,190,3,144,72,0,187,189,
        5,34,0,0,188,187,1,0,0,0,189,192,1,0,0,0,190,188,1,0,0,0,190,191,
        1,0,0,0,191,193,1,0,0,0,192,190,1,0,0,0,193,194,5,0,0,1,194,5,1,
        0,0,0,195,196,5,76,0,0,196,202,3,66,33,0,197,199,5,47,0,0,198,200,
        3,150,75,0,199,198,1,0,0,0,199,200,1,0,0,0,200,201,1,0,0,0,201,203,
        5,48,0,0,202,197,1,0,0,0,202,203,1,0,0,0,203,204,1,0,0,0,204,205,
        5,34,0,0,205,7,1,0,0,0,206,208,3,6,3,0,207,206,1,0,0,0,208,209,1,
        0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,9,1,0,0,0,211,214,3,8,
        4,0,212,215,3,148,74,0,213,215,3,12,6,0,214,212,1,0,0,0,214,213,
        1,0,0,0,215,11,1,0,0,0,216,217,5,1,0,0,217,218,5,35,0,0,218,221,
        3,14,7,0,219,220,5,77,0,0,220,222,3,94,47,0,221,219,1,0,0,0,221,
        222,1,0,0,0,222,223,1,0,0,0,223,224,5,50,0,0,224,225,3,92,46,0,225,
        13,1,0,0,0,226,228,5,47,0,0,227,229,3,16,8,0,228,227,1,0,0,0,228,
        229,1,0,0,0,229,230,1,0,0,0,230,231,5,48,0,0,231,15,1,0,0,0,232,
        235,3,18,9,0,233,234,5,53,0,0,234,236,3,94,47,0,235,233,1,0,0,0,
        235,236,1,0,0,0,236,245,1,0,0,0,237,238,5,49,0,0,238,241,3,18,9,
        0,239,240,5,53,0,0,240,242,3,94,47,0,241,239,1,0,0,0,241,242,1,0,
        0,0,242,244,1,0,0,0,243,237,1,0,0,0,244,247,1,0,0,0,245,243,1,0,
        0,0,245,246,1,0,0,0,246,273,1,0,0,0,247,245,1,0,0,0,248,271,5,49,
        0,0,249,251,5,46,0,0,250,252,3,18,9,0,251,250,1,0,0,0,251,252,1,
        0,0,0,252,261,1,0,0,0,253,254,5,49,0,0,254,257,3,18,9,0,255,256,
        5,53,0,0,256,258,3,94,47,0,257,255,1,0,0,0,257,258,1,0,0,0,258,260,
        1,0,0,0,259,253,1,0,0,0,260,263,1,0,0,0,261,259,1,0,0,0,261,262,
        1,0,0,0,262,267,1,0,0,0,263,261,1,0,0,0,264,265,5,49,0,0,265,266,
        5,52,0,0,266,268,3,18,9,0,267,264,1,0,0,0,267,268,1,0,0,0,268,272,
        1,0,0,0,269,270,5,52,0,0,270,272,3,18,9,0,271,249,1,0,0,0,271,269,
        1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,248,1,0,0,0,273,274,
        1,0,0,0,274,298,1,0,0,0,275,277,5,46,0,0,276,278,3,18,9,0,277,276,
        1,0,0,0,277,278,1,0,0,0,278,287,1,0,0,0,279,280,5,49,0,0,280,283,
        3,18,9,0,281,282,5,53,0,0,282,284,3,94,47,0,283,281,1,0,0,0,283,
        284,1,0,0,0,284,286,1,0,0,0,285,279,1,0,0,0,286,289,1,0,0,0,287,
        285,1,0,0,0,287,288,1,0,0,0,288,293,1,0,0,0,289,287,1,0,0,0,290,
        291,5,49,0,0,291,292,5,52,0,0,292,294,3,18,9,0,293,290,1,0,0,0,293,
        294,1,0,0,0,294,298,1,0,0,0,295,296,5,52,0,0,296,298,3,18,9,0,297,
        232,1,0,0,0,297,275,1,0,0,0,297,295,1,0,0,0,298,17,1,0,0,0,299,302,
        5,35,0,0,300,301,5,50,0,0,301,303,3,94,47,0,302,300,1,0,0,0,302,
        303,1,0,0,0,303,19,1,0,0,0,304,307,3,22,11,0,305,306,5,53,0,0,306,
        308,3,94,47,0,307,305,1,0,0,0,307,308,1,0,0,0,308,317,1,0,0,0,309,
        310,5,49,0,0,310,313,3,22,11,0,311,312,5,53,0,0,312,314,3,94,47,
        0,313,311,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,309,1,0,0,
        0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,345,1,0,0,
        0,319,317,1,0,0,0,320,343,5,49,0,0,321,323,5,46,0,0,322,324,3,22,
        11,0,323,322,1,0,0,0,323,324,1,0,0,0,324,333,1,0,0,0,325,326,5,49,
        0,0,326,329,3,22,11,0,327,328,5,53,0,0,328,330,3,94,47,0,329,327,
        1,0,0,0,329,330,1,0,0,0,330,332,1,0,0,0,331,325,1,0,0,0,332,335,
        1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,339,1,0,0,0,335,333,
        1,0,0,0,336,337,5,49,0,0,337,338,5,52,0,0,338,340,3,22,11,0,339,
        336,1,0,0,0,339,340,1,0,0,0,340,344,1,0,0,0,341,342,5,52,0,0,342,
        344,3,22,11,0,343,321,1,0,0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,
        346,1,0,0,0,345,320,1,0,0,0,345,346,1,0,0,0,346,370,1,0,0,0,347,
        349,5,46,0,0,348,350,3,22,11,0,349,348,1,0,0,0,349,350,1,0,0,0,350,
        359,1,0,0,0,351,352,5,49,0,0,352,355,3,22,11,0,353,354,5,53,0,0,
        354,356,3,94,47,0,355,353,1,0,0,0,355,356,1,0,0,0,356,358,1,0,0,
        0,357,351,1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,359,360,1,0,0,
        0,360,365,1,0,0,0,361,359,1,0,0,0,362,363,5,49,0,0,363,364,5,52,
        0,0,364,366,3,22,11,0,365,362,1,0,0,0,365,366,1,0,0,0,366,370,1,
        0,0,0,367,368,5,52,0,0,368,370,3,22,11,0,369,304,1,0,0,0,369,347,
        1,0,0,0,369,367,1,0,0,0,370,21,1,0,0,0,371,372,5,35,0,0,372,23,1,
        0,0,0,373,376,3,26,13,0,374,376,3,76,38,0,375,373,1,0,0,0,375,374,
        1,0,0,0,376,25,1,0,0,0,377,382,3,28,14,0,378,379,5,51,0,0,379,381,
        3,28,14,0,380,378,1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,383,
        1,0,0,0,383,386,1,0,0,0,384,382,1,0,0,0,385,387,5,51,0,0,386,385,
        1,0,0,0,386,387,1,0,0,0,387,388,1,0,0,0,388,389,5,34,0,0,389,27,
        1,0,0,0,390,400,3,30,15,0,391,400,3,36,18,0,392,400,3,38,19,0,393,
        400,3,40,20,0,394,400,3,52,26,0,395,400,3,68,34,0,396,400,3,70,35,
        0,397,400,3,72,36,0,398,400,3,74,37,0,399,390,1,0,0,0,399,391,1,
        0,0,0,399,392,1,0,0,0,399,393,1,0,0,0,399,394,1,0,0,0,399,395,1,
        0,0,0,399,396,1,0,0,0,399,397,1,0,0,0,399,398,1,0,0,0,400,29,1,0,
        0,0,401,417,3,32,16,0,402,405,3,34,17,0,403,406,3,160,80,0,404,406,
        3,144,72,0,405,403,1,0,0,0,405,404,1,0,0,0,406,418,1,0,0,0,407,410,
        5,53,0,0,408,411,3,160,80,0,409,411,3,32,16,0,410,408,1,0,0,0,410,
        409,1,0,0,0,411,413,1,0,0,0,412,407,1,0,0,0,413,416,1,0,0,0,414,
        412,1,0,0,0,414,415,1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,417,
        402,1,0,0,0,417,414,1,0,0,0,418,31,1,0,0,0,419,422,3,94,47,0,420,
        422,3,112,56,0,421,419,1,0,0,0,421,420,1,0,0,0,422,430,1,0,0,0,423,
        426,5,49,0,0,424,427,3,94,47,0,425,427,3,112,56,0,426,424,1,0,0,
        0,426,425,1,0,0,0,427,429,1,0,0,0,428,423,1,0,0,0,429,432,1,0,0,
        0,430,428,1,0,0,0,430,431,1,0,0,0,431,434,1,0,0,0,432,430,1,0,0,
        0,433,435,5,49,0,0,434,433,1,0,0,0,434,435,1,0,0,0,435,33,1,0,0,
        0,436,437,7,0,0,0,437,35,1,0,0,0,438,439,5,30,0,0,439,440,3,142,
        71,0,440,37,1,0,0,0,441,442,5,31,0,0,442,39,1,0,0,0,443,449,3,42,
        21,0,444,449,3,44,22,0,445,449,3,46,23,0,446,449,3,50,25,0,447,449,
        3,48,24,0,448,443,1,0,0,0,448,444,1,0,0,0,448,445,1,0,0,0,448,446,
        1,0,0,0,448,447,1,0,0,0,449,41,1,0,0,0,450,451,5,33,0,0,451,43,1,
        0,0,0,452,453,5,32,0,0,453,45,1,0,0,0,454,456,5,2,0,0,455,457,3,
        144,72,0,456,455,1,0,0,0,456,457,1,0,0,0,457,47,1,0,0,0,458,459,
        3,160,80,0,459,49,1,0,0,0,460,466,5,3,0,0,461,464,3,94,47,0,462,
        463,5,4,0,0,463,465,3,94,47,0,464,462,1,0,0,0,464,465,1,0,0,0,465,
        467,1,0,0,0,466,461,1,0,0,0,466,467,1,0,0,0,467,51,1,0,0,0,468,471,
        3,54,27,0,469,471,3,56,28,0,470,468,1,0,0,0,470,469,1,0,0,0,471,
        53,1,0,0,0,472,473,5,5,0,0,473,474,3,64,32,0,474,55,1,0,0,0,475,
        488,5,4,0,0,476,478,7,1,0,0,477,476,1,0,0,0,478,481,1,0,0,0,479,
        477,1,0,0,0,479,480,1,0,0,0,480,482,1,0,0,0,481,479,1,0,0,0,482,
        489,3,66,33,0,483,485,7,1,0,0,484,483,1,0,0,0,485,486,1,0,0,0,486,
        484,1,0,0,0,486,487,1,0,0,0,487,489,1,0,0,0,488,479,1,0,0,0,488,
        484,1,0,0,0,489,490,1,0,0,0,490,497,5,5,0,0,491,498,5,46,0,0,492,
        493,5,47,0,0,493,494,3,62,31,0,494,495,5,48,0,0,495,498,1,0,0,0,
        496,498,3,62,31,0,497,491,1,0,0,0,497,492,1,0,0,0,497,496,1,0,0,
        0,498,57,1,0,0,0,499,502,5,35,0,0,500,501,5,6,0,0,501,503,5,35,0,
        0,502,500,1,0,0,0,502,503,1,0,0,0,503,59,1,0,0,0,504,507,3,66,33,
        0,505,506,5,6,0,0,506,508,5,35,0,0,507,505,1,0,0,0,507,508,1,0,0,
        0,508,61,1,0,0,0,509,514,3,58,29,0,510,511,5,49,0,0,511,513,3,58,
        29,0,512,510,1,0,0,0,513,516,1,0,0,0,514,512,1,0,0,0,514,515,1,0,
        0,0,515,518,1,0,0,0,516,514,1,0,0,0,517,519,5,49,0,0,518,517,1,0,
        0,0,518,519,1,0,0,0,519,63,1,0,0,0,520,525,3,60,30,0,521,522,5,49,
        0,0,522,524,3,60,30,0,523,521,1,0,0,0,524,527,1,0,0,0,525,523,1,
        0,0,0,525,526,1,0,0,0,526,65,1,0,0,0,527,525,1,0,0,0,528,533,5,35,
        0,0,529,530,5,44,0,0,530,532,5,35,0,0,531,529,1,0,0,0,532,535,1,
        0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,534,67,1,0,0,0,535,533,1,0,
        0,0,536,537,5,7,0,0,537,542,5,35,0,0,538,539,5,49,0,0,539,541,5,
        35,0,0,540,538,1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,
        0,0,0,543,69,1,0,0,0,544,542,1,0,0,0,545,546,5,35,0,0,546,547,5,
        50,0,0,547,548,3,30,15,0,548,71,1,0,0,0,549,550,5,8,0,0,550,555,
        5,35,0,0,551,552,5,49,0,0,552,554,5,35,0,0,553,551,1,0,0,0,554,557,
        1,0,0,0,555,553,1,0,0,0,555,556,1,0,0,0,556,73,1,0,0,0,557,555,1,
        0,0,0,558,559,5,9,0,0,559,562,3,94,47,0,560,561,5,49,0,0,561,563,
        3,94,47,0,562,560,1,0,0,0,562,563,1,0,0,0,563,75,1,0,0,0,564,573,
        3,78,39,0,565,573,3,80,40,0,566,573,3,82,41,0,567,573,3,84,42,0,
        568,573,3,86,43,0,569,573,3,12,6,0,570,573,3,148,74,0,571,573,3,
        10,5,0,572,564,1,0,0,0,572,565,1,0,0,0,572,566,1,0,0,0,572,567,1,
        0,0,0,572,568,1,0,0,0,572,569,1,0,0,0,572,570,1,0,0,0,572,571,1,
        0,0,0,573,77,1,0,0,0,574,575,5,10,0,0,575,576,3,94,47,0,576,577,
        5,50,0,0,577,585,3,92,46,0,578,579,5,11,0,0,579,580,3,94,47,0,580,
        581,5,50,0,0,581,582,3,92,46,0,582,584,1,0,0,0,583,578,1,0,0,0,584,
        587,1,0,0,0,585,583,1,0,0,0,585,586,1,0,0,0,586,591,1,0,0,0,587,
        585,1,0,0,0,588,589,5,12,0,0,589,590,5,50,0,0,590,592,3,92,46,0,
        591,588,1,0,0,0,591,592,1,0,0,0,592,79,1,0,0,0,593,594,5,13,0,0,
        594,595,3,94,47,0,595,596,5,50,0,0,596,600,3,92,46,0,597,598,5,12,
        0,0,598,599,5,50,0,0,599,601,3,92,46,0,600,597,1,0,0,0,600,601,1,
        0,0,0,601,81,1,0,0,0,602,603,5,14,0,0,603,604,3,142,71,0,604,605,
        5,15,0,0,605,606,3,144,72,0,606,607,5,50,0,0,607,611,3,92,46,0,608,
        609,5,12,0,0,609,610,5,50,0,0,610,612,3,92,46,0,611,608,1,0,0,0,
        611,612,1,0,0,0,612,83,1,0,0,0,613,614,5,16,0,0,614,615,5,50,0,0,
        615,637,3,92,46,0,616,617,3,90,45,0,617,618,5,50,0,0,618,619,3,92,
        46,0,619,621,1,0,0,0,620,616,1,0,0,0,621,622,1,0,0,0,622,620,1,0,
        0,0,622,623,1,0,0,0,623,627,1,0,0,0,624,625,5,12,0,0,625,626,5,50,
        0,0,626,628,3,92,46,0,627,624,1,0,0,0,627,628,1,0,0,0,628,632,1,
        0,0,0,629,630,5,17,0,0,630,631,5,50,0,0,631,633,3,92,46,0,632,629,
        1,0,0,0,632,633,1,0,0,0,633,638,1,0,0,0,634,635,5,17,0,0,635,636,
        5,50,0,0,636,638,3,92,46,0,637,620,1,0,0,0,637,634,1,0,0,0,638,85,
        1,0,0,0,639,640,5,18,0,0,640,645,3,88,44,0,641,642,5,49,0,0,642,
        644,3,88,44,0,643,641,1,0,0,0,644,647,1,0,0,0,645,643,1,0,0,0,645,
        646,1,0,0,0,646,648,1,0,0,0,647,645,1,0,0,0,648,649,5,50,0,0,649,
        650,3,92,46,0,650,87,1,0,0,0,651,654,3,94,47,0,652,653,5,6,0,0,653,
        655,3,114,57,0,654,652,1,0,0,0,654,655,1,0,0,0,655,89,1,0,0,0,656,
        662,5,19,0,0,657,660,3,94,47,0,658,659,5,6,0,0,659,661,5,35,0,0,
        660,658,1,0,0,0,660,661,1,0,0,0,661,663,1,0,0,0,662,657,1,0,0,0,
        662,663,1,0,0,0,663,91,1,0,0,0,664,675,3,26,13,0,665,666,5,34,0,
        0,666,668,5,93,0,0,667,669,3,24,12,0,668,667,1,0,0,0,669,670,1,0,
        0,0,670,668,1,0,0,0,670,671,1,0,0,0,671,672,1,0,0,0,672,673,5,94,
        0,0,673,675,1,0,0,0,674,664,1,0,0,0,674,665,1,0,0,0,675,93,1,0,0,
        0,676,682,3,102,51,0,677,678,5,10,0,0,678,679,3,102,51,0,679,680,
        5,12,0,0,680,681,3,94,47,0,681,683,1,0,0,0,682,677,1,0,0,0,682,683,
        1,0,0,0,683,686,1,0,0,0,684,686,3,98,49,0,685,676,1,0,0,0,685,684,
        1,0,0,0,686,95,1,0,0,0,687,690,3,102,51,0,688,690,3,100,50,0,689,
        687,1,0,0,0,689,688,1,0,0,0,690,97,1,0,0,0,691,693,5,20,0,0,692,
        694,3,20,10,0,693,692,1,0,0,0,693,694,1,0,0,0,694,695,1,0,0,0,695,
        696,5,50,0,0,696,697,3,94,47,0,697,99,1,0,0,0,698,700,5,20,0,0,699,
        701,3,20,10,0,700,699,1,0,0,0,700,701,1,0,0,0,701,702,1,0,0,0,702,
        703,5,50,0,0,703,704,3,96,48,0,704,101,1,0,0,0,705,710,3,104,52,
        0,706,707,5,21,0,0,707,709,3,104,52,0,708,706,1,0,0,0,709,712,1,
        0,0,0,710,708,1,0,0,0,710,711,1,0,0,0,711,103,1,0,0,0,712,710,1,
        0,0,0,713,718,3,106,53,0,714,715,5,22,0,0,715,717,3,106,53,0,716,
        714,1,0,0,0,717,720,1,0,0,0,718,716,1,0,0,0,718,719,1,0,0,0,719,
        105,1,0,0,0,720,718,1,0,0,0,721,722,5,23,0,0,722,725,3,106,53,0,
        723,725,3,108,54,0,724,721,1,0,0,0,724,723,1,0,0,0,725,107,1,0,0,
        0,726,732,3,112,56,0,727,728,3,110,55,0,728,729,3,112,56,0,729,731,
        1,0,0,0,730,727,1,0,0,0,731,734,1,0,0,0,732,730,1,0,0,0,732,733,
        1,0,0,0,733,109,1,0,0,0,734,732,1,0,0,0,735,749,5,69,0,0,736,749,
        5,70,0,0,737,749,5,71,0,0,738,749,5,72,0,0,739,749,5,73,0,0,740,
        749,5,74,0,0,741,749,5,75,0,0,742,749,5,15,0,0,743,744,5,23,0,0,
        744,749,5,15,0,0,745,749,5,24,0,0,746,747,5,24,0,0,747,749,5,23,
        0,0,748,735,1,0,0,0,748,736,1,0,0,0,748,737,1,0,0,0,748,738,1,0,
        0,0,748,739,1,0,0,0,748,740,1,0,0,0,748,741,1,0,0,0,748,742,1,0,
        0,0,748,743,1,0,0,0,748,745,1,0,0,0,748,746,1,0,0,0,749,111,1,0,
        0,0,750,752,5,46,0,0,751,750,1,0,0,0,751,752,1,0,0,0,752,753,1,0,
        0,0,753,754,3,114,57,0,754,113,1,0,0,0,755,760,3,116,58,0,756,757,
        5,56,0,0,757,759,3,116,58,0,758,756,1,0,0,0,759,762,1,0,0,0,760,
        758,1,0,0,0,760,761,1,0,0,0,761,115,1,0,0,0,762,760,1,0,0,0,763,
        768,3,118,59,0,764,765,5,57,0,0,765,767,3,118,59,0,766,764,1,0,0,
        0,767,770,1,0,0,0,768,766,1,0,0,0,768,769,1,0,0,0,769,117,1,0,0,
        0,770,768,1,0,0,0,771,776,3,120,60,0,772,773,5,58,0,0,773,775,3,
        120,60,0,774,772,1,0,0,0,775,778,1,0,0,0,776,774,1,0,0,0,776,777,
        1,0,0,0,777,119,1,0,0,0,778,776,1,0,0,0,779,786,3,122,61,0,780,781,
        5,59,0,0,781,785,3,122,61,0,782,783,5,60,0,0,783,785,3,122,61,0,
        784,780,1,0,0,0,784,782,1,0,0,0,785,788,1,0,0,0,786,784,1,0,0,0,
        786,787,1,0,0,0,787,121,1,0,0,0,788,786,1,0,0,0,789,796,3,124,62,
        0,790,791,5,61,0,0,791,795,3,124,62,0,792,793,5,62,0,0,793,795,3,
        124,62,0,794,790,1,0,0,0,794,792,1,0,0,0,795,798,1,0,0,0,796,794,
        1,0,0,0,796,797,1,0,0,0,797,123,1,0,0,0,798,796,1,0,0,0,799,812,
        3,126,63,0,800,801,5,46,0,0,801,811,3,126,63,0,802,803,5,63,0,0,
        803,811,3,126,63,0,804,805,5,64,0,0,805,811,3,126,63,0,806,807,5,
        65,0,0,807,811,3,126,63,0,808,809,5,76,0,0,809,811,3,126,63,0,810,
        800,1,0,0,0,810,802,1,0,0,0,810,804,1,0,0,0,810,806,1,0,0,0,810,
        808,1,0,0,0,811,814,1,0,0,0,812,810,1,0,0,0,812,813,1,0,0,0,813,
        125,1,0,0,0,814,812,1,0,0,0,815,816,5,61,0,0,816,823,3,126,63,0,
        817,818,5,62,0,0,818,823,3,126,63,0,819,820,5,66,0,0,820,823,3,126,
        63,0,821,823,3,128,64,0,822,815,1,0,0,0,822,817,1,0,0,0,822,819,
        1,0,0,0,822,821,1,0,0,0,823,127,1,0,0,0,824,828,3,130,65,0,825,827,
        3,134,67,0,826,825,1,0,0,0,827,830,1,0,0,0,828,826,1,0,0,0,828,829,
        1,0,0,0,829,833,1,0,0,0,830,828,1,0,0,0,831,832,5,52,0,0,832,834,
        3,126,63,0,833,831,1,0,0,0,833,834,1,0,0,0,834,129,1,0,0,0,835,838,
        5,47,0,0,836,839,3,160,80,0,837,839,3,132,66,0,838,836,1,0,0,0,838,
        837,1,0,0,0,838,839,1,0,0,0,839,840,1,0,0,0,840,863,5,48,0,0,841,
        843,5,54,0,0,842,844,3,132,66,0,843,842,1,0,0,0,843,844,1,0,0,0,
        844,845,1,0,0,0,845,863,5,55,0,0,846,848,5,67,0,0,847,849,3,146,
        73,0,848,847,1,0,0,0,848,849,1,0,0,0,849,850,1,0,0,0,850,863,5,68,
        0,0,851,863,5,35,0,0,852,863,3,166,83,0,853,855,3,164,82,0,854,853,
        1,0,0,0,855,856,1,0,0,0,856,854,1,0,0,0,856,857,1,0,0,0,857,863,
        1,0,0,0,858,863,5,45,0,0,859,863,5,25,0,0,860,863,5,26,0,0,861,863,
        5,27,0,0,862,835,1,0,0,0,862,841,1,0,0,0,862,846,1,0,0,0,862,851,
        1,0,0,0,862,852,1,0,0,0,862,854,1,0,0,0,862,858,1,0,0,0,862,859,
        1,0,0,0,862,860,1,0,0,0,862,861,1,0,0,0,863,131,1,0,0,0,864,876,
        3,94,47,0,865,877,3,156,78,0,866,867,5,49,0,0,867,869,3,94,47,0,
        868,866,1,0,0,0,869,872,1,0,0,0,870,868,1,0,0,0,870,871,1,0,0,0,
        871,874,1,0,0,0,872,870,1,0,0,0,873,875,5,49,0,0,874,873,1,0,0,0,
        874,875,1,0,0,0,875,877,1,0,0,0,876,865,1,0,0,0,876,870,1,0,0,0,
        877,133,1,0,0,0,878,880,5,47,0,0,879,881,3,150,75,0,880,879,1,0,
        0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,890,5,48,0,0,883,884,5,54,
        0,0,884,885,3,136,68,0,885,886,5,55,0,0,886,890,1,0,0,0,887,888,
        5,44,0,0,888,890,5,35,0,0,889,878,1,0,0,0,889,883,1,0,0,0,889,887,
        1,0,0,0,890,135,1,0,0,0,891,896,3,138,69,0,892,893,5,49,0,0,893,
        895,3,138,69,0,894,892,1,0,0,0,895,898,1,0,0,0,896,894,1,0,0,0,896,
        897,1,0,0,0,897,900,1,0,0,0,898,896,1,0,0,0,899,901,5,49,0,0,900,
        899,1,0,0,0,900,901,1,0,0,0,901,137,1,0,0,0,902,914,3,94,47,0,903,
        905,3,94,47,0,904,903,1,0,0,0,904,905,1,0,0,0,905,906,1,0,0,0,906,
        908,5,50,0,0,907,909,3,94,47,0,908,907,1,0,0,0,908,909,1,0,0,0,909,
        911,1,0,0,0,910,912,3,140,70,0,911,910,1,0,0,0,911,912,1,0,0,0,912,
        914,1,0,0,0,913,902,1,0,0,0,913,904,1,0,0,0,914,139,1,0,0,0,915,
        917,5,50,0,0,916,918,3,94,47,0,917,916,1,0,0,0,917,918,1,0,0,0,918,
        141,1,0,0,0,919,924,3,112,56,0,920,921,5,49,0,0,921,923,3,112,56,
        0,922,920,1,0,0,0,923,926,1,0,0,0,924,922,1,0,0,0,924,925,1,0,0,
        0,925,928,1,0,0,0,926,924,1,0,0,0,927,929,5,49,0,0,928,927,1,0,0,
        0,928,929,1,0,0,0,929,143,1,0,0,0,930,935,3,94,47,0,931,932,5,49,
        0,0,932,934,3,94,47,0,933,931,1,0,0,0,934,937,1,0,0,0,935,933,1,
        0,0,0,935,936,1,0,0,0,936,939,1,0,0,0,937,935,1,0,0,0,938,940,5,
        49,0,0,939,938,1,0,0,0,939,940,1,0,0,0,940,145,1,0,0,0,941,942,3,
        94,47,0,942,943,5,50,0,0,943,958,3,94,47,0,944,959,3,156,78,0,945,
        946,5,49,0,0,946,947,3,94,47,0,947,948,5,50,0,0,948,949,3,94,47,
        0,949,951,1,0,0,0,950,945,1,0,0,0,951,954,1,0,0,0,952,950,1,0,0,
        0,952,953,1,0,0,0,953,956,1,0,0,0,954,952,1,0,0,0,955,957,5,49,0,
        0,956,955,1,0,0,0,956,957,1,0,0,0,957,959,1,0,0,0,958,944,1,0,0,
        0,958,952,1,0,0,0,959,975,1,0,0,0,960,972,3,94,47,0,961,973,3,156,
        78,0,962,963,5,49,0,0,963,965,3,94,47,0,964,962,1,0,0,0,965,968,
        1,0,0,0,966,964,1,0,0,0,966,967,1,0,0,0,967,970,1,0,0,0,968,966,
        1,0,0,0,969,971,5,49,0,0,970,969,1,0,0,0,970,971,1,0,0,0,971,973,
        1,0,0,0,972,961,1,0,0,0,972,966,1,0,0,0,973,975,1,0,0,0,974,941,
        1,0,0,0,974,960,1,0,0,0,975,147,1,0,0,0,976,977,5,28,0,0,977,983,
        5,35,0,0,978,980,5,47,0,0,979,981,3,150,75,0,980,979,1,0,0,0,980,
        981,1,0,0,0,981,982,1,0,0,0,982,984,5,48,0,0,983,978,1,0,0,0,983,
        984,1,0,0,0,984,985,1,0,0,0,985,986,5,50,0,0,986,987,3,92,46,0,987,
        149,1,0,0,0,988,989,3,152,76,0,989,990,5,49,0,0,990,992,1,0,0,0,
        991,988,1,0,0,0,992,995,1,0,0,0,993,991,1,0,0,0,993,994,1,0,0,0,
        994,1016,1,0,0,0,995,993,1,0,0,0,996,998,3,152,76,0,997,999,5,49,
        0,0,998,997,1,0,0,0,998,999,1,0,0,0,999,1017,1,0,0,0,1000,1001,5,
        46,0,0,1001,1006,3,94,47,0,1002,1003,5,49,0,0,1003,1005,3,152,76,
        0,1004,1002,1,0,0,0,1005,1008,1,0,0,0,1006,1004,1,0,0,0,1006,1007,
        1,0,0,0,1007,1012,1,0,0,0,1008,1006,1,0,0,0,1009,1010,5,49,0,0,1010,
        1011,5,52,0,0,1011,1013,3,94,47,0,1012,1009,1,0,0,0,1012,1013,1,
        0,0,0,1013,1017,1,0,0,0,1014,1015,5,52,0,0,1015,1017,3,94,47,0,1016,
        996,1,0,0,0,1016,1000,1,0,0,0,1016,1014,1,0,0,0,1017,151,1,0,0,0,
        1018,1020,3,94,47,0,1019,1021,3,156,78,0,1020,1019,1,0,0,0,1020,
        1021,1,0,0,0,1021,1027,1,0,0,0,1022,1023,3,94,47,0,1023,1024,5,53,
        0,0,1024,1025,3,94,47,0,1025,1027,1,0,0,0,1026,1018,1,0,0,0,1026,
        1022,1,0,0,0,1027,153,1,0,0,0,1028,1031,3,156,78,0,1029,1031,3,158,
        79,0,1030,1028,1,0,0,0,1030,1029,1,0,0,0,1031,155,1,0,0,0,1032,1033,
        5,14,0,0,1033,1034,3,142,71,0,1034,1035,5,15,0,0,1035,1037,3,102,
        51,0,1036,1038,3,154,77,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,
        157,1,0,0,0,1039,1040,5,10,0,0,1040,1042,3,96,48,0,1041,1043,3,154,
        77,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,1043,159,1,0,0,0,1044,1046,
        5,29,0,0,1045,1047,3,162,81,0,1046,1045,1,0,0,0,1046,1047,1,0,0,
        0,1047,161,1,0,0,0,1048,1049,5,4,0,0,1049,1052,3,94,47,0,1050,1052,
        3,144,72,0,1051,1048,1,0,0,0,1051,1050,1,0,0,0,1052,163,1,0,0,0,
        1053,1054,7,2,0,0,1054,165,1,0,0,0,1055,1059,3,168,84,0,1056,1059,
        5,42,0,0,1057,1059,5,43,0,0,1058,1055,1,0,0,0,1058,1056,1,0,0,0,
        1058,1057,1,0,0,0,1059,167,1,0,0,0,1060,1061,7,3,0,0,1061,169,1,
        0,0,0,150,175,179,181,190,199,202,209,214,221,228,235,241,245,251,
        257,261,267,271,273,277,283,287,293,297,302,307,313,317,323,329,
        333,339,343,345,349,355,359,365,369,375,382,386,399,405,410,414,
        417,421,426,430,434,448,456,464,466,470,479,486,488,497,502,507,
        514,518,525,533,542,555,562,572,585,591,600,611,622,627,632,637,
        645,654,660,662,670,674,682,685,689,693,700,710,718,724,732,748,
        751,760,768,776,784,786,794,796,810,812,822,828,833,838,843,848,
        856,862,870,874,876,880,889,896,900,904,908,911,913,917,924,928,
        935,939,952,956,958,966,970,972,974,980,983,993,998,1006,1012,1016,
        1020,1026,1030,1037,1042,1046,1051,1058
    ]

class VyperParser ( Parser ):

    grammarFileName = "Vyper.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'def'", "'return'", "'raise'", "'from'", 
                     "'import'", "'as'", "'global'", "'nonlocal'", "'assert'", 
                     "'if'", "'elif'", "'else'", "'while'", "'for'", "'in'", 
                     "'try'", "'finally'", "'with'", "'except'", "'lambda'", 
                     "'or'", "'and'", "'not'", "'is'", "'None'", "'True'", 
                     "'False'", "'class'", "'yield'", "'del'", "'pass'", 
                     "'continue'", "'break'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'.'", "'...'", "'*'", "'('", "')'", "','", "':'", 
                     "';'", "'**'", "'='", "'['", "']'", "'|'", "'^'", "'&'", 
                     "'<<'", "'>>'", "'+'", "'-'", "'/'", "'%'", "'//'", 
                     "'~'", "'{'", "'}'", "'<'", "'>'", "'=='", "'>='", 
                     "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", 
                     "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", 
                     "'<<='", "'>>='", "'**='", "'//='" ]

    symbolicNames = [ "<INVALID>", "DEF", "RETURN", "RAISE", "FROM", "IMPORT", 
                      "AS", "GLOBAL", "NONLOCAL", "ASSERT", "IF", "ELIF", 
                      "ELSE", "WHILE", "FOR", "IN", "TRY", "FINALLY", "WITH", 
                      "EXCEPT", "LAMBDA", "OR", "AND", "NOT", "IS", "NONE", 
                      "TRUE", "FALSE", "CLASS", "YIELD", "DEL", "PASS", 
                      "CONTINUE", "BREAK", "NEWLINE", "NAME", "STRING_LITERAL", 
                      "BYTES_LITERAL", "DECIMAL_INTEGER", "OCT_INTEGER", 
                      "HEX_INTEGER", "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", 
                      "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
                      "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
                      "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", "AND_OP", 
                      "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", "MINUS", "DIV", 
                      "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", "CLOSE_BRACE", 
                      "LESS_THAN", "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", 
                      "NOT_EQ_1", "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", 
                      "SUB_ASSIGN", "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", 
                      "MOD_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", 
                      "LEFT_SHIFT_ASSIGN", "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", 
                      "IDIV_ASSIGN", "SKIP_", "UNKNOWN_CHAR", "INDENT", 
                      "DEDENT" ]

    RULE_single_input = 0
    RULE_file_input = 1
    RULE_eval_input = 2
    RULE_decorator = 3
    RULE_decorators = 4
    RULE_decorated = 5
    RULE_funcdef = 6
    RULE_parameters = 7
    RULE_typedargslist = 8
    RULE_tfpdef = 9
    RULE_varargslist = 10
    RULE_vfpdef = 11
    RULE_stmt = 12
    RULE_simple_stmt = 13
    RULE_small_stmt = 14
    RULE_expr_stmt = 15
    RULE_testlist_star_expr = 16
    RULE_augassign = 17
    RULE_del_stmt = 18
    RULE_pass_stmt = 19
    RULE_flow_stmt = 20
    RULE_break_stmt = 21
    RULE_continue_stmt = 22
    RULE_return_stmt = 23
    RULE_yield_stmt = 24
    RULE_raise_stmt = 25
    RULE_import_stmt = 26
    RULE_import_name = 27
    RULE_import_from = 28
    RULE_import_as_name = 29
    RULE_dotted_as_name = 30
    RULE_import_as_names = 31
    RULE_dotted_as_names = 32
    RULE_dotted_name = 33
    RULE_global_stmt = 34
    RULE_contract_global_stmt = 35
    RULE_nonlocal_stmt = 36
    RULE_assert_stmt = 37
    RULE_compound_stmt = 38
    RULE_if_stmt = 39
    RULE_while_stmt = 40
    RULE_for_stmt = 41
    RULE_try_stmt = 42
    RULE_with_stmt = 43
    RULE_with_item = 44
    RULE_except_clause = 45
    RULE_suite = 46
    RULE_test = 47
    RULE_test_nocond = 48
    RULE_lambdef = 49
    RULE_lambdef_nocond = 50
    RULE_or_test = 51
    RULE_and_test = 52
    RULE_not_test = 53
    RULE_comparison = 54
    RULE_comp_op = 55
    RULE_star_expr = 56
    RULE_expr = 57
    RULE_xor_expr = 58
    RULE_and_expr = 59
    RULE_shift_expr = 60
    RULE_arith_expr = 61
    RULE_term = 62
    RULE_factor = 63
    RULE_power = 64
    RULE_atom = 65
    RULE_testlist_comp = 66
    RULE_trailer = 67
    RULE_subscriptlist = 68
    RULE_subscript = 69
    RULE_sliceop = 70
    RULE_exprlist = 71
    RULE_testlist = 72
    RULE_dictorsetmaker = 73
    RULE_classdef = 74
    RULE_arglist = 75
    RULE_argument = 76
    RULE_comp_iter = 77
    RULE_comp_for = 78
    RULE_comp_if = 79
    RULE_yield_expr = 80
    RULE_yield_arg = 81
    RULE_strr = 82
    RULE_number = 83
    RULE_integer = 84

    ruleNames =  [ "single_input", "file_input", "eval_input", "decorator", 
                   "decorators", "decorated", "funcdef", "parameters", "typedargslist", 
                   "tfpdef", "varargslist", "vfpdef", "stmt", "simple_stmt", 
                   "small_stmt", "expr_stmt", "testlist_star_expr", "augassign", 
                   "del_stmt", "pass_stmt", "flow_stmt", "break_stmt", "continue_stmt", 
                   "return_stmt", "yield_stmt", "raise_stmt", "import_stmt", 
                   "import_name", "import_from", "import_as_name", "dotted_as_name", 
                   "import_as_names", "dotted_as_names", "dotted_name", 
                   "global_stmt", "contract_global_stmt", "nonlocal_stmt", 
                   "assert_stmt", "compound_stmt", "if_stmt", "while_stmt", 
                   "for_stmt", "try_stmt", "with_stmt", "with_item", "except_clause", 
                   "suite", "test", "test_nocond", "lambdef", "lambdef_nocond", 
                   "or_test", "and_test", "not_test", "comparison", "comp_op", 
                   "star_expr", "expr", "xor_expr", "and_expr", "shift_expr", 
                   "arith_expr", "term", "factor", "power", "atom", "testlist_comp", 
                   "trailer", "subscriptlist", "subscript", "sliceop", "exprlist", 
                   "testlist", "dictorsetmaker", "classdef", "arglist", 
                   "argument", "comp_iter", "comp_for", "comp_if", "yield_expr", 
                   "yield_arg", "strr", "number", "integer" ]

    EOF = Token.EOF
    DEF=1
    RETURN=2
    RAISE=3
    FROM=4
    IMPORT=5
    AS=6
    GLOBAL=7
    NONLOCAL=8
    ASSERT=9
    IF=10
    ELIF=11
    ELSE=12
    WHILE=13
    FOR=14
    IN=15
    TRY=16
    FINALLY=17
    WITH=18
    EXCEPT=19
    LAMBDA=20
    OR=21
    AND=22
    NOT=23
    IS=24
    NONE=25
    TRUE=26
    FALSE=27
    CLASS=28
    YIELD=29
    DEL=30
    PASS=31
    CONTINUE=32
    BREAK=33
    NEWLINE=34
    NAME=35
    STRING_LITERAL=36
    BYTES_LITERAL=37
    DECIMAL_INTEGER=38
    OCT_INTEGER=39
    HEX_INTEGER=40
    BIN_INTEGER=41
    FLOAT_NUMBER=42
    IMAG_NUMBER=43
    DOT=44
    ELLIPSIS=45
    STAR=46
    OPEN_PAREN=47
    CLOSE_PAREN=48
    COMMA=49
    COLON=50
    SEMI_COLON=51
    POWER=52
    ASSIGN=53
    OPEN_BRACK=54
    CLOSE_BRACK=55
    OR_OP=56
    XOR=57
    AND_OP=58
    LEFT_SHIFT=59
    RIGHT_SHIFT=60
    ADD=61
    MINUS=62
    DIV=63
    MOD=64
    IDIV=65
    NOT_OP=66
    OPEN_BRACE=67
    CLOSE_BRACE=68
    LESS_THAN=69
    GREATER_THAN=70
    EQUALS=71
    GT_EQ=72
    LT_EQ=73
    NOT_EQ_1=74
    NOT_EQ_2=75
    AT=76
    ARROW=77
    ADD_ASSIGN=78
    SUB_ASSIGN=79
    MULT_ASSIGN=80
    AT_ASSIGN=81
    DIV_ASSIGN=82
    MOD_ASSIGN=83
    AND_ASSIGN=84
    OR_ASSIGN=85
    XOR_ASSIGN=86
    LEFT_SHIFT_ASSIGN=87
    RIGHT_SHIFT_ASSIGN=88
    POWER_ASSIGN=89
    IDIV_ASSIGN=90
    SKIP_=91
    UNKNOWN_CHAR=92
    INDENT=93
    DEDENT=94

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(VyperParser.NEWLINE, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(VyperParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(VyperParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = VyperParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_single_input)
        try:
            self.state = 175
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34]:
                self.enterOuterAlt(localctx, 1)
                self.state = 170
                self.match(VyperParser.NEWLINE)
                pass
            elif token in [2, 3, 4, 5, 7, 8, 9, 20, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 54, 61, 62, 66, 67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 171
                self.simple_stmt()
                pass
            elif token in [1, 10, 13, 14, 16, 18, 28, 76]:
                self.enterOuterAlt(localctx, 3)
                self.state = 172
                self.compound_stmt()
                self.state = 173
                self.match(VyperParser.NEWLINE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(VyperParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NEWLINE)
            else:
                return self.getToken(VyperParser.NEWLINE, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.StmtContext)
            else:
                return self.getTypedRuleContext(VyperParser.StmtContext,i)


        def getRuleIndex(self):
            return VyperParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = VyperParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_file_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 6935807308917467070) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1027) != 0):
                self.state = 179
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [34]:
                    self.state = 177
                    self.match(VyperParser.NEWLINE)
                    pass
                elif token in [1, 2, 3, 4, 5, 7, 8, 9, 10, 13, 14, 16, 18, 20, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 54, 61, 62, 66, 67, 76]:
                    self.state = 178
                    self.stmt()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 183
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 184
            self.match(VyperParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(VyperParser.TestlistContext,0)


        def EOF(self):
            return self.getToken(VyperParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NEWLINE)
            else:
                return self.getToken(VyperParser.NEWLINE, i)

        def getRuleIndex(self):
            return VyperParser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = VyperParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval_input)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self.testlist()
            self.state = 190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==34:
                self.state = 187
                self.match(VyperParser.NEWLINE)
                self.state = 192
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 193
            self.match(VyperParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(VyperParser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(VyperParser.Dotted_nameContext,0)


        def NEWLINE(self):
            return self.getToken(VyperParser.NEWLINE, 0)

        def OPEN_PAREN(self):
            return self.getToken(VyperParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(VyperParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(VyperParser.ArglistContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = VyperParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.match(VyperParser.AT)
            self.state = 196
            self.dotted_name()
            self.state = 202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 197
                self.match(VyperParser.OPEN_PAREN)
                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 217725028761833) != 0):
                    self.state = 198
                    self.arglist()


                self.state = 201
                self.match(VyperParser.CLOSE_PAREN)


            self.state = 204
            self.match(VyperParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(VyperParser.DecoratorContext,i)


        def getRuleIndex(self):
            return VyperParser.RULE_decorators

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorators" ):
                listener.enterDecorators(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorators" ):
                listener.exitDecorators(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = VyperParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 206
                self.decorator()
                self.state = 209 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==76):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(VyperParser.DecoratorsContext,0)


        def classdef(self):
            return self.getTypedRuleContext(VyperParser.ClassdefContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(VyperParser.FuncdefContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_decorated

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorated" ):
                listener.enterDecorated(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorated" ):
                listener.exitDecorated(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorated" ):
                return visitor.visitDecorated(self)
            else:
                return visitor.visitChildren(self)




    def decorated(self):

        localctx = VyperParser.DecoratedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_decorated)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.decorators()
            self.state = 214
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.state = 212
                self.classdef()
                pass
            elif token in [1]:
                self.state = 213
                self.funcdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(VyperParser.DEF, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def parameters(self):
            return self.getTypedRuleContext(VyperParser.ParametersContext,0)


        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(VyperParser.SuiteContext,0)


        def ARROW(self):
            return self.getToken(VyperParser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(VyperParser.TestContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = VyperParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self.match(VyperParser.DEF)
            self.state = 217
            self.match(VyperParser.NAME)
            self.state = 218
            self.parameters()
            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 219
                self.match(VyperParser.ARROW)
                self.state = 220
                self.test()


            self.state = 223
            self.match(VyperParser.COLON)
            self.state = 224
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(VyperParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(VyperParser.CLOSE_PAREN, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(VyperParser.TypedargslistContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameters" ):
                listener.enterParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameters" ):
                listener.exitParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = VyperParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.match(VyperParser.OPEN_PAREN)
            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4574002731286528) != 0):
                self.state = 227
                self.typedargslist()


            self.state = 230
            self.match(VyperParser.CLOSE_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TfpdefContext)
            else:
                return self.getTypedRuleContext(VyperParser.TfpdefContext,i)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.ASSIGN)
            else:
                return self.getToken(VyperParser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TestContext)
            else:
                return self.getTypedRuleContext(VyperParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def STAR(self):
            return self.getToken(VyperParser.STAR, 0)

        def POWER(self):
            return self.getToken(VyperParser.POWER, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = VyperParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 297
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 232
                self.tfpdef()
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 233
                    self.match(VyperParser.ASSIGN)
                    self.state = 234
                    self.test()


                self.state = 245
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 237
                        self.match(VyperParser.COMMA)
                        self.state = 238
                        self.tfpdef()
                        self.state = 241
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==53:
                            self.state = 239
                            self.match(VyperParser.ASSIGN)
                            self.state = 240
                            self.test()

                 
                    self.state = 247
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 248
                    self.match(VyperParser.COMMA)
                    self.state = 271
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [46]:
                        self.state = 249
                        self.match(VyperParser.STAR)
                        self.state = 251
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==35:
                            self.state = 250
                            self.tfpdef()


                        self.state = 261
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 253
                                self.match(VyperParser.COMMA)
                                self.state = 254
                                self.tfpdef()
                                self.state = 257
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==53:
                                    self.state = 255
                                    self.match(VyperParser.ASSIGN)
                                    self.state = 256
                                    self.test()

                         
                            self.state = 263
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

                        self.state = 267
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==49:
                            self.state = 264
                            self.match(VyperParser.COMMA)
                            self.state = 265
                            self.match(VyperParser.POWER)
                            self.state = 266
                            self.tfpdef()


                        pass
                    elif token in [52]:
                        self.state = 269
                        self.match(VyperParser.POWER)
                        self.state = 270
                        self.tfpdef()
                        pass
                    elif token in [48]:
                        pass
                    else:
                        pass


                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 275
                self.match(VyperParser.STAR)
                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 276
                    self.tfpdef()


                self.state = 287
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 279
                        self.match(VyperParser.COMMA)
                        self.state = 280
                        self.tfpdef()
                        self.state = 283
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==53:
                            self.state = 281
                            self.match(VyperParser.ASSIGN)
                            self.state = 282
                            self.test()

                 
                    self.state = 289
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 290
                    self.match(VyperParser.COMMA)
                    self.state = 291
                    self.match(VyperParser.POWER)
                    self.state = 292
                    self.tfpdef()


                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 3)
                self.state = 295
                self.match(VyperParser.POWER)
                self.state = 296
                self.tfpdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TfpdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(VyperParser.TestContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_tfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTfpdef" ):
                listener.enterTfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTfpdef" ):
                listener.exitTfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTfpdef" ):
                return visitor.visitTfpdef(self)
            else:
                return visitor.visitChildren(self)




    def tfpdef(self):

        localctx = VyperParser.TfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_tfpdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 299
            self.match(VyperParser.NAME)
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 300
                self.match(VyperParser.COLON)
                self.state = 301
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vfpdef(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.VfpdefContext)
            else:
                return self.getTypedRuleContext(VyperParser.VfpdefContext,i)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.ASSIGN)
            else:
                return self.getToken(VyperParser.ASSIGN, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TestContext)
            else:
                return self.getTypedRuleContext(VyperParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def STAR(self):
            return self.getToken(VyperParser.STAR, 0)

        def POWER(self):
            return self.getToken(VyperParser.POWER, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = VyperParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 369
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 304
                self.vfpdef()
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 305
                    self.match(VyperParser.ASSIGN)
                    self.state = 306
                    self.test()


                self.state = 317
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 309
                        self.match(VyperParser.COMMA)
                        self.state = 310
                        self.vfpdef()
                        self.state = 313
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==53:
                            self.state = 311
                            self.match(VyperParser.ASSIGN)
                            self.state = 312
                            self.test()

                 
                    self.state = 319
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 320
                    self.match(VyperParser.COMMA)
                    self.state = 343
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [46]:
                        self.state = 321
                        self.match(VyperParser.STAR)
                        self.state = 323
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==35:
                            self.state = 322
                            self.vfpdef()


                        self.state = 333
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 325
                                self.match(VyperParser.COMMA)
                                self.state = 326
                                self.vfpdef()
                                self.state = 329
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if _la==53:
                                    self.state = 327
                                    self.match(VyperParser.ASSIGN)
                                    self.state = 328
                                    self.test()

                         
                            self.state = 335
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

                        self.state = 339
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==49:
                            self.state = 336
                            self.match(VyperParser.COMMA)
                            self.state = 337
                            self.match(VyperParser.POWER)
                            self.state = 338
                            self.vfpdef()


                        pass
                    elif token in [52]:
                        self.state = 341
                        self.match(VyperParser.POWER)
                        self.state = 342
                        self.vfpdef()
                        pass
                    elif token in [50]:
                        pass
                    else:
                        pass


                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 347
                self.match(VyperParser.STAR)
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 348
                    self.vfpdef()


                self.state = 359
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 351
                        self.match(VyperParser.COMMA)
                        self.state = 352
                        self.vfpdef()
                        self.state = 355
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==53:
                            self.state = 353
                            self.match(VyperParser.ASSIGN)
                            self.state = 354
                            self.test()

                 
                    self.state = 361
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 362
                    self.match(VyperParser.COMMA)
                    self.state = 363
                    self.match(VyperParser.POWER)
                    self.state = 364
                    self.vfpdef()


                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 3)
                self.state = 367
                self.match(VyperParser.POWER)
                self.state = 368
                self.vfpdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VfpdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_vfpdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVfpdef" ):
                listener.enterVfpdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVfpdef" ):
                listener.exitVfpdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVfpdef" ):
                return visitor.visitVfpdef(self)
            else:
                return visitor.visitChildren(self)




    def vfpdef(self):

        localctx = VyperParser.VfpdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_vfpdef)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(VyperParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(VyperParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(VyperParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = VyperParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_stmt)
        try:
            self.state = 375
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 7, 8, 9, 20, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 54, 61, 62, 66, 67]:
                self.enterOuterAlt(localctx, 1)
                self.state = 373
                self.simple_stmt()
                pass
            elif token in [1, 10, 13, 14, 16, 18, 28, 76]:
                self.enterOuterAlt(localctx, 2)
                self.state = 374
                self.compound_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(VyperParser.Small_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(VyperParser.NEWLINE, 0)

        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.SEMI_COLON)
            else:
                return self.getToken(VyperParser.SEMI_COLON, i)

        def getRuleIndex(self):
            return VyperParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = VyperParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 377
            self.small_stmt()
            self.state = 382
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 378
                    self.match(VyperParser.SEMI_COLON)
                    self.state = 379
                    self.small_stmt() 
                self.state = 384
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

            self.state = 386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 385
                self.match(VyperParser.SEMI_COLON)


            self.state = 388
            self.match(VyperParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Small_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr_stmt(self):
            return self.getTypedRuleContext(VyperParser.Expr_stmtContext,0)


        def del_stmt(self):
            return self.getTypedRuleContext(VyperParser.Del_stmtContext,0)


        def pass_stmt(self):
            return self.getTypedRuleContext(VyperParser.Pass_stmtContext,0)


        def flow_stmt(self):
            return self.getTypedRuleContext(VyperParser.Flow_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(VyperParser.Import_stmtContext,0)


        def global_stmt(self):
            return self.getTypedRuleContext(VyperParser.Global_stmtContext,0)


        def contract_global_stmt(self):
            return self.getTypedRuleContext(VyperParser.Contract_global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(VyperParser.Nonlocal_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(VyperParser.Assert_stmtContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_small_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSmall_stmt" ):
                listener.enterSmall_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSmall_stmt" ):
                listener.exitSmall_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSmall_stmt" ):
                return visitor.visitSmall_stmt(self)
            else:
                return visitor.visitChildren(self)




    def small_stmt(self):

        localctx = VyperParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_small_stmt)
        try:
            self.state = 399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 390
                self.expr_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 391
                self.del_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 392
                self.pass_stmt()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 393
                self.flow_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 394
                self.import_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 395
                self.global_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 396
                self.contract_global_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 397
                self.nonlocal_stmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 398
                self.assert_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(VyperParser.Testlist_star_exprContext,i)


        def augassign(self):
            return self.getTypedRuleContext(VyperParser.AugassignContext,0)


        def yield_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Yield_exprContext)
            else:
                return self.getTypedRuleContext(VyperParser.Yield_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(VyperParser.TestlistContext,0)


        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.ASSIGN)
            else:
                return self.getToken(VyperParser.ASSIGN, i)

        def getRuleIndex(self):
            return VyperParser.RULE_expr_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)




    def expr_stmt(self):

        localctx = VyperParser.Expr_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_expr_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.testlist_star_expr()
            self.state = 417
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]:
                self.state = 402
                self.augassign()
                self.state = 405
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [29]:
                    self.state = 403
                    self.yield_expr()
                    pass
                elif token in [20, 23, 25, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 54, 61, 62, 66, 67]:
                    self.state = 404
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [34, 51, 53]:
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==53:
                    self.state = 407
                    self.match(VyperParser.ASSIGN)
                    self.state = 410
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [29]:
                        self.state = 408
                        self.yield_expr()
                        pass
                    elif token in [20, 23, 25, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 54, 61, 62, 66, 67]:
                        self.state = 409
                        self.testlist_star_expr()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 416
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TestContext)
            else:
                return self.getTypedRuleContext(VyperParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(VyperParser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = VyperParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_testlist_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.state = 419
                self.test()
                pass

            elif la_ == 2:
                self.state = 420
                self.star_expr()
                pass


            self.state = 430
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 423
                    self.match(VyperParser.COMMA)
                    self.state = 426
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                    if la_ == 1:
                        self.state = 424
                        self.test()
                        pass

                    elif la_ == 2:
                        self.state = 425
                        self.star_expr()
                        pass

             
                self.state = 432
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 433
                self.match(VyperParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD_ASSIGN(self):
            return self.getToken(VyperParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(VyperParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(VyperParser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(VyperParser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(VyperParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(VyperParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(VyperParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(VyperParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(VyperParser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(VyperParser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(VyperParser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(VyperParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(VyperParser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_augassign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAugassign" ):
                listener.enterAugassign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAugassign" ):
                listener.exitAugassign(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = VyperParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            _la = self._input.LA(1)
            if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & 8191) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(VyperParser.DEL, 0)

        def exprlist(self):
            return self.getTypedRuleContext(VyperParser.ExprlistContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_del_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = VyperParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(VyperParser.DEL)
            self.state = 439
            self.exprlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pass_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PASS(self):
            return self.getToken(VyperParser.PASS, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_pass_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)




    def pass_stmt(self):

        localctx = VyperParser.Pass_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pass_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(VyperParser.PASS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flow_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def break_stmt(self):
            return self.getTypedRuleContext(VyperParser.Break_stmtContext,0)


        def continue_stmt(self):
            return self.getTypedRuleContext(VyperParser.Continue_stmtContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(VyperParser.Return_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(VyperParser.Raise_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(VyperParser.Yield_stmtContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_flow_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlow_stmt" ):
                listener.enterFlow_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlow_stmt" ):
                listener.exitFlow_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlow_stmt" ):
                return visitor.visitFlow_stmt(self)
            else:
                return visitor.visitChildren(self)




    def flow_stmt(self):

        localctx = VyperParser.Flow_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_flow_stmt)
        try:
            self.state = 448
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [33]:
                self.enterOuterAlt(localctx, 1)
                self.state = 443
                self.break_stmt()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 2)
                self.state = 444
                self.continue_stmt()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 445
                self.return_stmt()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 4)
                self.state = 446
                self.raise_stmt()
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 5)
                self.state = 447
                self.yield_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Break_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BREAK(self):
            return self.getToken(VyperParser.BREAK, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_break_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)




    def break_stmt(self):

        localctx = VyperParser.Break_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_break_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.match(VyperParser.BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Continue_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(VyperParser.CONTINUE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_continue_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)




    def continue_stmt(self):

        localctx = VyperParser.Continue_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_continue_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.match(VyperParser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(VyperParser.RETURN, 0)

        def testlist(self):
            return self.getTypedRuleContext(VyperParser.TestlistContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_return_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = VyperParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 454
            self.match(VyperParser.RETURN)
            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 217720733794537) != 0):
                self.state = 455
                self.testlist()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(VyperParser.Yield_exprContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_yield_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = VyperParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(VyperParser.RAISE, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TestContext)
            else:
                return self.getTypedRuleContext(VyperParser.TestContext,i)


        def FROM(self):
            return self.getToken(VyperParser.FROM, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_raise_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = VyperParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.match(VyperParser.RAISE)
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 217720733794537) != 0):
                self.state = 461
                self.test()
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==4:
                    self.state = 462
                    self.match(VyperParser.FROM)
                    self.state = 463
                    self.test()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(VyperParser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(VyperParser.Import_fromContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_import_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = VyperParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_import_stmt)
        try:
            self.state = 470
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 468
                self.import_name()
                pass
            elif token in [4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 469
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(VyperParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(VyperParser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_import_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_name" ):
                listener.enterImport_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_name" ):
                listener.exitImport_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_name" ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = VyperParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 472
            self.match(VyperParser.IMPORT)
            self.state = 473
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(VyperParser.FROM, 0)

        def IMPORT(self):
            return self.getToken(VyperParser.IMPORT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(VyperParser.Dotted_nameContext,0)


        def STAR(self):
            return self.getToken(VyperParser.STAR, 0)

        def OPEN_PAREN(self):
            return self.getToken(VyperParser.OPEN_PAREN, 0)

        def import_as_names(self):
            return self.getTypedRuleContext(VyperParser.Import_as_namesContext,0)


        def CLOSE_PAREN(self):
            return self.getToken(VyperParser.CLOSE_PAREN, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.DOT)
            else:
                return self.getToken(VyperParser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.ELLIPSIS)
            else:
                return self.getToken(VyperParser.ELLIPSIS, i)

        def getRuleIndex(self):
            return VyperParser.RULE_import_from

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_from" ):
                listener.enterImport_from(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_from" ):
                listener.exitImport_from(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from" ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = VyperParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.match(VyperParser.FROM)
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==44 or _la==45:
                    self.state = 476
                    _la = self._input.LA(1)
                    if not(_la==44 or _la==45):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 481
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 482
                self.dotted_name()
                pass

            elif la_ == 2:
                self.state = 484 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 483
                    _la = self._input.LA(1)
                    if not(_la==44 or _la==45):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 486 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==44 or _la==45):
                        break

                pass


            self.state = 490
            self.match(VyperParser.IMPORT)
            self.state = 497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46]:
                self.state = 491
                self.match(VyperParser.STAR)
                pass
            elif token in [47]:
                self.state = 492
                self.match(VyperParser.OPEN_PAREN)
                self.state = 493
                self.import_as_names()
                self.state = 494
                self.match(VyperParser.CLOSE_PAREN)
                pass
            elif token in [35]:
                self.state = 496
                self.import_as_names()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NAME)
            else:
                return self.getToken(VyperParser.NAME, i)

        def AS(self):
            return self.getToken(VyperParser.AS, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = VyperParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(VyperParser.NAME)
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 500
                self.match(VyperParser.AS)
                self.state = 501
                self.match(VyperParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(VyperParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(VyperParser.AS, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = VyperParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 504
            self.dotted_name()
            self.state = 507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 505
                self.match(VyperParser.AS)
                self.state = 506
                self.match(VyperParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(VyperParser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = VyperParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 509
            self.import_as_name()
            self.state = 514
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 510
                    self.match(VyperParser.COMMA)
                    self.state = 511
                    self.import_as_name() 
                self.state = 516
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 517
                self.match(VyperParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(VyperParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = VyperParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 520
            self.dotted_as_name()
            self.state = 525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==49:
                self.state = 521
                self.match(VyperParser.COMMA)
                self.state = 522
                self.dotted_as_name()
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NAME)
            else:
                return self.getToken(VyperParser.NAME, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.DOT)
            else:
                return self.getToken(VyperParser.DOT, i)

        def getRuleIndex(self):
            return VyperParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_name(self):

        localctx = VyperParser.Dotted_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dotted_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 528
            self.match(VyperParser.NAME)
            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==44:
                self.state = 529
                self.match(VyperParser.DOT)
                self.state = 530
                self.match(VyperParser.NAME)
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(VyperParser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NAME)
            else:
                return self.getToken(VyperParser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = VyperParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self.match(VyperParser.GLOBAL)
            self.state = 537
            self.match(VyperParser.NAME)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==49:
                self.state = 538
                self.match(VyperParser.COMMA)
                self.state = 539
                self.match(VyperParser.NAME)
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Contract_global_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def expr_stmt(self):
            return self.getTypedRuleContext(VyperParser.Expr_stmtContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_contract_global_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContract_global_stmt" ):
                listener.enterContract_global_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContract_global_stmt" ):
                listener.exitContract_global_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContract_global_stmt" ):
                return visitor.visitContract_global_stmt(self)
            else:
                return visitor.visitChildren(self)




    def contract_global_stmt(self):

        localctx = VyperParser.Contract_global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_contract_global_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(VyperParser.NAME)
            self.state = 546
            self.match(VyperParser.COLON)
            self.state = 547
            self.expr_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonlocal_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(VyperParser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.NAME)
            else:
                return self.getToken(VyperParser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_nonlocal_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = VyperParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.match(VyperParser.NONLOCAL)
            self.state = 550
            self.match(VyperParser.NAME)
            self.state = 555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==49:
                self.state = 551
                self.match(VyperParser.COMMA)
                self.state = 552
                self.match(VyperParser.NAME)
                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(VyperParser.ASSERT, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TestContext)
            else:
                return self.getTypedRuleContext(VyperParser.TestContext,i)


        def COMMA(self):
            return self.getToken(VyperParser.COMMA, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_assert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = VyperParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.match(VyperParser.ASSERT)
            self.state = 559
            self.test()
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 560
                self.match(VyperParser.COMMA)
                self.state = 561
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def if_stmt(self):
            return self.getTypedRuleContext(VyperParser.If_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(VyperParser.While_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(VyperParser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(VyperParser.Try_stmtContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(VyperParser.With_stmtContext,0)


        def funcdef(self):
            return self.getTypedRuleContext(VyperParser.FuncdefContext,0)


        def classdef(self):
            return self.getTypedRuleContext(VyperParser.ClassdefContext,0)


        def decorated(self):
            return self.getTypedRuleContext(VyperParser.DecoratedContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_compound_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_stmt" ):
                listener.enterCompound_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_stmt" ):
                listener.exitCompound_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stmt" ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = VyperParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_compound_stmt)
        try:
            self.state = 572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 564
                self.if_stmt()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 565
                self.while_stmt()
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 3)
                self.state = 566
                self.for_stmt()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 4)
                self.state = 567
                self.try_stmt()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 5)
                self.state = 568
                self.with_stmt()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 6)
                self.state = 569
                self.funcdef()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 7)
                self.state = 570
                self.classdef()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 8)
                self.state = 571
                self.decorated()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(VyperParser.IF, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TestContext)
            else:
                return self.getTypedRuleContext(VyperParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COLON)
            else:
                return self.getToken(VyperParser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.SuiteContext)
            else:
                return self.getTypedRuleContext(VyperParser.SuiteContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.ELIF)
            else:
                return self.getToken(VyperParser.ELIF, i)

        def ELSE(self):
            return self.getToken(VyperParser.ELSE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_if_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = VyperParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_if_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(VyperParser.IF)
            self.state = 575
            self.test()
            self.state = 576
            self.match(VyperParser.COLON)
            self.state = 577
            self.suite()
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==11:
                self.state = 578
                self.match(VyperParser.ELIF)
                self.state = 579
                self.test()
                self.state = 580
                self.match(VyperParser.COLON)
                self.state = 581
                self.suite()
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 588
                self.match(VyperParser.ELSE)
                self.state = 589
                self.match(VyperParser.COLON)
                self.state = 590
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(VyperParser.WHILE, 0)

        def test(self):
            return self.getTypedRuleContext(VyperParser.TestContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COLON)
            else:
                return self.getToken(VyperParser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.SuiteContext)
            else:
                return self.getTypedRuleContext(VyperParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(VyperParser.ELSE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_while_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = VyperParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_while_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.match(VyperParser.WHILE)
            self.state = 594
            self.test()
            self.state = 595
            self.match(VyperParser.COLON)
            self.state = 596
            self.suite()
            self.state = 600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 597
                self.match(VyperParser.ELSE)
                self.state = 598
                self.match(VyperParser.COLON)
                self.state = 599
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(VyperParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(VyperParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(VyperParser.IN, 0)

        def testlist(self):
            return self.getTypedRuleContext(VyperParser.TestlistContext,0)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COLON)
            else:
                return self.getToken(VyperParser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.SuiteContext)
            else:
                return self.getTypedRuleContext(VyperParser.SuiteContext,i)


        def ELSE(self):
            return self.getToken(VyperParser.ELSE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_for_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = VyperParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 602
            self.match(VyperParser.FOR)
            self.state = 603
            self.exprlist()
            self.state = 604
            self.match(VyperParser.IN)
            self.state = 605
            self.testlist()
            self.state = 606
            self.match(VyperParser.COLON)
            self.state = 607
            self.suite()
            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==12:
                self.state = 608
                self.match(VyperParser.ELSE)
                self.state = 609
                self.match(VyperParser.COLON)
                self.state = 610
                self.suite()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(VyperParser.TRY, 0)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COLON)
            else:
                return self.getToken(VyperParser.COLON, i)

        def suite(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.SuiteContext)
            else:
                return self.getTypedRuleContext(VyperParser.SuiteContext,i)


        def FINALLY(self):
            return self.getToken(VyperParser.FINALLY, 0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(VyperParser.Except_clauseContext,i)


        def ELSE(self):
            return self.getToken(VyperParser.ELSE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_try_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = VyperParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_try_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(VyperParser.TRY)
            self.state = 614
            self.match(VyperParser.COLON)
            self.state = 615
            self.suite()
            self.state = 637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19]:
                self.state = 620 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 616
                    self.except_clause()
                    self.state = 617
                    self.match(VyperParser.COLON)
                    self.state = 618
                    self.suite()
                    self.state = 622 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==19):
                        break

                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 624
                    self.match(VyperParser.ELSE)
                    self.state = 625
                    self.match(VyperParser.COLON)
                    self.state = 626
                    self.suite()


                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==17:
                    self.state = 629
                    self.match(VyperParser.FINALLY)
                    self.state = 630
                    self.match(VyperParser.COLON)
                    self.state = 631
                    self.suite()


                pass
            elif token in [17]:
                self.state = 634
                self.match(VyperParser.FINALLY)
                self.state = 635
                self.match(VyperParser.COLON)
                self.state = 636
                self.suite()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(VyperParser.WITH, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.With_itemContext)
            else:
                return self.getTypedRuleContext(VyperParser.With_itemContext,i)


        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(VyperParser.SuiteContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_with_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = VyperParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(VyperParser.WITH)
            self.state = 640
            self.with_item()
            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==49:
                self.state = 641
                self.match(VyperParser.COMMA)
                self.state = 642
                self.with_item()
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 648
            self.match(VyperParser.COLON)
            self.state = 649
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(VyperParser.TestContext,0)


        def AS(self):
            return self.getToken(VyperParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = VyperParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.test()
            self.state = 654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 652
                self.match(VyperParser.AS)
                self.state = 653
                self.expr()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(VyperParser.EXCEPT, 0)

        def test(self):
            return self.getTypedRuleContext(VyperParser.TestContext,0)


        def AS(self):
            return self.getToken(VyperParser.AS, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = VyperParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(VyperParser.EXCEPT)
            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 217720733794537) != 0):
                self.state = 657
                self.test()
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==6:
                    self.state = 658
                    self.match(VyperParser.AS)
                    self.state = 659
                    self.match(VyperParser.NAME)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(VyperParser.Simple_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(VyperParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(VyperParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(VyperParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.StmtContext)
            else:
                return self.getTypedRuleContext(VyperParser.StmtContext,i)


        def getRuleIndex(self):
            return VyperParser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuite" ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = VyperParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 674
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [2, 3, 4, 5, 7, 8, 9, 20, 23, 25, 26, 27, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 54, 61, 62, 66, 67]:
                self.enterOuterAlt(localctx, 1)
                self.state = 664
                self.simple_stmt()
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 2)
                self.state = 665
                self.match(VyperParser.NEWLINE)
                self.state = 666
                self.match(VyperParser.INDENT)
                self.state = 668 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 667
                    self.stmt()
                    self.state = 670 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 6935807291737597886) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 1027) != 0)):
                        break

                self.state = 672
                self.match(VyperParser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Or_testContext)
            else:
                return self.getTypedRuleContext(VyperParser.Or_testContext,i)


        def IF(self):
            return self.getToken(VyperParser.IF, 0)

        def ELSE(self):
            return self.getToken(VyperParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(VyperParser.TestContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(VyperParser.LambdefContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = VyperParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 685
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23, 25, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 54, 61, 62, 66, 67]:
                self.enterOuterAlt(localctx, 1)
                self.state = 676
                self.or_test()
                self.state = 682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 677
                    self.match(VyperParser.IF)
                    self.state = 678
                    self.or_test()
                    self.state = 679
                    self.match(VyperParser.ELSE)
                    self.state = 680
                    self.test()


                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 684
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Test_nocondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_test(self):
            return self.getTypedRuleContext(VyperParser.Or_testContext,0)


        def lambdef_nocond(self):
            return self.getTypedRuleContext(VyperParser.Lambdef_nocondContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_test_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_nocond" ):
                listener.enterTest_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_nocond" ):
                listener.exitTest_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest_nocond" ):
                return visitor.visitTest_nocond(self)
            else:
                return visitor.visitChildren(self)




    def test_nocond(self):

        localctx = VyperParser.Test_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_test_nocond)
        try:
            self.state = 689
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23, 25, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 54, 61, 62, 66, 67]:
                self.enterOuterAlt(localctx, 1)
                self.state = 687
                self.or_test()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 688
                self.lambdef_nocond()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(VyperParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(VyperParser.TestContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(VyperParser.VarargslistContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_lambdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef" ):
                listener.enterLambdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef" ):
                listener.exitLambdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef" ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = VyperParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 691
            self.match(VyperParser.LAMBDA)
            self.state = 693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4574002731286528) != 0):
                self.state = 692
                self.varargslist()


            self.state = 695
            self.match(VyperParser.COLON)
            self.state = 696
            self.test()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambdef_nocondContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(VyperParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(VyperParser.Test_nocondContext,0)


        def varargslist(self):
            return self.getTypedRuleContext(VyperParser.VarargslistContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_lambdef_nocond

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdef_nocond" ):
                listener.enterLambdef_nocond(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdef_nocond" ):
                listener.exitLambdef_nocond(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef_nocond" ):
                return visitor.visitLambdef_nocond(self)
            else:
                return visitor.visitChildren(self)




    def lambdef_nocond(self):

        localctx = VyperParser.Lambdef_nocondContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_lambdef_nocond)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(VyperParser.LAMBDA)
            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 4574002731286528) != 0):
                self.state = 699
                self.varargslist()


            self.state = 702
            self.match(VyperParser.COLON)
            self.state = 703
            self.test_nocond()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.And_testContext)
            else:
                return self.getTypedRuleContext(VyperParser.And_testContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.OR)
            else:
                return self.getToken(VyperParser.OR, i)

        def getRuleIndex(self):
            return VyperParser.RULE_or_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOr_test" ):
                listener.enterOr_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOr_test" ):
                listener.exitOr_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_test" ):
                return visitor.visitOr_test(self)
            else:
                return visitor.visitChildren(self)




    def or_test(self):

        localctx = VyperParser.Or_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_or_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.and_test()
            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==21:
                self.state = 706
                self.match(VyperParser.OR)
                self.state = 707
                self.and_test()
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def not_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Not_testContext)
            else:
                return self.getTypedRuleContext(VyperParser.Not_testContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.AND)
            else:
                return self.getToken(VyperParser.AND, i)

        def getRuleIndex(self):
            return VyperParser.RULE_and_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_test" ):
                listener.enterAnd_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_test" ):
                listener.exitAnd_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_test" ):
                return visitor.visitAnd_test(self)
            else:
                return visitor.visitChildren(self)




    def and_test(self):

        localctx = VyperParser.And_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_and_test)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.not_test()
            self.state = 718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==22:
                self.state = 714
                self.match(VyperParser.AND)
                self.state = 715
                self.not_test()
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Not_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(VyperParser.NOT, 0)

        def not_test(self):
            return self.getTypedRuleContext(VyperParser.Not_testContext,0)


        def comparison(self):
            return self.getTypedRuleContext(VyperParser.ComparisonContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_not_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNot_test" ):
                listener.enterNot_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNot_test" ):
                listener.exitNot_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNot_test" ):
                return visitor.visitNot_test(self)
            else:
                return visitor.visitChildren(self)




    def not_test(self):

        localctx = VyperParser.Not_testContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_not_test)
        try:
            self.state = 724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [23]:
                self.enterOuterAlt(localctx, 1)
                self.state = 721
                self.match(VyperParser.NOT)
                self.state = 722
                self.not_test()
                pass
            elif token in [25, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 54, 61, 62, 66, 67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 723
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(VyperParser.Star_exprContext,i)


        def comp_op(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Comp_opContext)
            else:
                return self.getTypedRuleContext(VyperParser.Comp_opContext,i)


        def getRuleIndex(self):
            return VyperParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = VyperParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.star_expr()
            self.state = 732
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & 2287828610704212737) != 0):
                self.state = 727
                self.comp_op()
                self.state = 728
                self.star_expr()
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_THAN(self):
            return self.getToken(VyperParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(VyperParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(VyperParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(VyperParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(VyperParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(VyperParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(VyperParser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(VyperParser.IN, 0)

        def NOT(self):
            return self.getToken(VyperParser.NOT, 0)

        def IS(self):
            return self.getToken(VyperParser.IS, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_comp_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_op" ):
                listener.enterComp_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_op" ):
                listener.exitComp_op(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_op" ):
                return visitor.visitComp_op(self)
            else:
                return visitor.visitChildren(self)




    def comp_op(self):

        localctx = VyperParser.Comp_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_comp_op)
        try:
            self.state = 748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 735
                self.match(VyperParser.LESS_THAN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 736
                self.match(VyperParser.GREATER_THAN)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 737
                self.match(VyperParser.EQUALS)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 738
                self.match(VyperParser.GT_EQ)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 739
                self.match(VyperParser.LT_EQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 740
                self.match(VyperParser.NOT_EQ_1)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 741
                self.match(VyperParser.NOT_EQ_2)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 742
                self.match(VyperParser.IN)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 743
                self.match(VyperParser.NOT)
                self.state = 744
                self.match(VyperParser.IN)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 745
                self.match(VyperParser.IS)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 746
                self.match(VyperParser.IS)
                self.state = 747
                self.match(VyperParser.NOT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(VyperParser.ExprContext,0)


        def STAR(self):
            return self.getToken(VyperParser.STAR, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = VyperParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_star_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==46:
                self.state = 750
                self.match(VyperParser.STAR)


            self.state = 753
            self.expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xor_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Xor_exprContext)
            else:
                return self.getTypedRuleContext(VyperParser.Xor_exprContext,i)


        def OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.OR_OP)
            else:
                return self.getToken(VyperParser.OR_OP, i)

        def getRuleIndex(self):
            return VyperParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)




    def expr(self):

        localctx = VyperParser.ExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 755
            self.xor_expr()
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==56:
                self.state = 756
                self.match(VyperParser.OR_OP)
                self.state = 757
                self.xor_expr()
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xor_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def and_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.And_exprContext)
            else:
                return self.getTypedRuleContext(VyperParser.And_exprContext,i)


        def XOR(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.XOR)
            else:
                return self.getToken(VyperParser.XOR, i)

        def getRuleIndex(self):
            return VyperParser.RULE_xor_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXor_expr" ):
                listener.enterXor_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXor_expr" ):
                listener.exitXor_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitXor_expr" ):
                return visitor.visitXor_expr(self)
            else:
                return visitor.visitChildren(self)




    def xor_expr(self):

        localctx = VyperParser.Xor_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_xor_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.and_expr()
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57:
                self.state = 764
                self.match(VyperParser.XOR)
                self.state = 765
                self.and_expr()
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class And_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Shift_exprContext)
            else:
                return self.getTypedRuleContext(VyperParser.Shift_exprContext,i)


        def AND_OP(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.AND_OP)
            else:
                return self.getToken(VyperParser.AND_OP, i)

        def getRuleIndex(self):
            return VyperParser.RULE_and_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnd_expr" ):
                listener.enterAnd_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnd_expr" ):
                listener.exitAnd_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnd_expr" ):
                return visitor.visitAnd_expr(self)
            else:
                return visitor.visitChildren(self)




    def and_expr(self):

        localctx = VyperParser.And_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_and_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 771
            self.shift_expr()
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==58:
                self.state = 772
                self.match(VyperParser.AND_OP)
                self.state = 773
                self.shift_expr()
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shift_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arith_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Arith_exprContext)
            else:
                return self.getTypedRuleContext(VyperParser.Arith_exprContext,i)


        def LEFT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.LEFT_SHIFT)
            else:
                return self.getToken(VyperParser.LEFT_SHIFT, i)

        def RIGHT_SHIFT(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.RIGHT_SHIFT)
            else:
                return self.getToken(VyperParser.RIGHT_SHIFT, i)

        def getRuleIndex(self):
            return VyperParser.RULE_shift_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShift_expr" ):
                listener.enterShift_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShift_expr" ):
                listener.exitShift_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShift_expr" ):
                return visitor.visitShift_expr(self)
            else:
                return visitor.visitChildren(self)




    def shift_expr(self):

        localctx = VyperParser.Shift_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_shift_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.arith_expr()
            self.state = 786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==59 or _la==60:
                self.state = 784
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [59]:
                    self.state = 780
                    self.match(VyperParser.LEFT_SHIFT)
                    self.state = 781
                    self.arith_expr()
                    pass
                elif token in [60]:
                    self.state = 782
                    self.match(VyperParser.RIGHT_SHIFT)
                    self.state = 783
                    self.arith_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arith_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TermContext)
            else:
                return self.getTypedRuleContext(VyperParser.TermContext,i)


        def ADD(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.ADD)
            else:
                return self.getToken(VyperParser.ADD, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.MINUS)
            else:
                return self.getToken(VyperParser.MINUS, i)

        def getRuleIndex(self):
            return VyperParser.RULE_arith_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArith_expr" ):
                listener.enterArith_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArith_expr" ):
                listener.exitArith_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArith_expr" ):
                return visitor.visitArith_expr(self)
            else:
                return visitor.visitChildren(self)




    def arith_expr(self):

        localctx = VyperParser.Arith_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_arith_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.term()
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==61 or _la==62:
                self.state = 794
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [61]:
                    self.state = 790
                    self.match(VyperParser.ADD)
                    self.state = 791
                    self.term()
                    pass
                elif token in [62]:
                    self.state = 792
                    self.match(VyperParser.MINUS)
                    self.state = 793
                    self.term()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 798
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.FactorContext)
            else:
                return self.getTypedRuleContext(VyperParser.FactorContext,i)


        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.STAR)
            else:
                return self.getToken(VyperParser.STAR, i)

        def DIV(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.DIV)
            else:
                return self.getToken(VyperParser.DIV, i)

        def MOD(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.MOD)
            else:
                return self.getToken(VyperParser.MOD, i)

        def IDIV(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.IDIV)
            else:
                return self.getToken(VyperParser.IDIV, i)

        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.AT)
            else:
                return self.getToken(VyperParser.AT, i)

        def getRuleIndex(self):
            return VyperParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)




    def term(self):

        localctx = VyperParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.factor()
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 46)) & ~0x3f) == 0 and ((1 << (_la - 46)) & 1074659329) != 0):
                self.state = 810
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [46]:
                    self.state = 800
                    self.match(VyperParser.STAR)
                    self.state = 801
                    self.factor()
                    pass
                elif token in [63]:
                    self.state = 802
                    self.match(VyperParser.DIV)
                    self.state = 803
                    self.factor()
                    pass
                elif token in [64]:
                    self.state = 804
                    self.match(VyperParser.MOD)
                    self.state = 805
                    self.factor()
                    pass
                elif token in [65]:
                    self.state = 806
                    self.match(VyperParser.IDIV)
                    self.state = 807
                    self.factor()
                    pass
                elif token in [76]:
                    self.state = 808
                    self.match(VyperParser.AT)
                    self.state = 809
                    self.factor()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(VyperParser.ADD, 0)

        def factor(self):
            return self.getTypedRuleContext(VyperParser.FactorContext,0)


        def MINUS(self):
            return self.getToken(VyperParser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(VyperParser.NOT_OP, 0)

        def power(self):
            return self.getTypedRuleContext(VyperParser.PowerContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = VyperParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_factor)
        try:
            self.state = 822
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.enterOuterAlt(localctx, 1)
                self.state = 815
                self.match(VyperParser.ADD)
                self.state = 816
                self.factor()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 817
                self.match(VyperParser.MINUS)
                self.state = 818
                self.factor()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 3)
                self.state = 819
                self.match(VyperParser.NOT_OP)
                self.state = 820
                self.factor()
                pass
            elif token in [25, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 47, 54, 67]:
                self.enterOuterAlt(localctx, 4)
                self.state = 821
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(VyperParser.AtomContext,0)


        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TrailerContext)
            else:
                return self.getTypedRuleContext(VyperParser.TrailerContext,i)


        def POWER(self):
            return self.getToken(VyperParser.POWER, 0)

        def factor(self):
            return self.getTypedRuleContext(VyperParser.FactorContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_power

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPower" ):
                listener.enterPower(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPower" ):
                listener.exitPower(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPower" ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)




    def power(self):

        localctx = VyperParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_power)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.atom()
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 18172728183881728) != 0):
                self.state = 825
                self.trailer()
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 831
                self.match(VyperParser.POWER)
                self.state = 832
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(VyperParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(VyperParser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(VyperParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(VyperParser.Testlist_compContext,0)


        def OPEN_BRACK(self):
            return self.getToken(VyperParser.OPEN_BRACK, 0)

        def CLOSE_BRACK(self):
            return self.getToken(VyperParser.CLOSE_BRACK, 0)

        def OPEN_BRACE(self):
            return self.getToken(VyperParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(VyperParser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(VyperParser.DictorsetmakerContext,0)


        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def number(self):
            return self.getTypedRuleContext(VyperParser.NumberContext,0)


        def strr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.StrrContext)
            else:
                return self.getTypedRuleContext(VyperParser.StrrContext,i)


        def ELLIPSIS(self):
            return self.getToken(VyperParser.ELLIPSIS, 0)

        def NONE(self):
            return self.getToken(VyperParser.NONE, 0)

        def TRUE(self):
            return self.getToken(VyperParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(VyperParser.FALSE, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = VyperParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 862
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47]:
                self.enterOuterAlt(localctx, 1)
                self.state = 835
                self.match(VyperParser.OPEN_PAREN)
                self.state = 838
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [29]:
                    self.state = 836
                    self.yield_expr()
                    pass
                elif token in [20, 23, 25, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 54, 61, 62, 66, 67]:
                    self.state = 837
                    self.testlist_comp()
                    pass
                elif token in [48]:
                    pass
                else:
                    pass
                self.state = 840
                self.match(VyperParser.CLOSE_PAREN)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 841
                self.match(VyperParser.OPEN_BRACK)
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 217720733794537) != 0):
                    self.state = 842
                    self.testlist_comp()


                self.state = 845
                self.match(VyperParser.CLOSE_BRACK)
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 3)
                self.state = 846
                self.match(VyperParser.OPEN_BRACE)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 217720733794537) != 0):
                    self.state = 847
                    self.dictorsetmaker()


                self.state = 850
                self.match(VyperParser.CLOSE_BRACE)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 4)
                self.state = 851
                self.match(VyperParser.NAME)
                pass
            elif token in [38, 39, 40, 41, 42, 43]:
                self.enterOuterAlt(localctx, 5)
                self.state = 852
                self.number()
                pass
            elif token in [36, 37]:
                self.enterOuterAlt(localctx, 6)
                self.state = 854 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 853
                    self.strr()
                    self.state = 856 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==36 or _la==37):
                        break

                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 7)
                self.state = 858
                self.match(VyperParser.ELLIPSIS)
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 8)
                self.state = 859
                self.match(VyperParser.NONE)
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 9)
                self.state = 860
                self.match(VyperParser.TRUE)
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 10)
                self.state = 861
                self.match(VyperParser.FALSE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TestContext)
            else:
                return self.getTypedRuleContext(VyperParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(VyperParser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = VyperParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.test()
            self.state = 876
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.state = 865
                self.comp_for()
                pass
            elif token in [48, 49, 55]:
                self.state = 870
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 866
                        self.match(VyperParser.COMMA)
                        self.state = 867
                        self.test() 
                    self.state = 872
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 873
                    self.match(VyperParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(VyperParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(VyperParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(VyperParser.ArglistContext,0)


        def OPEN_BRACK(self):
            return self.getToken(VyperParser.OPEN_BRACK, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(VyperParser.SubscriptlistContext,0)


        def CLOSE_BRACK(self):
            return self.getToken(VyperParser.CLOSE_BRACK, 0)

        def DOT(self):
            return self.getToken(VyperParser.DOT, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = VyperParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_trailer)
        self._la = 0 # Token type
        try:
            self.state = 889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [47]:
                self.enterOuterAlt(localctx, 1)
                self.state = 878
                self.match(VyperParser.OPEN_PAREN)
                self.state = 880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 217725028761833) != 0):
                    self.state = 879
                    self.arglist()


                self.state = 882
                self.match(VyperParser.CLOSE_PAREN)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 883
                self.match(VyperParser.OPEN_BRACK)
                self.state = 884
                self.subscriptlist()
                self.state = 885
                self.match(VyperParser.CLOSE_BRACK)
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 3)
                self.state = 887
                self.match(VyperParser.DOT)
                self.state = 888
                self.match(VyperParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(VyperParser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = VyperParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.subscript()
            self.state = 896
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 892
                    self.match(VyperParser.COMMA)
                    self.state = 893
                    self.subscript() 
                self.state = 898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

            self.state = 900
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 899
                self.match(VyperParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TestContext)
            else:
                return self.getTypedRuleContext(VyperParser.TestContext,i)


        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(VyperParser.SliceopContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = VyperParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 902
                self.test()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 217720733794537) != 0):
                    self.state = 903
                    self.test()


                self.state = 906
                self.match(VyperParser.COLON)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 217720733794537) != 0):
                    self.state = 907
                    self.test()


                self.state = 911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 910
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(VyperParser.TestContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = VyperParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            self.match(VyperParser.COLON)
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 217720733794537) != 0):
                self.state = 916
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(VyperParser.Star_exprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = VyperParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.star_expr()
            self.state = 924
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 920
                    self.match(VyperParser.COMMA)
                    self.state = 921
                    self.star_expr() 
                self.state = 926
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

            self.state = 928
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 927
                self.match(VyperParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TestContext)
            else:
                return self.getTypedRuleContext(VyperParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = VyperParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_testlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.test()
            self.state = 935
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 931
                    self.match(VyperParser.COMMA)
                    self.state = 932
                    self.test() 
                self.state = 937
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

            self.state = 939
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 938
                self.match(VyperParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TestContext)
            else:
                return self.getTypedRuleContext(VyperParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COLON)
            else:
                return self.getToken(VyperParser.COLON, i)

        def comp_for(self):
            return self.getTypedRuleContext(VyperParser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = VyperParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 941
                self.test()
                self.state = 942
                self.match(VyperParser.COLON)
                self.state = 943
                self.test()
                self.state = 958
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14]:
                    self.state = 944
                    self.comp_for()
                    pass
                elif token in [49, 68]:
                    self.state = 952
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 945
                            self.match(VyperParser.COMMA)
                            self.state = 946
                            self.test()
                            self.state = 947
                            self.match(VyperParser.COLON)
                            self.state = 948
                            self.test() 
                        self.state = 954
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

                    self.state = 956
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==49:
                        self.state = 955
                        self.match(VyperParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 960
                self.test()
                self.state = 972
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14]:
                    self.state = 961
                    self.comp_for()
                    pass
                elif token in [49, 68]:
                    self.state = 966
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 962
                            self.match(VyperParser.COMMA)
                            self.state = 963
                            self.test() 
                        self.state = 968
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

                    self.state = 970
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==49:
                        self.state = 969
                        self.match(VyperParser.COMMA)


                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(VyperParser.CLASS, 0)

        def NAME(self):
            return self.getToken(VyperParser.NAME, 0)

        def COLON(self):
            return self.getToken(VyperParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(VyperParser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(VyperParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(VyperParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(VyperParser.ArglistContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = VyperParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 976
            self.match(VyperParser.CLASS)
            self.state = 977
            self.match(VyperParser.NAME)
            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==47:
                self.state = 978
                self.match(VyperParser.OPEN_PAREN)
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & 217725028761833) != 0):
                    self.state = 979
                    self.arglist()


                self.state = 982
                self.match(VyperParser.CLOSE_PAREN)


            self.state = 985
            self.match(VyperParser.COLON)
            self.state = 986
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(VyperParser.ArgumentContext,i)


        def STAR(self):
            return self.getToken(VyperParser.STAR, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TestContext)
            else:
                return self.getTypedRuleContext(VyperParser.TestContext,i)


        def POWER(self):
            return self.getToken(VyperParser.POWER, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(VyperParser.COMMA)
            else:
                return self.getToken(VyperParser.COMMA, i)

        def getRuleIndex(self):
            return VyperParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = VyperParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 988
                    self.argument()
                    self.state = 989
                    self.match(VyperParser.COMMA) 
                self.state = 995
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

            self.state = 1016
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 996
                self.argument()
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 997
                    self.match(VyperParser.COMMA)


                pass

            elif la_ == 2:
                self.state = 1000
                self.match(VyperParser.STAR)
                self.state = 1001
                self.test()
                self.state = 1006
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,139,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1002
                        self.match(VyperParser.COMMA)
                        self.state = 1003
                        self.argument() 
                    self.state = 1008
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,139,self._ctx)

                self.state = 1012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 1009
                    self.match(VyperParser.COMMA)
                    self.state = 1010
                    self.match(VyperParser.POWER)
                    self.state = 1011
                    self.test()


                pass

            elif la_ == 3:
                self.state = 1014
                self.match(VyperParser.POWER)
                self.state = 1015
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(VyperParser.TestContext)
            else:
                return self.getTypedRuleContext(VyperParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(VyperParser.Comp_forContext,0)


        def ASSIGN(self):
            return self.getToken(VyperParser.ASSIGN, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = VyperParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 1026
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1018
                self.test()
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==14:
                    self.state = 1019
                    self.comp_for()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1022
                self.test()
                self.state = 1023
                self.match(VyperParser.ASSIGN)
                self.state = 1024
                self.test()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(VyperParser.Comp_forContext,0)


        def comp_if(self):
            return self.getTypedRuleContext(VyperParser.Comp_ifContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = VyperParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_comp_iter)
        try:
            self.state = 1030
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1028
                self.comp_for()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1029
                self.comp_if()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(VyperParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(VyperParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(VyperParser.IN, 0)

        def or_test(self):
            return self.getTypedRuleContext(VyperParser.Or_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(VyperParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = VyperParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1032
            self.match(VyperParser.FOR)
            self.state = 1033
            self.exprlist()
            self.state = 1034
            self.match(VyperParser.IN)
            self.state = 1035
            self.or_test()
            self.state = 1037
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10 or _la==14:
                self.state = 1036
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_ifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(VyperParser.IF, 0)

        def test_nocond(self):
            return self.getTypedRuleContext(VyperParser.Test_nocondContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(VyperParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_comp_if

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_if" ):
                listener.enterComp_if(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_if" ):
                listener.exitComp_if(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_if" ):
                return visitor.visitComp_if(self)
            else:
                return visitor.visitChildren(self)




    def comp_if(self):

        localctx = VyperParser.Comp_ifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_comp_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1039
            self.match(VyperParser.IF)
            self.state = 1040
            self.test_nocond()
            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10 or _la==14:
                self.state = 1041
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(VyperParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(VyperParser.Yield_argContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = VyperParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1044
            self.match(VyperParser.YIELD)
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & -4178198063750774783) != 0):
                self.state = 1045
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(VyperParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(VyperParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(VyperParser.TestlistContext,0)


        def getRuleIndex(self):
            return VyperParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = VyperParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_yield_arg)
        try:
            self.state = 1051
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.match(VyperParser.FROM)
                self.state = 1049
                self.test()
                pass
            elif token in [20, 23, 25, 26, 27, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 54, 61, 62, 66, 67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1050
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StrrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(VyperParser.STRING_LITERAL, 0)

        def BYTES_LITERAL(self):
            return self.getToken(VyperParser.BYTES_LITERAL, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_strr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStrr" ):
                listener.enterStrr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStrr" ):
                listener.exitStrr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrr" ):
                return visitor.visitStrr(self)
            else:
                return visitor.visitChildren(self)




    def strr(self):

        localctx = VyperParser.StrrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_strr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            _la = self._input.LA(1)
            if not(_la==36 or _la==37):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(VyperParser.IntegerContext,0)


        def FLOAT_NUMBER(self):
            return self.getToken(VyperParser.FLOAT_NUMBER, 0)

        def IMAG_NUMBER(self):
            return self.getToken(VyperParser.IMAG_NUMBER, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = VyperParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_number)
        try:
            self.state = 1058
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38, 39, 40, 41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1055
                self.integer()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1056
                self.match(VyperParser.FLOAT_NUMBER)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1057
                self.match(VyperParser.IMAG_NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(VyperParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(VyperParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(VyperParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(VyperParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return VyperParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = VyperParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4123168604160) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





